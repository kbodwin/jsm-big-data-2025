[
  {
    "objectID": "materials/activities/01-practice-data.html#demo",
    "href": "materials/activities/01-practice-data.html#demo",
    "title": "JSM 2025: Large Local Data Course",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "materials/activities/01-practice-data.html#your-turn",
    "href": "materials/activities/01-practice-data.html#your-turn",
    "title": "JSM 2025: Large Local Data Course",
    "section": "Your Turn",
    "text": "Your Turn"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#setup",
    "href": "materials/activities/02-practice-datatable.html#setup",
    "title": "data.table",
    "section": "Setup",
    "text": "Setup\nDownload zip file\n\nlibrary(data.table)\nlibrary(arrow)\nlibrary(dplyr)\n\n\n# Load PUMS data (same as in slides)\npums &lt;- open_dataset(here::here(\"data\", \"PUMS\", \"person\")) |&gt; collect()\nsetDT(pums)\n\n# Add age groups variable for exercises\npums[, age_groups := fcase(AGEP &lt; 18, \"Under 18\", AGEP &lt; 65, \"18-64\", default = \"65+\")]"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#demo",
    "href": "materials/activities/02-practice-datatable.html#demo",
    "title": "data.table",
    "section": "Demo",
    "text": "Demo\n\n# Select columns (j)\npums[, .(AGEP, SEX, ST)]\n\n# Filter rows (i)\npums[year == 2021 & location == \"ak\"]\n\n# Summarize by groups (by)\npums[, .(total_pop = sum(PWGTP)), by = ST]\n\n# Add new columns with :=\npums[, total_pop := sum(PWGTP), by = ST]\npums[, age_decade := floor(AGEP / 10) * 10]\n\n# Chain operations\npums[year == 2021][, .(avg_age = mean(AGEP)), by = ST][order(-avg_age)]"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn",
    "href": "materials/activities/02-practice-datatable.html#your-turn",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\nTry these exercises with the PUMS dataset:\n\nFind the unique values of the ST variable: use data.table syntax or dtplyr syntax to find the unique values of the ST variable.\n\n\n# Your code here"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn-1",
    "href": "materials/activities/02-practice-datatable.html#your-turn-1",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\n\nBasic filtering and grouping: Calculate total population by age_groups for both Alaska and California across years.\n\n\n# Your code here"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn-2",
    "href": "materials/activities/02-practice-datatable.html#your-turn-2",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\n\nPopulation comparison: Compare total population across all states for 2021\n\n\n# Your code here"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn-3",
    "href": "materials/activities/02-practice-datatable.html#your-turn-3",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\n\nIncome analysis: Find the median personal income (PINCP) by age group across all years.\n\n\n# Your code here"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn-4",
    "href": "materials/activities/02-practice-datatable.html#your-turn-4",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\n\nChaining operations: Find the state with the highest average age in 2022, sorted from oldest to youngest\n\n\n# Your code here"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn-5",
    "href": "materials/activities/02-practice-datatable.html#your-turn-5",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\n\nCreating new variables: Add a variable for income brackets (PINCP) and calculate employment rates (ESR) by bracket\n\n\n# Hint: Use PINCP for income, ESR for employment status\n# Your code here"
  },
  {
    "objectID": "materials/activities/02-practice-datatable.html#your-turn-6",
    "href": "materials/activities/02-practice-datatable.html#your-turn-6",
    "title": "data.table",
    "section": "Your Turn",
    "text": "Your Turn\n\nRolling Joins (extra challenging): Using the variables produced in number 6, join with the following data using the roll parameter to create a new variable called col_adjustment.\n\n\ncol_adjustments &lt;- data.table(\n  state_code = c(1, 2, 3, 4, 5, 6, 7, 8, 9),  # WV, WI, AL, AZ, AR, WY, WA, CA, AK\n  state_name = c(\n    \"West Virginia\", \"Wisconsin\", \"Alabama\", \"Arizona\", \"Arkansas\", \n    \"Wyoming\", \"Washington\", \"California\", \"Alaska\"),\n  col_factor = c(0.82, 0.88, 0.85, 0.92, 0.83, 0.89, 1.08, 1.25, 1.15)\n)\nsetkey(col_adjustments, state_code)\n\n# Hint try both roll = -Inf and roll = +Inf and see which one makes sense for this scenario\n# Your code here"
  },
  {
    "objectID": "materials/slides/05-PUMS-dataset.html#about-the-data",
    "href": "materials/slides/05-PUMS-dataset.html#about-the-data",
    "title": "Introduction to PUMS",
    "section": "About the data",
    "text": "About the data\n\nCollected by the United States Census Bureau as part of the American Community Survey\nDisclosure protection ‚Äî introduces noise to make it impossible to identify specific people or households\nCovers: 2005‚Äì2022 using the 1-year estimates (sans 2020; COVID)\nSplit into person and household\n\ncolumns: person: 230, household: 188\nrows: person: 53M, household: 25M"
  },
  {
    "objectID": "materials/slides/05-PUMS-dataset.html#a-few-example-variables",
    "href": "materials/slides/05-PUMS-dataset.html#a-few-example-variables",
    "title": "Introduction to PUMS",
    "section": "A few example variables",
    "text": "A few example variables\n\nPerson\n\nLanguage spoken at home (LANP)\nTravel time to work (JWMNP)\n\nHousehold\n\nAccess to internat (ACCESS)\nMonthly rent (RNTP)\n\nWeights üòµ‚Äçüí´\n\nPWGTP and WGTP for weights"
  },
  {
    "objectID": "materials/slides/05-PUMS-dataset.html#format-of-the-data",
    "href": "materials/slides/05-PUMS-dataset.html#format-of-the-data",
    "title": "Introduction to PUMS",
    "section": "Format of the data",
    "text": "Format of the data\n\nReleased and available as CSV files (~90GB)\nUses survey-style coding\n\n\nFor this workshop:\n\nRecoded the dataset\nSaved as parquet (~12GB) partitioned by year and state\n\n\nsurvey-style coding is where categorical variables will be given a number and there is a separate look up table for the values. Additionally, there are frequently sentinel values that mean missing or ‚Äú99 and greater‚Äù\nWe have pulled the key into the actual data so you don‚Äôt need to do the lookups and also converted numeric columns into integers, floats, etc. where appropriate."
  },
  {
    "objectID": "materials/slides/05-PUMS-dataset.html#can-i-analyze-all-of-pums",
    "href": "materials/slides/05-PUMS-dataset.html#can-i-analyze-all-of-pums",
    "title": "Introduction to PUMS",
    "section": "Can I analyze all of PUMS?",
    "text": "Can I analyze all of PUMS?\n\nMost analysis of PUMS data starts with subsetting the data. Either by state (or even smaller) or year and often both.\n\n\nBut with the tools we learn about in this workshop, we actually can analyze the whole dataset."
  },
  {
    "objectID": "materials/slides/05-PUMS-dataset.html#caveat",
    "href": "materials/slides/05-PUMS-dataset.html#caveat",
    "title": "Introduction to PUMS",
    "section": "Caveat",
    "text": "Caveat\n\nThough we have not purposefully altered this data, this data should not be relied on to be a perfect or even possibly accurate representation of the official PUMS dataset."
  },
  {
    "objectID": "materials/slides/03-arrow.html#section-overview",
    "href": "materials/slides/03-arrow.html#section-overview",
    "title": "parquet, arrow, duckdb",
    "section": "Section Overview",
    "text": "Section Overview\n\nIntroduction to Column-Oriented Data Storage \nDeep Dive into Parquet \nWorking with Arrow in R \nQuerying Parquet with Different Engines \nArrow Datasets for Larger-than-Memory Operations \nPartitioning Strategies \nHands-on Workshop: Analysis with PUMS Data"
  },
  {
    "objectID": "materials/slides/03-arrow.html#why-should-i-care-about-data-storage",
    "href": "materials/slides/03-arrow.html#why-should-i-care-about-data-storage",
    "title": "parquet, arrow, duckdb",
    "section": "Why should I care about data storage?",
    "text": "Why should I care about data storage?\n\nData has to be represented somewhere, both during analysis and when storing.\n\n\nThe shape and characteristics of this representation has a huge impact on performance.\n\n\nWhat if you could speed up a key part of your analysis by 30x and reduce your storage by 10x?"
  },
  {
    "objectID": "materials/slides/03-arrow.html#row-vs.-column-oriented-storage",
    "href": "materials/slides/03-arrow.html#row-vs.-column-oriented-storage",
    "title": "parquet, arrow, duckdb",
    "section": "Row vs.¬†Column-Oriented Storage",
    "text": "Row vs.¬†Column-Oriented Storage\n\n\nRow-oriented\n|ID|Name |Age|City    |\n|--|-----|---|--------|\n|1 |Alice|25 |New York|\n|2 |Bob  |30 |Boston  |\n|3 |Carol|45 |Chicago |\n\nEfficient for single record access\nEfficient for appending\n\n\n\nColumn-oriented\nID:    [1, 2, 3]\nName:  [Alice, Bob, Carol]\nAge:   [25, 30, 45]\nCity:  [New York, Boston, Chicago]\n\nEfficient for analytics\nBetter compression\n\n\n\n\nRow oriented formats are super familiar: CSVs as well as many databases\nBut Column-orientation isn‚Äôt something that is new and cutting edge. In fact, every single one of you use a system that stores data this way: R data frames(!)"
  },
  {
    "objectID": "materials/slides/03-arrow.html#why-column-oriented-storage",
    "href": "materials/slides/03-arrow.html#why-column-oriented-storage",
    "title": "parquet, arrow, duckdb",
    "section": "Why Column-Oriented Storage?",
    "text": "Why Column-Oriented Storage?\n\nAnalytics typically access a subset of columns\n\n‚ÄúWhat is the average age by city?‚Äù\nOnly needs [Age, City] columns\n\nBenefits:\n\nOnly read needed columns from disk\nSimilar data types stored together\nBetter compression ratios\n\n\n\nCompression: this is because like-types are stored with like, so you get more frequent patterns ‚Äî the core of compression. But you also can use encodings like dictionary encodings very efficiently."
  },
  {
    "objectID": "materials/slides/03-arrow.html#column-oriented-data-is-great",
    "href": "materials/slides/03-arrow.html#column-oriented-data-is-great",
    "title": "parquet, arrow, duckdb",
    "section": "Column-Oriented Data is great",
    "text": "Column-Oriented Data is great\n\nAnd you use column-oriented dataframes already!\n\n\n‚Ä¶ but still storing my data in a fundamentally row-oriented way.\n\n\nThis isn‚Äôt so bad if you‚Äôre only talking about a small amount of data, transposing a few columns for a few rows is no big deal. But as data gets larger, or if you have to do this frequently, this process of transposing (AKA serialization) hurts."
  },
  {
    "objectID": "materials/slides/03-arrow.html#the-interconnection-problem",
    "href": "materials/slides/03-arrow.html#the-interconnection-problem",
    "title": "parquet, arrow, duckdb",
    "section": "The interconnection problem",
    "text": "The interconnection problem\n\n\nMany of these were operating in essentially column-oriented ways ‚Äî but to transfer data ended up writting into row-oriented data structures, then read them back in to something that was column-oriented.\nMoving data between representations is hard - Different formats, requirements, and limitations - Compatibility issues - Serialization is a huge bottleneck"
  },
  {
    "objectID": "materials/slides/03-arrow.html#the-interconnection-problem-1",
    "href": "materials/slides/03-arrow.html#the-interconnection-problem-1",
    "title": "parquet, arrow, duckdb",
    "section": "The interconnection problem",
    "text": "The interconnection problem"
  },
  {
    "objectID": "materials/slides/03-arrow.html#what-is-apache-arrow",
    "href": "materials/slides/03-arrow.html#what-is-apache-arrow",
    "title": "parquet, arrow, duckdb",
    "section": "What is Apache Arrow?",
    "text": "What is Apache Arrow?\n\n\nCross-language development platform for in-memory data\n\nConsistent in-memory columnar data format\nLanguage-independent\nZero-copy reads\n\nBenefits:\n\nSeamless data interchange between systems\nFast analytical processing\nEfficient memory usage"
  },
  {
    "objectID": "materials/slides/03-arrow.html#what-is-apache-parquet",
    "href": "materials/slides/03-arrow.html#what-is-apache-parquet",
    "title": "parquet, arrow, duckdb",
    "section": "What is Apache Parquet?",
    "text": "What is Apache Parquet?\n\n\nOpen-source columnar storage format\n\nCreated by Twitter and Cloudera in 2013\nPart of the Apache Software Foundation\n\nFeatures:\n\nColumnar storage\nEfficient compression\nExplicit schema\nStatistical metadata"
  },
  {
    "objectID": "materials/slides/03-arrow.html#reading-a-file",
    "href": "materials/slides/03-arrow.html#reading-a-file",
    "title": "parquet, arrow, duckdb",
    "section": "Reading a File",
    "text": "Reading a File\nAs a CSV file\n\nsystem.time({\n  df &lt;- read.csv(\"CA_person_2021.csv\")\n})\n\n\n   user  system elapsed \n 14.449   0.445  15.037 \n\n\nDescribe the CSV\nThis CSV is 708 MB, I‚Äôm reading this in on my MacBook Pro, your times will vary! We can use arrow or data.tables‚Äôs CSV reader and it‚Äôs faster (1.85 sec and 1.61 sec respectively). And if we read to an arrow table it‚Äôs even faster: 0.51 seconds"
  },
  {
    "objectID": "materials/slides/03-arrow.html#reading-a-file-1",
    "href": "materials/slides/03-arrow.html#reading-a-file-1",
    "title": "parquet, arrow, duckdb",
    "section": "Reading a File",
    "text": "Reading a File\nAs a Parquet file\n\nlibrary(arrow)\noptions(arrow.use_altrep = FALSE)\n\nsystem.time({\n  df &lt;- read_parquet(\"CA_person_2021.parquet\")\n})\n\n\n   user  system elapsed \n  1.017   0.207   0.568 \n\n\nThe parquet file is 62 MB\nIt‚Äôs even faster with altrep (0.186 s), but that‚Äôs cheating! Also, if we read into an arrow table rather than a dataframe: 0.1 second"
  },
  {
    "objectID": "materials/slides/03-arrow.html#what-is-parquet",
    "href": "materials/slides/03-arrow.html#what-is-parquet",
    "title": "parquet, arrow, duckdb",
    "section": "What is Parquet?",
    "text": "What is Parquet?\n\nSchema metadata\n\nSelf-describing format\nPreserves column types\nType-safe data interchange\n\nEncodings\n\nDictionary ‚Äî Particularly effective for categorical data\nRun-length encoding - Efficient storage of sequential repeated values\n\nAdvanced compression\n\nColumn-specific compression algorithms\nBoth dictionary and value compression"
  },
  {
    "objectID": "materials/slides/03-arrow.html#exercise",
    "href": "materials/slides/03-arrow.html#exercise",
    "title": "parquet, arrow, duckdb",
    "section": "Exercise",
    "text": "Exercise\n\ndata &lt;- tibble::tibble(\n  integers = 1:10,\n  doubles = as.numeric(1:10),\n  strings = sprintf(\"%02d\", 1:10)\n)\n\nwrite.csv(data, \"numeric_base.csv\", row.names = FALSE)\nwrite_csv_arrow(data, \"numeric_arrow.csv\")\nwrite_parquet(data, \"numeric.parquet\")\n\ndf_csv &lt;- read.csv(\"numeric_base.csv\")\ndf_csv_arrow &lt;- read_csv_arrow(\"numeric_arrow.csv\")\ndf_parquet &lt;- read_parquet(\"numeric.parquet\")\n\n\nAre there any differences?"
  },
  {
    "objectID": "materials/slides/03-arrow.html#exercise-1",
    "href": "materials/slides/03-arrow.html#exercise-1",
    "title": "parquet, arrow, duckdb",
    "section": "Exercise",
    "text": "Exercise\n\n\n&gt; df_csv_arrow\n# A tibble: 10 √ó 3\n   integers doubles strings\n      &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1        1       1       1\n 2        2       2       2\n 3        3       3       3\n 4        4       4       4\n 5        5       5       5\n 6        6       6       6\n 7        7       7       7\n 8        8       8       8\n 9        9       9       9\n10       10      10      10\n\n&gt; df_parquet\n# A tibble: 10 √ó 3\n   integers doubles strings\n      &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;  \n 1        1       1 01     \n 2        2       2 02     \n 3        3       3 03     \n 4        4       4 04     \n 5        5       5 05     \n 6        6       6 06     \n 7        7       7 07     \n 8        8       8 08     \n 9        9       9 09     \n10       10      10 10"
  },
  {
    "objectID": "materials/slides/03-arrow.html#exercise-2",
    "href": "materials/slides/03-arrow.html#exercise-2",
    "title": "parquet, arrow, duckdb",
    "section": "Exercise",
    "text": "Exercise\n\n\n&gt; df_csv_arrow\n# A tibble: 10 √ó 3\n   integers doubles strings\n      &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n 1        1       1       1\n 2        2       2       2\n 3        3       3       3\n 4        4       4       4\n 5        5       5       5\n 6        6       6       6\n 7        7       7       7\n 8        8       8       8\n 9        9       9       9\n10       10      10      10\n\n&gt; df_parquet\n# A tibble: 10 √ó 3\n   integers doubles strings\n      &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;  \n 1        1       1 01     \n 2        2       2 02     \n 3        3       3 03     \n 4        4       4 04     \n 5        5       5 05     \n 6        6       6 06     \n 7        7       7 07     \n 8        8       8 08     \n 9        9       9 09     \n10       10      10 10"
  },
  {
    "objectID": "materials/slides/03-arrow.html#inside-a-parquet-file",
    "href": "materials/slides/03-arrow.html#inside-a-parquet-file",
    "title": "parquet, arrow, duckdb",
    "section": "Inside a Parquet File",
    "text": "Inside a Parquet File\n\n\n\nRow groups: Horizontal partitions of data\nColumn chunks: Columnar data within a row group\nPages: Small units of column chunk data\nFooter: Contains file metadata and schema"
  },
  {
    "objectID": "materials/slides/03-arrow.html#benchmarks-parquet-vs-csv",
    "href": "materials/slides/03-arrow.html#benchmarks-parquet-vs-csv",
    "title": "parquet, arrow, duckdb",
    "section": "Benchmarks: Parquet vs CSV",
    "text": "Benchmarks: Parquet vs CSV"
  },
  {
    "objectID": "materials/slides/03-arrow.html#benchmarks-parquet-vs-csv-1",
    "href": "materials/slides/03-arrow.html#benchmarks-parquet-vs-csv-1",
    "title": "parquet, arrow, duckdb",
    "section": "Benchmarks: Parquet vs CSV",
    "text": "Benchmarks: Parquet vs CSV"
  },
  {
    "objectID": "materials/slides/03-arrow.html#reading-efficiency-selecting-columns",
    "href": "materials/slides/03-arrow.html#reading-efficiency-selecting-columns",
    "title": "parquet, arrow, duckdb",
    "section": "Reading Efficiency: Selecting Columns",
    "text": "Reading Efficiency: Selecting Columns\n\nWith CSV:\n\nMust read entire file, even if you only need a few columns\nNo efficient way to skip columns during read\n\nWith Parquet:\n\nRead only needed columns from disk\nSignificant performance benefit for wide tables\n\n\n\n\nsystem.time({\n  df_subset &lt;- read_parquet(\n    \"CA_person_2021.parquet\", \n    col_select = c(\"PUMA\", \"COW\")\n  )\n})\n\n\n\n\n   user  system elapsed \n  0.027   0.003   0.031 \n\n   user  system elapsed \n  1.017   0.207   0.568"
  },
  {
    "objectID": "materials/slides/03-arrow.html#nanoparquet-vs.-arrow-reader",
    "href": "materials/slides/03-arrow.html#nanoparquet-vs.-arrow-reader",
    "title": "parquet, arrow, duckdb",
    "section": "nanoparquet vs.¬†arrow Reader",
    "text": "nanoparquet vs.¬†arrow Reader\n\nnanoparquet\n\nLightweight Parquet reader\nMinimal dependencies\nGood for embedding\n\narrow\n\nFull-featured reader\nSupport for datasets\nIntegration with Arrow ecosystem\nOptimized for analytics workloads"
  },
  {
    "objectID": "materials/slides/03-arrow.html#nanoparquet-vs.-arrow-reader-1",
    "href": "materials/slides/03-arrow.html#nanoparquet-vs.-arrow-reader-1",
    "title": "parquet, arrow, duckdb",
    "section": "nanoparquet vs.¬†arrow Reader",
    "text": "nanoparquet vs.¬†arrow Reader\n\nlibrary(arrow)\noptions(arrow.use_altrep = FALSE)\n\nsystem.time({\n  df &lt;- read_parquet(\"CA_person_2021.parquet\")\n})\n\n   user  system elapsed \n  1.017   0.207   0.568 \n\n\n\n\n\nlibrary(nanoparquet)\n\nsystem.time({\n  df &lt;- read_parquet(\"CA_person_2021.parquet\")\n})\n\n   user  system elapsed \n  0.709   0.099   0.894"
  },
  {
    "objectID": "materials/slides/03-arrow.html#parquet-tooling-ecosystem",
    "href": "materials/slides/03-arrow.html#parquet-tooling-ecosystem",
    "title": "parquet, arrow, duckdb",
    "section": "Parquet Tooling Ecosystem",
    "text": "Parquet Tooling Ecosystem\nLanguages with native Parquet support:\n\nR (via arrow)\nPython (via pyarrow, pandas)\nJava\nC++\nRust\nJavaScript\nGo"
  },
  {
    "objectID": "materials/slides/03-arrow.html#parquet-tooling-ecosystem-1",
    "href": "materials/slides/03-arrow.html#parquet-tooling-ecosystem-1",
    "title": "parquet, arrow, duckdb",
    "section": "Parquet Tooling Ecosystem",
    "text": "Parquet Tooling Ecosystem\nSystems with Parquet integration:\n\nApache Spark\nApache Hadoop\nApache Drill\nSnowflake\nAmazon Athena\nGoogle BigQuery\nDuckDB"
  },
  {
    "objectID": "materials/slides/03-arrow.html#introduction-to-the-arrow-package",
    "href": "materials/slides/03-arrow.html#introduction-to-the-arrow-package",
    "title": "parquet, arrow, duckdb",
    "section": "Introduction to the arrow Package",
    "text": "Introduction to the arrow Package\n\n# Install and load the Arrow package\ninstall.packages(\"arrow\")\nlibrary(arrow)\n\n# Check Arrow version and capabilities\narrow_info()\n\n\nThe arrow package provides:\n\nNative R interface to Apache Arrow\nTools for working with large datasets\nIntegration with dplyr for data manipulation\nReading/writing various file formats"
  },
  {
    "objectID": "materials/slides/03-arrow.html#reading-and-writing-parquet-files-revisited",
    "href": "materials/slides/03-arrow.html#reading-and-writing-parquet-files-revisited",
    "title": "parquet, arrow, duckdb",
    "section": "Reading and Writing Parquet files, revisited",
    "text": "Reading and Writing Parquet files, revisited\n\n# Read a Parquet file into R\ndata &lt;- read_parquet(\"CA_person_2021.parquet\")\n\n# Write an R data frame to Parquet\nwrite_parquet(data, \"CA_person_2021_new.parquet\")\n\n# Reading a subset of columns\ndf_subset &lt;- read_parquet(\n  \"CA_person_2021.parquet\", \n  col_select = c(\"PUMA\", \"COW\", \"AGEP\")\n)\n\n# Reading with a row filter (predicate pushdown)\ndf_filtered &lt;- open_dataset(\"CA_person_2021.parquet\") |&gt; \n  filter(AGEP &gt; 40) |&gt;\n  collect()"
  },
  {
    "objectID": "materials/slides/03-arrow.html#demo-using-dplyr-with-arrow",
    "href": "materials/slides/03-arrow.html#demo-using-dplyr-with-arrow",
    "title": "parquet, arrow, duckdb",
    "section": "Demo: Using dplyr with arrow",
    "text": "Demo: Using dplyr with arrow\n\n# Create an Arrow Table\ndf &lt;- read_parquet(\"CA_person_2021.parquet\", as_data_frame = FALSE)\n\n# Use dplyr verbs with arrow tables\ndf |&gt;\n  filter(AGEP &gt;= 16) |&gt;\n  summarize(\n    mean_commute_time = sum(JWMNP * PWGTP, na.rm = TRUE) /\n      sum(PWGTP),\n    count = n()\n  ) \n\n\nThe dataframe is backed by altrep, actually. But generally functions like any other dataframe."
  },
  {
    "objectID": "materials/slides/03-arrow.html#introduction-to-duckdb",
    "href": "materials/slides/03-arrow.html#introduction-to-duckdb",
    "title": "parquet, arrow, duckdb",
    "section": "Introduction to DuckDB",
    "text": "Introduction to DuckDB\n\n\nAnalytical SQL database system\n\nEmbedded database (like SQLite)\nColumn oriented\nIn-process query execution\n\nKey features:\n\nDirect Parquet querying\nVectorized query execution\nParallel processing\nZero-copy integration with arrow\n\n\n\nThe zero-copy integration with arrow is because DuckDB uses basically the same format for it‚Äôs own internal representation."
  },
  {
    "objectID": "materials/slides/03-arrow.html#duckdb",
    "href": "materials/slides/03-arrow.html#duckdb",
    "title": "parquet, arrow, duckdb",
    "section": "DuckDB",
    "text": "DuckDB\n\nlibrary(duckdb)\n\ncon &lt;- dbConnect(duckdb())\n\n# Register a Parquet file as a virtual table\ndbExecute(con, \"CREATE VIEW pums AS SELECT * \n                FROM read_parquet('CA_person_2021.parquet')\")\n\n# Run our query\ndbGetQuery(con, \"\n  SELECT SUM(JWMNP * PWGTP)/SUM(PWGTP) as avg_commute_time,\n         COUNT(*) as count\n  FROM pums\n  WHERE AGEP &gt;= 16\n\")\n\ndbDisconnect(con, shutdown = TRUE)"
  },
  {
    "objectID": "materials/slides/03-arrow.html#duckplyr",
    "href": "materials/slides/03-arrow.html#duckplyr",
    "title": "parquet, arrow, duckdb",
    "section": "duckplyr",
    "text": "duckplyr\n\nlibrary(duckplyr)\n\n# Read data with Arrow\npums_data &lt;- read_file_duckdb(\n  \"CA_person_2021.parquet\", \n  \"read_parquet\"\n)\n\n# Use duckplyr to optimize dplyr operations\npums_data |&gt;\n  filter(AGEP &gt;= 16) |&gt;\n  summarize(\n    mean_commute_time = sum(JWMNP * PWGTP, na.rm = TRUE) /\n      sum(PWGTP),\n    count = n()\n  ) |&gt;\n  collect()\n\n\nduckplyr is a drop-in replacement for dplyr, using duckdb as a backend"
  },
  {
    "objectID": "materials/slides/03-arrow.html#data.table",
    "href": "materials/slides/03-arrow.html#data.table",
    "title": "parquet, arrow, duckdb",
    "section": "data.table",
    "text": "data.table\n\nlibrary(arrow)\nlibrary(data.table)\n\n# Read Parquet file with Arrow\npums_data &lt;- read_parquet(\"CA_person_2021.parquet\")\n\n# Convert to data.table\npums_dt &lt;- as.data.table(pums_data)\n\n# data.table query\npums_dt[AGEP &gt;= 16,\n  .(avg_commute_time = sum(JWMNP * PWGTP, na.rm = TRUE) / sum(PWGTP), \n    count = .N)]"
  },
  {
    "objectID": "materials/slides/03-arrow.html#arrow-query-execution",
    "href": "materials/slides/03-arrow.html#arrow-query-execution",
    "title": "parquet, arrow, duckdb",
    "section": "Arrow Query Execution",
    "text": "Arrow Query Execution\n\n# Create an Arrow Dataset\npums_ds &lt;- open_dataset(\"pums_dataset_dir/\")\n\n# Execute query with Arrow\nresult &lt;- pums_ds |&gt;\n  filter(AGEP &gt;= 16) |&gt;\n  group_by(ST) |&gt;\n  summarize(\n    avg_commute_time = mean(JWMNP, na.rm = TRUE),\n    count = n()\n  ) |&gt;\n  arrange(desc(avg_commute_time)) |&gt;\n  collect()"
  },
  {
    "objectID": "materials/slides/03-arrow.html#demo-seamless-integration-arrow-duckdb",
    "href": "materials/slides/03-arrow.html#demo-seamless-integration-arrow-duckdb",
    "title": "parquet, arrow, duckdb",
    "section": "Demo: Seamless Integration Arrow ‚ÜîÔ∏é DuckDB",
    "text": "Demo: Seamless Integration Arrow ‚ÜîÔ∏é DuckDB\n\ndf &lt;- read_parquet(\"CA_person_2021.parquet\")\n\n# Use dplyr verbs with arrow tables\ndf |&gt;\n  filter(AGEP &gt;= 16) |&gt;\n  to_duckdb() |&gt;\n  summarize(\n    mean_commute_time = sum(JWMNP * PWGTP, na.rm = TRUE) /\n      sum(PWGTP),\n    count = n()\n  )"
  },
  {
    "objectID": "materials/slides/03-arrow.html#understanding-arrow-datasets-vs.-tables",
    "href": "materials/slides/03-arrow.html#understanding-arrow-datasets-vs.-tables",
    "title": "parquet, arrow, duckdb",
    "section": "Understanding Arrow Datasets vs.¬†Tables",
    "text": "Understanding Arrow Datasets vs.¬†Tables\n\n\nArrow Table\n\nIn-memory data structure\nMust fit in RAM\nFast operations\nSimilar to base data frames\nGood for single file data\n\n\nArrow Dataset\n\nCollection of files\nLazily evaluated\nLarger-than-memory capable\nDistributed execution\nSupports partitioning"
  },
  {
    "objectID": "materials/slides/03-arrow.html#demo-opening-and-querying-multi-file-datasets",
    "href": "materials/slides/03-arrow.html#demo-opening-and-querying-multi-file-datasets",
    "title": "parquet, arrow, duckdb",
    "section": "Demo: Opening and Querying Multi-file Datasets",
    "text": "Demo: Opening and Querying Multi-file Datasets\n\npums_ds &lt;- open_dataset(\"data/person\")\n\n# Examine the dataset, list files\nprint(pums_ds)\nhead(pums_ds$files)\n\n# Query execution with lazy evaluation\npums_ds |&gt;\n  filter(AGEP &gt;= 16) |&gt;\n  group_by(year, ST) |&gt;\n  summarize(\n    mean_commute_time = sum(JWMNP * PWGTP, na.rm = TRUE) /\n      sum(PWGTP),\n    count = n()\n  ) |&gt;\n  collect()"
  },
  {
    "objectID": "materials/slides/03-arrow.html#lazy-evaluation-and-query-optimization",
    "href": "materials/slides/03-arrow.html#lazy-evaluation-and-query-optimization",
    "title": "parquet, arrow, duckdb",
    "section": "Lazy Evaluation and Query Optimization",
    "text": "Lazy Evaluation and Query Optimization\n\nLazy evaluation workflow:\n\nDefine operations (filter, group, summarize)\nArrow builds an execution plan\nOptimizes the plan (predicate pushdown, etc.)\nOnly reads necessary data from disk\nExecutes when collect() is called\n\nBenefits:\n\nMinimizes memory usage\nReduces I/O operations\nLeverages Arrow‚Äôs native compute functions"
  },
  {
    "objectID": "materials/slides/03-arrow.html#working-with-datasets-on-s3",
    "href": "materials/slides/03-arrow.html#working-with-datasets-on-s3",
    "title": "parquet, arrow, duckdb",
    "section": "Working with Datasets on S3",
    "text": "Working with Datasets on S3\narrow can work with data and datasets in cloud storage. This can be a good option if you don‚Äôt have access to a formal DBMS.\n\nEasy to store\narrow efficiently uses metadata to read only what is necessary\n\n\nI know, I know ‚Äî this workshop is about local files. But I couldn‚Äôt help myself"
  },
  {
    "objectID": "materials/slides/03-arrow.html#demo-working-with-datasets-on-s3",
    "href": "materials/slides/03-arrow.html#demo-working-with-datasets-on-s3",
    "title": "parquet, arrow, duckdb",
    "section": "Demo: Working with Datasets on S3",
    "text": "Demo: Working with Datasets on S3\n\npums_ds &lt;- open_dataset(\"s3://scaling-arrow-pums/person/\")\n\n# Query execution with lazy evaluation\npums_ds |&gt;\n  filter(year == 2021, location == \"ca\", AGEP &gt;= 16) |&gt;\n  group_by(year, ST) |&gt;\n  summarize(\n    mean_commute_time = sum(JWMNP * PWGTP, na.rm = TRUE) /\n      sum(PWGTP),\n    count = n()\n  ) |&gt;\n  collect()\n\n\nTalk about partitioning helping, etc"
  },
  {
    "objectID": "materials/slides/03-arrow.html#demo-sipping-data",
    "href": "materials/slides/03-arrow.html#demo-sipping-data",
    "title": "parquet, arrow, duckdb",
    "section": "Demo: Sipping data",
    "text": "Demo: Sipping data\n\npums_ds &lt;- open_dataset(\"s3://scaling-arrow-pums/person/\")\n\n# Query execution with lazy evaluation\npums_ds |&gt;\n  filter(AGEP &gt;= 97) |&gt;\n  collect()\n\n\nSys.getpid() nettop -p X"
  },
  {
    "objectID": "materials/slides/03-arrow.html#what-is-partitioning",
    "href": "materials/slides/03-arrow.html#what-is-partitioning",
    "title": "parquet, arrow, duckdb",
    "section": "What is Partitioning?",
    "text": "What is Partitioning?\n\nDividing data into logical segments\n\nStored in separate files/directories\nBased on one or more column values\nEnables efficient filtering\n\nBenefits:\n\nFaster queries that filter on partition columns\nImproved parallel processing\nEasier management of large datasets"
  },
  {
    "objectID": "materials/slides/03-arrow.html#hive-vs.-non-hive-partitioning",
    "href": "materials/slides/03-arrow.html#hive-vs.-non-hive-partitioning",
    "title": "parquet, arrow, duckdb",
    "section": "Hive vs.¬†Non-Hive Partitioning",
    "text": "Hive vs.¬†Non-Hive Partitioning\n\n\nHive Partitioning\n\nDirectory format: column=value\nExample:\nperson/\n‚îú‚îÄ‚îÄ year=2018/\n‚îÇ   ‚îú‚îÄ‚îÄ state=NY/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ data.parquet\n‚îÇ   ‚îî‚îÄ‚îÄ state=CA/\n‚îÇ       ‚îî‚îÄ‚îÄ data.parquet\n‚îú‚îÄ‚îÄ year=2019/\n‚îÇ   ‚îú‚îÄ‚îÄ ...\nSelf-describing structure\nStandard in big data ecosystem\n\n\nNon-Hive Partitioning\n\nDirectory format: value\nExample:\nperson/\n‚îú‚îÄ‚îÄ 2018/\n‚îÇ   ‚îú‚îÄ‚îÄ NY/\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ data.parquet\n‚îÇ   ‚îî‚îÄ‚îÄ CA/\n‚îÇ       ‚îî‚îÄ‚îÄ data.parquet\n‚îú‚îÄ‚îÄ 2019/\n‚îÇ   ‚îú‚îÄ‚îÄ ...\nRequires column naming\nLess verbose directory names"
  },
  {
    "objectID": "materials/slides/03-arrow.html#effective-partitioning-strategies",
    "href": "materials/slides/03-arrow.html#effective-partitioning-strategies",
    "title": "parquet, arrow, duckdb",
    "section": "Effective Partitioning Strategies",
    "text": "Effective Partitioning Strategies\n\nChoose partition columns wisely:\n\nLow to medium cardinality\nCommonly used in filters\nBalanced data distribution\n\nCommon partition dimensions:\n\nTime (year, month, day)\nGeography (country, state, region)\nCategory (product type, department)\nSource (system, sensor)"
  },
  {
    "objectID": "materials/slides/03-arrow.html#partitioning-in-practice-writing-datasets",
    "href": "materials/slides/03-arrow.html#partitioning-in-practice-writing-datasets",
    "title": "parquet, arrow, duckdb",
    "section": "Partitioning in Practice: Writing Datasets",
    "text": "Partitioning in Practice: Writing Datasets\n\nca_pums_data &lt;- read_parquet(\"CA_person_2021.parquet\")\n\nca_pums_data |&gt;\n  mutate(\n    age_group = case_when(\n      AGEP &lt; 18 ~ \"under_18\",\n      AGEP &lt; 30 ~ \"18_29\",\n      AGEP &lt; 45 ~ \"30_44\",\n      AGEP &lt; 65 ~ \"45_64\",\n      TRUE ~ \"65_plus\"\n    )\n  ) |&gt;\n  group_by(ST, age_group) |&gt;\n  write_dataset(\n    path = \"ca_pums_by_age/\"\n  )"
  },
  {
    "objectID": "materials/slides/03-arrow.html#demo-repartitioning-the-whole-dataset",
    "href": "materials/slides/03-arrow.html#demo-repartitioning-the-whole-dataset",
    "title": "parquet, arrow, duckdb",
    "section": "Demo: repartitioning the whole dataset",
    "text": "Demo: repartitioning the whole dataset\n\npums_data &lt;- open_dataset(\"data/person\")\n\npums_data |&gt;\n  mutate(\n    age_group = case_when(\n      AGEP &lt; 18 ~ \"under_18\",\n      AGEP &lt; 30 ~ \"18_29\",\n      AGEP &lt; 45 ~ \"30_44\",\n      AGEP &lt; 65 ~ \"45_64\",\n      TRUE ~ \"65_plus\"\n    )\n  ) |&gt;\n  group_by(year, ST, age_group) |&gt;\n  write_dataset(\n    path = \"pums_by_age/\"\n  )"
  },
  {
    "objectID": "materials/slides/03-arrow.html#best-practices-for-partition-design",
    "href": "materials/slides/03-arrow.html#best-practices-for-partition-design",
    "title": "parquet, arrow, duckdb",
    "section": "Best Practices for Partition Design",
    "text": "Best Practices for Partition Design\n\nAvoid over-partitioning:\n\nToo many small files = poor performance\nTarget file size: 20MB‚Äì2GB\nAvoid high-cardinality columns (e.g., user_id)\n\nConsider query patterns:\n\nPartition by commonly filtered columns\nBalance between read speed and write complexity\n\nNested partitioning considerations:\n\nOrder from highest to lowest selectivity\nLimit partition depth (2-3 levels typically sufficient)"
  },
  {
    "objectID": "materials/slides/03-arrow.html#partitioning-performance-impact",
    "href": "materials/slides/03-arrow.html#partitioning-performance-impact",
    "title": "parquet, arrow, duckdb",
    "section": "Partitioning Performance Impact",
    "text": "Partitioning Performance Impact\n\n\nopen_dataset(\"&lt;path/to/data&gt;\") |&gt;\n  filter(year &gt;= 2018) |&gt;\n  summarise(\n    mean_commute = sum(JWMNP * PWGTP, na.rm = TRUE) / sum(PWGTP)\n  ) |&gt;\n  collect()"
  },
  {
    "objectID": "materials/slides/03-arrow.html#conclusion",
    "href": "materials/slides/03-arrow.html#conclusion",
    "title": "parquet, arrow, duckdb",
    "section": "Conclusion",
    "text": "Conclusion\n\nColumn-oriented storage formats like Parquet provide massive performance advantages for analytical workloads (30x speed, 10x smaller files)\nApache Arrow enables seamless data interchange between systems without costly serialization/deserialization\nMultiple query engines (arrow, DuckDB, data.table) offer flexibility depending on your analysis needs, all using modern formats like Parquet\nPartitioning strategies help manage large datasets effectively when working with data too big for memory"
  },
  {
    "objectID": "materials/slides/03-arrow.html#conclusion-1",
    "href": "materials/slides/03-arrow.html#conclusion-1",
    "title": "parquet, arrow, duckdb",
    "section": "Conclusion",
    "text": "Conclusion\nResources:\n\nWorkshop materials: GitHub Repository\nArrow documentation: arrow.apache.org/docs/r\nParquet: parquet.apache.org\nDuckDB: duckdb.org\nBook: Scaling up with Arrow and R\n\nQuestions?"
  },
  {
    "objectID": "bio.html",
    "href": "bio.html",
    "title": "Short Course Presenters",
    "section": "",
    "text": "Dr.¬†Kelly Bodwin is an educator with over a decade of experience of teaching statistics and data science with R. She has co-authored multiple R packages, including flair and tidyclust, and she is currently a consultant on an NSF Grant building infrastructure for the data.table package. Her published applied research frequently involves manipulating large, in-memory data. Examples include: performing large matrix computations on high-dimensional GWAS (genome-wide association studies) data; constructing temporal social networks at hundreds of time checkpoints for organizational membership data; and summarizing biodiversity metrics grouped over exhaustive permutations of taxa level organism counts and experimental conditions. Above all, Dr.¬†Bodwin‚Äôs educational goal is to lower barriers to entry for beginner and intermediate R users to benefit from modern tools and enable more efficient and effective data workflows.\n\n\n\nDr.¬†Tyson Barrett is a researcher and an applied statistician at Highmark Health and Utah State University. He has over 15 years of R package development and programming experience, including maintaining data.table (with over 600,000 monthly downloads) and 3 other published R packages. He is currently a consultant on an NSF Grant building infrastructure for the data.table package. In his research work, he regularly works with large datasets with millions of rows and hundreds of columns. He and his team use data.table, arrow, and duckDB daily to manage and analyze their data to efficiently and quickly communicate insights with stakeholders.\n\n\n\nDr.¬†Jonathan Keane is an engineering leader at Posit, PBC with a background in data science and social science. They have been building data tooling for 15 years, including both R and Python data tools for scientific and data science computing. They are a member of the PMC for Apache Arrow, a maintainer of the Apache Arrow package, and the author of dittodb. They have also worked as a data scientist in a number of different industries (identify verification and fraud, market research, call centers, and social justice among other areas) using a wide range of tools to analyze, model, and use data at large enterprise scales. On top of building data tooling, they have a passion for teaching data scientists and others how to use data and tools to do their work and inform their decisions."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "dev/Outline_draft.html",
    "href": "dev/Outline_draft.html",
    "title": "Course Outline",
    "section": "",
    "text": "How big is my data? Long, wide or both?\nHow big is my analysis? Big because many groups? Big because looping? Big because matrix computation?\nHow often will I repeat my analysis? By myself as I refine it? In production?\nHow to choose a tool? -&gt; You have one dataset. It can read into R, but tasks are slow:\ngrouping and summarizing, esp over a variable with many cats\nmapping through a column, e.g to string process or custom function\ncomputing lags, sliders, etc.\nmaking many new columns\n\nWhat‚Äôs my slowdown? -&gt; profvis\nPersona: Survey research\n-&gt; You have one dataset. It is too large to read into R.\nPersona: Biological genetic data\nWhat‚Äôs my slowdown? -&gt; read a few lines, develop your pipeline, profvis\n-&gt; You have many datasets. At least one is too large to read into R. Joining and subsetting is slow.\nPersona: Customer data\n\nWhat makes some code faster than others?\nEfficiency of pipeline: filter before mutate.\nEfficiency of algorithm: think matrix order\nEfficiency of memory handling: careful C allocations\nEfficiency of interpreting or compiling\nEfficiency of data storage structure\nSmart saving of intermediate objects.\n\nx: data size y: number of repeated operations\n1,1: any 1,2: data table. [write more efficient code] 2,1: parquet & arrow [use better storage formats] 2,2: duckdb & arrow [run in SQL not R]\nhigher x -&gt; cloud database higher y -&gt; bigger machine/parallelize across machines/whatever\n\n\n\n\n\n\nsmall: &lt; 1000 or something, everything is split second\nmedium: 100000 or so, and/or many categories, can read into R but analysis is slow\nlarge: parquet can store on local machine\nmassive: too big for local machine\nQuestions for Tyson/Jon: - Easy way to convert csv to parquet w/o reading into R?\n- Column and row size; handled differently in R? In parquet? In a db?\nTitle of course Storing, Importing, Managing, and Analyzing Large Data Locally with R Instructor 1 Kelly Bodwin Instructor 1 Email kbodwin@calpoly.edu Instructor 2 Tyson Barrett Instructor 2 Email tyson.barrett@usu.edu Instructor 3 Jonathan Keane Instructor 3 Email jkeane@gmail.com Length of Course\nFull-day (7.5 contact hours) Course Description It is increasingly common in academic and professional settings to encounter datasets large enough to exceed the capabilities of standard data processing tools, yet small enough to be stored on local computers. Recent articles even claim that ‚Äúthe era of big data is over‚Äù and that data analysts and researchers should ‚Äúthink small, develop locally, ship joyfully.‚Äù Such ‚Äúmedium‚Äù dataests are instrumental in measuring, tracking, and recording a wide array of phenomena across disciplines such as human behavior, animal studies, geology, economics, and astronomy. In this workshop, we will present modern techniques for handling large local data in R using a tidy data pipeline, encompassing stages from data storage and importing to cleaning, analysis, and exporting data and analyses. Specifically, we will teach a combination of tools from the data.table, arrow, and duckDB packages, with a focus on parquet data files for storage and transfer. By the end of the workshop, participants will understand how to integrate these tools to establish a legible, reproducible, efficient, and high-performance workflow.\nCourse Outline The following outline shows our planned approach to managing and analyzing large data locally in R. Our target audience are individuals in academic or professional data analysis positions, who work regularly with datasets that are manageable in terms of local storage but pose significant challenges in processing and cleaning due to their size and complexity.\nUnit 1: Identifying slowdowns in your local data process (Bodwin; 1 hour)\n1.1 Finding the problem:\n- User-friendly code timing with tictoc - Comparing runtimes with atime - Code profiling with profvis\n1.2 Categories of bottlenecks - Common scenarios for repeated runs of code sections - Speed impact from order-of-operations in data wrangling - Fast vs.¬†slow types of dataset operations in R\n1.3 Activity: Code-along demo - Walkthrough of common data structures and tasks that could benefit from modern large-data tools\nUnit 2: In-Memory data wrangling with data.table (Barrett; 2 hours)\n2.1 Introduction - Basic syntax and structure of data.table - Speed comparison for common simple data tasks - High-level, user-friendly intuition for data.table‚Äôs ‚Äúunder the hood‚Äù parallel processing and C optimization\n2.2 Data wrangling tools - Filtering, summarizing, grouping, and mutating data - Sophisticated data processing with the set* functions.\n2.3 Activity: Code-Along - Real-data examples of data.table use for processing and analyzing data.\n2.4 Reference semantics - Speed and memory gains from modify-by-reference - Effects and side-effects of modify-by-reference - data.table syntax for fast no-copy data transformation\n2.5 Helper packages - Brief highlight of dtplyr and tidyfast as syntactical wrappers to data.table - Storing and reading data.table objects with parquet.\n2.6 Activity: Case Study - Learners work through a guided but incomplete real-data analysis.\nUnit 3: Storing, Reading, and Converting data with arrow, parquet, and duckdb (Keane 2 hours, Bodwin/Barrett 1 hour)\n3.1 Introduction to Arrow and Parquet - Intro to history and development of Arrow - Basic Arrow infrastructure and syntax - Discussion of the interchange problem - Using arrow reader and nanoparquet for efficient dataset storage and input. - Discussion of the Parquet structure, including column orientation and its benefits\n3.2 Activity: Code-Along - Data analysis with Arrow.\n3.3 Introduction to DuckDB - Introduction to duckDB and the local database model. - Basic duckDB syntax. - Data processing and analysis in duckDB - Helper packages such as duckplyr. - Working with duckDB and parquet files simultaneously.\n3.4 Activity: Code-Along - Data analysis with duckDB.\n3.5 Comparison of tools - Similarities and trade-offs of arrow, duckDB, and data.table. - Options for dplyr syntax in all three packages.\n3.6 Activity: Case Study - Goals: Compare, contrast, and benchmark - Learners repeat a data analysis task three times, using each of the three tools. - Learners benchmark the speed of each step of the task in the three implementations. - Discussion and reflection on learner-preferred syntax and usage.\nUnit 4: Putting it together: a workflow for efficient data manipulation (Bodwin/Barrett 1.5 hours)\n4.1 Showcase: A tidy pipeline using these modern, efficient tools - Import/export: fread, parquet with arrow/duckDB - Tidy: dtplyr, duckplyr, arrow - Transform: dtplyr, duckplyr, arrow\n4.2 Decisions and Guidelines - When to choose fread with csv versus parquet conversion. - Pros and cons of the local database structure versus local raw data files. - Specific data sizes, formats, and computations that are best suited to each tool.\n4.3 Activity: Final Case Study - Learners take ownership of a case study of real world large data, writing their own code with a large dataset from start to finish with instructor support Learning Objectives Diagnosing and Benchmarking: - Incorporate time checks into a data analysis workflow to identify slowdowns. - Recognize workflow sections that are likely to be re-run - Design data pipeline steps to isolate and improve bottlenecks\nSyntax: - Write basic data analysis code in data.table - Write basic data analysis code in arrow - Write basic data analysis code in duckDB - Write dplyr syntax code with dtplyr and duckplyr\nConcepts and Ideas: - Recognize grouping and summarizing operations that will benefit from the data.table implementation - Understand the modify-by-reference approach - Understand the benefits of parquet‚Äôs column orientation storage - Know the difference between a collection of local files and a local database.\nWorkflow: - Read csv data with fread and parquet format data with arrow - Set up and read/write data in a local duckDB database - Smoothly switch between major large data tools within a single data processing and analyzing pipeline. Instructor(s) Background Dr.¬†Kelly Bodwin is an educator with over a decade of experience of teaching statistics and data science with R. She has co-authored multiple R packages, including flair and tidyclust, and she is currently a consultant on an NSF Grant building infrastructure for the data.table package. Her published applied research frequently involves manipulating large, in-memory data. Examples include: performing large matrix computations on high-dimensional GWAS (genome-wide association studies) data; constructing temporal social networks at hundreds of time checkpoints for organizational membership data; and summarizing biodiversity metrics grouped over exhaustive permutations of taxa level organism counts and experimental conditions. Above all, Dr.¬†Bodwin‚Äôs educational goal is to lower barriers to entry for beginner and intermediate R users to benefit from modern tools and enable more efficient and effective data workflows.\nDr.¬†Tyson Barrett is a researcher and an applied statistician at Highmark Health and Utah State University. He has over 15 years of R package development and programming experience, including maintaining data.table (with over 600,000 monthly downloads) and 3 other published R packages. He is currently a consultant on an NSF Grant building infrastructure for the data.table package. In his research work, he regularly works with large datasets with millions of rows and hundreds of columns. He and his team use data.table, arrow, and duckDB daily to manage and analyze their data to efficiently and quickly communicate insights with stakeholders.\nDr.¬†Jonathan Keane is an engineering leader at Posit, PBC with a background in data science and social science. They have been building data tooling for 15 years, including both R and Python data tools for scientific and data science computing. They are a member of the PMC for Apache Arrow, a maintainer of the Apache Arrow package, and the author of dittodb. They have also worked as a data scientist in a number of different industries (identify verification and fraud, market research, call centers, and social justice among other areas) using a wide range of tools to analyze, model, and use data at large enterprise scales. On top of building data tooling, they have a passion for teaching data scientists and others how to use data and tools to do their work and inform their decisions.\nAdditional Comments Learners should bring a working laptop with an installation of R 4.0+ and a recent (2023 or later) installation of RStudio or Positron. Learners should ensure that their laptop has admin permission for installation of new R packages.\nA beginner-intermediate level of working knowledge in R with the tidyverse is assumed; at approximately the level of Chapters 1-8 in Wickham‚Äôs R for Data Science (2e)."
  },
  {
    "objectID": "dev/Outline_draft.html#unit-one-defining-the-problem",
    "href": "dev/Outline_draft.html#unit-one-defining-the-problem",
    "title": "Course Outline",
    "section": "",
    "text": "How big is my data? Long, wide or both?\nHow big is my analysis? Big because many groups? Big because looping? Big because matrix computation?\nHow often will I repeat my analysis? By myself as I refine it? In production?\nHow to choose a tool? -&gt; You have one dataset. It can read into R, but tasks are slow:\ngrouping and summarizing, esp over a variable with many cats\nmapping through a column, e.g to string process or custom function\ncomputing lags, sliders, etc.\nmaking many new columns\n\nWhat‚Äôs my slowdown? -&gt; profvis\nPersona: Survey research\n-&gt; You have one dataset. It is too large to read into R.\nPersona: Biological genetic data\nWhat‚Äôs my slowdown? -&gt; read a few lines, develop your pipeline, profvis\n-&gt; You have many datasets. At least one is too large to read into R. Joining and subsetting is slow.\nPersona: Customer data\n\nWhat makes some code faster than others?\nEfficiency of pipeline: filter before mutate.\nEfficiency of algorithm: think matrix order\nEfficiency of memory handling: careful C allocations\nEfficiency of interpreting or compiling\nEfficiency of data storage structure\nSmart saving of intermediate objects.\n\nx: data size y: number of repeated operations\n1,1: any 1,2: data table. [write more efficient code] 2,1: parquet & arrow [use better storage formats] 2,2: duckdb & arrow [run in SQL not R]\nhigher x -&gt; cloud database higher y -&gt; bigger machine/parallelize across machines/whatever"
  },
  {
    "objectID": "dev/Outline_draft.html#unit-three-handle-it-in-a-local-database-with-arrow-and-duckdb",
    "href": "dev/Outline_draft.html#unit-three-handle-it-in-a-local-database-with-arrow-and-duckdb",
    "title": "Course Outline",
    "section": "",
    "text": "small: &lt; 1000 or something, everything is split second\nmedium: 100000 or so, and/or many categories, can read into R but analysis is slow\nlarge: parquet can store on local machine\nmassive: too big for local machine\nQuestions for Tyson/Jon: - Easy way to convert csv to parquet w/o reading into R?\n- Column and row size; handled differently in R? In parquet? In a db?\nTitle of course Storing, Importing, Managing, and Analyzing Large Data Locally with R Instructor 1 Kelly Bodwin Instructor 1 Email kbodwin@calpoly.edu Instructor 2 Tyson Barrett Instructor 2 Email tyson.barrett@usu.edu Instructor 3 Jonathan Keane Instructor 3 Email jkeane@gmail.com Length of Course\nFull-day (7.5 contact hours) Course Description It is increasingly common in academic and professional settings to encounter datasets large enough to exceed the capabilities of standard data processing tools, yet small enough to be stored on local computers. Recent articles even claim that ‚Äúthe era of big data is over‚Äù and that data analysts and researchers should ‚Äúthink small, develop locally, ship joyfully.‚Äù Such ‚Äúmedium‚Äù dataests are instrumental in measuring, tracking, and recording a wide array of phenomena across disciplines such as human behavior, animal studies, geology, economics, and astronomy. In this workshop, we will present modern techniques for handling large local data in R using a tidy data pipeline, encompassing stages from data storage and importing to cleaning, analysis, and exporting data and analyses. Specifically, we will teach a combination of tools from the data.table, arrow, and duckDB packages, with a focus on parquet data files for storage and transfer. By the end of the workshop, participants will understand how to integrate these tools to establish a legible, reproducible, efficient, and high-performance workflow.\nCourse Outline The following outline shows our planned approach to managing and analyzing large data locally in R. Our target audience are individuals in academic or professional data analysis positions, who work regularly with datasets that are manageable in terms of local storage but pose significant challenges in processing and cleaning due to their size and complexity.\nUnit 1: Identifying slowdowns in your local data process (Bodwin; 1 hour)\n1.1 Finding the problem:\n- User-friendly code timing with tictoc - Comparing runtimes with atime - Code profiling with profvis\n1.2 Categories of bottlenecks - Common scenarios for repeated runs of code sections - Speed impact from order-of-operations in data wrangling - Fast vs.¬†slow types of dataset operations in R\n1.3 Activity: Code-along demo - Walkthrough of common data structures and tasks that could benefit from modern large-data tools\nUnit 2: In-Memory data wrangling with data.table (Barrett; 2 hours)\n2.1 Introduction - Basic syntax and structure of data.table - Speed comparison for common simple data tasks - High-level, user-friendly intuition for data.table‚Äôs ‚Äúunder the hood‚Äù parallel processing and C optimization\n2.2 Data wrangling tools - Filtering, summarizing, grouping, and mutating data - Sophisticated data processing with the set* functions.\n2.3 Activity: Code-Along - Real-data examples of data.table use for processing and analyzing data.\n2.4 Reference semantics - Speed and memory gains from modify-by-reference - Effects and side-effects of modify-by-reference - data.table syntax for fast no-copy data transformation\n2.5 Helper packages - Brief highlight of dtplyr and tidyfast as syntactical wrappers to data.table - Storing and reading data.table objects with parquet.\n2.6 Activity: Case Study - Learners work through a guided but incomplete real-data analysis.\nUnit 3: Storing, Reading, and Converting data with arrow, parquet, and duckdb (Keane 2 hours, Bodwin/Barrett 1 hour)\n3.1 Introduction to Arrow and Parquet - Intro to history and development of Arrow - Basic Arrow infrastructure and syntax - Discussion of the interchange problem - Using arrow reader and nanoparquet for efficient dataset storage and input. - Discussion of the Parquet structure, including column orientation and its benefits\n3.2 Activity: Code-Along - Data analysis with Arrow.\n3.3 Introduction to DuckDB - Introduction to duckDB and the local database model. - Basic duckDB syntax. - Data processing and analysis in duckDB - Helper packages such as duckplyr. - Working with duckDB and parquet files simultaneously.\n3.4 Activity: Code-Along - Data analysis with duckDB.\n3.5 Comparison of tools - Similarities and trade-offs of arrow, duckDB, and data.table. - Options for dplyr syntax in all three packages.\n3.6 Activity: Case Study - Goals: Compare, contrast, and benchmark - Learners repeat a data analysis task three times, using each of the three tools. - Learners benchmark the speed of each step of the task in the three implementations. - Discussion and reflection on learner-preferred syntax and usage.\nUnit 4: Putting it together: a workflow for efficient data manipulation (Bodwin/Barrett 1.5 hours)\n4.1 Showcase: A tidy pipeline using these modern, efficient tools - Import/export: fread, parquet with arrow/duckDB - Tidy: dtplyr, duckplyr, arrow - Transform: dtplyr, duckplyr, arrow\n4.2 Decisions and Guidelines - When to choose fread with csv versus parquet conversion. - Pros and cons of the local database structure versus local raw data files. - Specific data sizes, formats, and computations that are best suited to each tool.\n4.3 Activity: Final Case Study - Learners take ownership of a case study of real world large data, writing their own code with a large dataset from start to finish with instructor support Learning Objectives Diagnosing and Benchmarking: - Incorporate time checks into a data analysis workflow to identify slowdowns. - Recognize workflow sections that are likely to be re-run - Design data pipeline steps to isolate and improve bottlenecks\nSyntax: - Write basic data analysis code in data.table - Write basic data analysis code in arrow - Write basic data analysis code in duckDB - Write dplyr syntax code with dtplyr and duckplyr\nConcepts and Ideas: - Recognize grouping and summarizing operations that will benefit from the data.table implementation - Understand the modify-by-reference approach - Understand the benefits of parquet‚Äôs column orientation storage - Know the difference between a collection of local files and a local database.\nWorkflow: - Read csv data with fread and parquet format data with arrow - Set up and read/write data in a local duckDB database - Smoothly switch between major large data tools within a single data processing and analyzing pipeline. Instructor(s) Background Dr.¬†Kelly Bodwin is an educator with over a decade of experience of teaching statistics and data science with R. She has co-authored multiple R packages, including flair and tidyclust, and she is currently a consultant on an NSF Grant building infrastructure for the data.table package. Her published applied research frequently involves manipulating large, in-memory data. Examples include: performing large matrix computations on high-dimensional GWAS (genome-wide association studies) data; constructing temporal social networks at hundreds of time checkpoints for organizational membership data; and summarizing biodiversity metrics grouped over exhaustive permutations of taxa level organism counts and experimental conditions. Above all, Dr.¬†Bodwin‚Äôs educational goal is to lower barriers to entry for beginner and intermediate R users to benefit from modern tools and enable more efficient and effective data workflows.\nDr.¬†Tyson Barrett is a researcher and an applied statistician at Highmark Health and Utah State University. He has over 15 years of R package development and programming experience, including maintaining data.table (with over 600,000 monthly downloads) and 3 other published R packages. He is currently a consultant on an NSF Grant building infrastructure for the data.table package. In his research work, he regularly works with large datasets with millions of rows and hundreds of columns. He and his team use data.table, arrow, and duckDB daily to manage and analyze their data to efficiently and quickly communicate insights with stakeholders.\nDr.¬†Jonathan Keane is an engineering leader at Posit, PBC with a background in data science and social science. They have been building data tooling for 15 years, including both R and Python data tools for scientific and data science computing. They are a member of the PMC for Apache Arrow, a maintainer of the Apache Arrow package, and the author of dittodb. They have also worked as a data scientist in a number of different industries (identify verification and fraud, market research, call centers, and social justice among other areas) using a wide range of tools to analyze, model, and use data at large enterprise scales. On top of building data tooling, they have a passion for teaching data scientists and others how to use data and tools to do their work and inform their decisions.\nAdditional Comments Learners should bring a working laptop with an installation of R 4.0+ and a recent (2023 or later) installation of RStudio or Positron. Learners should ensure that their laptop has admin permission for installation of new R packages.\nA beginner-intermediate level of working knowledge in R with the tidyverse is assumed; at approximately the level of Chapters 1-8 in Wickham‚Äôs R for Data Science (2e)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "JSM 2025 Short Course",
    "section": "",
    "text": "by: Kelly Bodwin, Tyson Barrett & Jonathan Keane"
  },
  {
    "objectID": "index.html#large-local-data",
    "href": "index.html#large-local-data",
    "title": "JSM 2025 Short Course",
    "section": "",
    "text": "by: Kelly Bodwin, Tyson Barrett & Jonathan Keane"
  },
  {
    "objectID": "index.html#short-course-description",
    "href": "index.html#short-course-description",
    "title": "JSM 2025 Short Course",
    "section": "Short Course Description",
    "text": "Short Course Description\nIt is increasingly common in academic and professional settings to encounter datasets large enough to exceed the capabilities of standard data processing tools, yet small enough to be stored on local computers. Recent articles even claim that ‚Äúthe era of big data is over‚Äù and that data analysts and researchers should ‚Äúthink small, develop locally, ship joyfully‚Äù Such ‚Äúmedium‚Äù dataests are instrumental in measuring, tracking, and recording a wide array of phenomena across disciplines such as human behavior, animal studies, geology, economics, and astronomy. In this workshop, we will present modern techniques for handling large local data in R using a tidy data pipeline, encompassing stages from data storage and importing to cleaning, analysis, and exporting data and analyses. Specifically, we will teach a combination of tools from the data.table, arrow, and duckDB packages, with a focus on parquet data files for storage and transfer. By the end of the workshop, participants will understand how to integrate these tools to establish a legible, reproducible, efficient, and high-performance workflow."
  },
  {
    "objectID": "index.html#intended-audience-and-level",
    "href": "index.html#intended-audience-and-level",
    "title": "JSM 2025 Short Course",
    "section": "Intended Audience and Level",
    "text": "Intended Audience and Level\nWe expect attendees to have R fluency at the level of a typical introductory course, such as the textbook R for Data Science (Wickham, √áetinkaya-Rundel, & Grolemund 2023); as well as familiarity with some data application that may motivate tools beyond the introductory level."
  },
  {
    "objectID": "materials/slides/02-datatable.html#why-data.table",
    "href": "materials/slides/02-datatable.html#why-data.table",
    "title": "data.table",
    "section": "Why data.table?",
    "text": "Why data.table?\n\n\nConcise syntax: fast to type, fast to read ‚Äì ‚ÄúMe think, why waste time say lot word when few word do trick.‚Äù\n\n\n\n\nFast speed: optimized C code under the hood ‚Äì ‚ÄúI am faster than 80 percent of all snakes.‚Äù\n\n\n\n\nMemory efficient: modify by reference ‚Äì ‚ÄúWhenever I‚Äôm about to do something, I think, ‚Äúwould an idiot do that?‚Äù And if they would, I do not do that thing.‚Äù"
  },
  {
    "objectID": "materials/slides/02-datatable.html#why-data.table-1",
    "href": "materials/slides/02-datatable.html#why-data.table-1",
    "title": "data.table",
    "section": "Why data.table?",
    "text": "Why data.table?\n\n\nCareful API lifecycle management: stable, backward compatible ‚Äì ‚ÄúI‚Äôm not superstitious, but I am a little stitious.‚Äù\n\n\n\n\nCommunity: active development and support ‚Äì ‚ÄúWould I rather be feared or loved? Easy. Both. I want people to be afraid of how much they love me.‚Äù\n\n\n\n\nFeature rich: comprehensive data manipulation toolkit ‚Äì ‚ÄúBears, beets, Battlestar Galactica.‚Äù"
  },
  {
    "objectID": "materials/slides/02-datatable.html#loading-pums-data",
    "href": "materials/slides/02-datatable.html#loading-pums-data",
    "title": "data.table",
    "section": "Loading PUMS Data",
    "text": "Loading PUMS Data\nPreview to next section with Jonathan about arrow:\n\nlibrary(data.table)\nlibrary(dplyr)\nlibrary(arrow)\n\n# Preview into next section: Load multiple states and years using arrow\npums &lt;- open_dataset(here::here(\"data/person\")) |&gt;\n  filter(year &gt;= 2020, location %in% c(\"ca\", \"tx\", \"ny\")) |&gt;\n  collect()\nsetDT(pums)"
  },
  {
    "objectID": "materials/slides/02-datatable.html#loading-pums-data-1",
    "href": "materials/slides/02-datatable.html#loading-pums-data-1",
    "title": "data.table",
    "section": "Loading PUMS Data",
    "text": "Loading PUMS Data\n\npums[, 1:5]\n\n         SPORDER            RT      SERIALNO   PUMA          ST\n           &lt;int&gt;        &lt;fctr&gt;        &lt;char&gt; &lt;char&gt;      &lt;char&gt;\n      1:       1 Person Record 2021GQ0000077  03301 New York/NY\n      2:       1 Person Record 2021GQ0000090  01600 New York/NY\n      3:       1 Person Record 2021GQ0000091  03212 New York/NY\n      4:       1 Person Record 2021GQ0000094  02100 New York/NY\n      5:       1 Person Record 2021GQ0000097  04102 New York/NY\n     ---                                                       \n1735551:       1 Person Record 2022HU0609672  04611    Texas/TX\n1735552:       2 Person Record 2022HU0609672  04611    Texas/TX\n1735553:       3 Person Record 2022HU0609672  04611    Texas/TX\n1735554:       1 Person Record 2022HU0609675  04302    Texas/TX\n1735555:       2 Person Record 2022HU0609675  04302    Texas/TX\n\nnames(pums)\n\n  [1] \"SPORDER\"   \"RT\"        \"SERIALNO\"  \"PUMA\"      \"ST\"        \"ADJUST\"   \n  [7] \"PWGTP\"     \"AGEP\"      \"CIT\"       \"COW\"       \"DDRS\"      \"DEYE\"     \n [13] \"DOUT\"      \"DPHY\"      \"DREM\"      \"DWRK\"      \"ENG\"       \"FER\"      \n [19] \"GCL\"       \"GCM\"       \"GCR\"       \"INTP\"      \"JWMNP\"     \"JWRIP\"    \n [25] \"JWTR\"      \"LANX\"      \"MAR\"       \"MIG\"       \"MIL\"       \"MILY\"     \n [31] \"MLPA\"      \"MLPB\"      \"MLPC\"      \"MLPD\"      \"MLPE\"      \"MLPF\"     \n [37] \"MLPG\"      \"MLPH\"      \"MLPI\"      \"MLPJ\"      \"MLPK\"      \"NWAB\"     \n [43] \"NWAV\"      \"NWLA\"      \"NWLK\"      \"NWRE\"      \"OIP\"       \"PAP\"      \n [49] \"REL\"       \"RETP\"      \"SCH\"       \"SCHG\"      \"SCHL\"      \"SEMP\"     \n [55] \"SEX\"       \"SSIP\"      \"SSP\"       \"WAGP\"      \"WKHP\"      \"WKL\"      \n [61] \"WKW\"       \"YOEP\"      \"UWRK\"      \"ANC\"       \"ANC1P\"     \"ANC2P\"    \n [67] \"DECADE\"    \"DRIVESP\"   \"DS\"        \"ESP\"       \"ESR\"       \"HISP\"     \n [73] \"INDP\"      \"JWAP\"      \"JWDP\"      \"LANP\"      \"MIGPUMA\"   \"MIGSP\"    \n [79] \"MSP\"       \"NAICSP\"    \"NATIVITY\"  \"OC\"        \"OCCP\"      \"PAOC\"     \n [85] \"PERNP\"     \"PINCP\"     \"POBP\"      \"POVPIP\"    \"POWPUMA\"   \"POWSP\"    \n [91] \"QTRBIR\"    \"RAC1P\"     \"RAC2P\"     \"RAC3P\"     \"RACAIAN\"   \"RACASN\"   \n [97] \"RACBLK\"    \"RACNHPI\"   \"RACNUM\"    \"RACSOR\"    \"RACWHT\"    \"RC\"       \n[103] \"SFN\"       \"SFR\"       \"SOCP\"      \"VPS\"       \"WAOB\"      \"FAGEP\"    \n[109] \"FANCP\"     \"FCITP\"     \"FCOWP\"     \"FDDRSP\"    \"FDEYEP\"    \"FDOUTP\"   \n[115] \"FDPHYP\"    \"FDREMP\"    \"FDWRKP\"    \"FENGP\"     \"FESRP\"     \"FFERP\"    \n[121] \"FGCLP\"     \"FGCMP\"     \"FGCRP\"     \"FHISP\"     \"FINDP\"     \"FINTP\"    \n[127] \"FJWDP\"     \"FJWMNP\"    \"FJWRIP\"    \"FJWTRP\"    \"FLANP\"     \"FLANXP\"   \n[133] \"FMARP\"     \"FMIGP\"     \"FMIGSP\"    \"FMILPP\"    \"FMILSP\"    \"FMILYP\"   \n[139] \"FOCCP\"     \"FOIP\"      \"FPAP\"      \"FPOBP\"     \"FPOWSP\"    \"FRACP\"    \n[145] \"FRELP\"     \"FRETP\"     \"FSCHGP\"    \"FSCHLP\"    \"FSCHP\"     \"FSEMP\"    \n[151] \"FSEXP\"     \"FSSIP\"     \"FSSP\"      \"FWAGP\"     \"FWKHP\"     \"FWKLP\"    \n[157] \"FWKWP\"     \"FYOEP\"     \"PWGTP1\"    \"PWGTP2\"    \"PWGTP3\"    \"PWGTP4\"   \n[163] \"PWGTP5\"    \"PWGTP6\"    \"PWGTP7\"    \"PWGTP8\"    \"PWGTP9\"    \"PWGTP10\"  \n[169] \"PWGTP11\"   \"PWGTP12\"   \"PWGTP13\"   \"PWGTP14\"   \"PWGTP15\"   \"PWGTP16\"  \n[175] \"PWGTP17\"   \"PWGTP18\"   \"PWGTP19\"   \"PWGTP20\"   \"PWGTP21\"   \"PWGTP22\"  \n[181] \"PWGTP23\"   \"PWGTP24\"   \"PWGTP25\"   \"PWGTP26\"   \"PWGTP27\"   \"PWGTP28\"  \n[187] \"PWGTP29\"   \"PWGTP30\"   \"PWGTP31\"   \"PWGTP32\"   \"PWGTP33\"   \"PWGTP34\"  \n[193] \"PWGTP35\"   \"PWGTP36\"   \"PWGTP37\"   \"PWGTP38\"   \"PWGTP39\"   \"PWGTP40\"  \n[199] \"PWGTP41\"   \"PWGTP42\"   \"PWGTP43\"   \"PWGTP44\"   \"PWGTP45\"   \"PWGTP46\"  \n[205] \"PWGTP47\"   \"PWGTP48\"   \"PWGTP49\"   \"PWGTP50\"   \"PWGTP51\"   \"PWGTP52\"  \n[211] \"PWGTP53\"   \"PWGTP54\"   \"PWGTP55\"   \"PWGTP56\"   \"PWGTP57\"   \"PWGTP58\"  \n[217] \"PWGTP59\"   \"PWGTP60\"   \"PWGTP61\"   \"PWGTP62\"   \"PWGTP63\"   \"PWGTP64\"  \n[223] \"PWGTP65\"   \"PWGTP66\"   \"PWGTP67\"   \"PWGTP68\"   \"PWGTP69\"   \"PWGTP70\"  \n[229] \"PWGTP71\"   \"PWGTP72\"   \"PWGTP73\"   \"PWGTP74\"   \"PWGTP75\"   \"PWGTP76\"  \n[235] \"PWGTP77\"   \"PWGTP78\"   \"PWGTP79\"   \"PWGTP80\"   \"NOP\"       \"ADJINC\"   \n[241] \"CITWP\"     \"DEAR\"      \"DRAT\"      \"DRATX\"     \"HINS1\"     \"HINS2\"    \n[247] \"HINS3\"     \"HINS4\"     \"HINS5\"     \"HINS6\"     \"HINS7\"     \"MARHD\"    \n[253] \"MARHM\"     \"MARHT\"     \"MARHW\"     \"MARHYP\"    \"DIS\"       \"HICOV\"    \n[259] \"PRIVCOV\"   \"PUBCOV\"    \"FCITWP\"    \"FDEARP\"    \"FDRATP\"    \"FDRATXP\"  \n[265] \"FHINS1P\"   \"FHINS2P\"   \"FHINS3P\"   \"FHINS4P\"   \"FHINS5P\"   \"FHINS6P\"  \n[271] \"FHINS7P\"   \"FMARHDP\"   \"FMARHMP\"   \"FMARHTP\"   \"FMARHWP\"   \"FMARHYP\"  \n[277] \"WRK\"       \"FOD1P\"     \"FOD2P\"     \"SCIENGP\"   \"SCIENGRLP\" \"FFODP\"    \n[283] \"FHINS3C\"   \"FHINS4C\"   \"FHINS5C\"   \"RELP\"      \"FWRKP\"     \"FDISP\"    \n[289] \"FPERNP\"    \"FPINCP\"    \"FPRIVCOVP\" \"FPUBCOVP\"  \"RACNH\"     \"RACPI\"    \n[295] \"SSPA\"      \"MLPCD\"     \"MLPFG\"     \"FHICOVP\"   \"DIVISION\"  \"REGION\"   \n[301] \"HIMRKS\"    \"JWTRNS\"    \"RELSHIPP\"  \"WKWN\"      \"FHIMRKSP\"  \"FJWTRNSP\" \n[307] \"FRELSHIPP\" \"FWKWNP\"    \"MLPIK\"     \"year\"      \"location\""
  },
  {
    "objectID": "materials/slides/02-datatable.html#concise-syntax",
    "href": "materials/slides/02-datatable.html#concise-syntax",
    "title": "data.table",
    "section": "1. Concise Syntax",
    "text": "1. Concise Syntax\n‚Äúwhy waste time say lot word when few word do trick.‚Äù\n\n\n\nIn j we can grab individual variables or a list of them (using the .())"
  },
  {
    "objectID": "materials/slides/02-datatable.html#concise-syntax-1",
    "href": "materials/slides/02-datatable.html#concise-syntax-1",
    "title": "data.table",
    "section": "1. Concise Syntax",
    "text": "1. Concise Syntax\nFast to type, fast to read\n\n# Base R approach\npums_df &lt;- as.data.frame(pums)\nsubset_data &lt;- pums_df[pums$ST == \"California/CA\" & pums$year == 2022, ]\nage_groups &lt;- ifelse(subset_data$AGEP &lt; 18, \"Under 18\",\n                    ifelse(subset_data$AGEP &lt; 65, \"18-64\", \"65+\"))\nbase_result &lt;- aggregate(subset_data$PWGTP, by = list(age_group = age_groups), FUN = sum)\n\n# data.table approach\npums[, age_groups := fcase(AGEP &lt; 18, \"Under 18\", AGEP &lt; 65, \"18-64\", default = \"65+\")]\ndt_result &lt;- pums[\n  year == 2022 & ST == \"California/CA\", \n  .(total_pop = sum(PWGTP)), \n  by = age_groups\n]\n\n\n\n\n\nbase_result\n\n  age_group        x\n1     18-64 24372342\n2       65+  6165865\n3  Under 18  8491135\n\n\n\n\ndt_result\n\n   age_groups total_pop\n       &lt;char&gt;     &lt;int&gt;\n1:      18-64  24372342\n2:        65+   6165865\n3:   Under 18   8491135"
  },
  {
    "objectID": "materials/slides/02-datatable.html#fill-in-the-blank",
    "href": "materials/slides/02-datatable.html#fill-in-the-blank",
    "title": "data.table",
    "section": "Fill in the Blank",
    "text": "Fill in the Blank\nWe want to take the pums data.table and select the SCHL, SEX, ST, and AGEP.\n\ndt_subset &lt;- pums[,\n\n]"
  },
  {
    "objectID": "materials/slides/02-datatable.html#fill-in-the-blank-1",
    "href": "materials/slides/02-datatable.html#fill-in-the-blank-1",
    "title": "data.table",
    "section": "Fill in the Blank",
    "text": "Fill in the Blank\nWe want to take the pums data.table and select the SCHL, SEX, ST, and AGEP.\n\ndt_subset &lt;- pums[,\n  .(SCHL, SEX, ST, AGEP)\n]"
  },
  {
    "objectID": "materials/slides/02-datatable.html#fill-in-the-blank-2",
    "href": "materials/slides/02-datatable.html#fill-in-the-blank-2",
    "title": "data.table",
    "section": "Fill in the Blank",
    "text": "Fill in the Blank\nWe want to subset to those in ‚Äúny‚Äù based on our location variable, group by age_groups and year, and get the proportion of those in the ‚ÄúCivilian employed, at work‚Äù based on the ESR variable.\n\ndt_ny &lt;- pums[\n\n\n\n]"
  },
  {
    "objectID": "materials/slides/02-datatable.html#fill-in-the-blank-3",
    "href": "materials/slides/02-datatable.html#fill-in-the-blank-3",
    "title": "data.table",
    "section": "Fill in the Blank",
    "text": "Fill in the Blank\nWe want to subset to those in ‚Äúny‚Äù based on our location variable, group by age_groups and year, and get the proportion of those in the ‚ÄúCivilian employed, at work‚Äù based on the ESR variable.\n\ndt_ny &lt;- pums[\n  location == \"ny\",\n  .(employed = mean(ESR == \"Civilian employed, at work\", na.rm = TRUE)),\n  by = .(age_groups, year)\n]"
  },
  {
    "objectID": "materials/slides/02-datatable.html#what-will-this-do",
    "href": "materials/slides/02-datatable.html#what-will-this-do",
    "title": "data.table",
    "section": "What will this do?",
    "text": "What will this do?\nHINSx are insurance types WAGP income (wages/salary) last 12 months\n\npums[, ins_type := fcase(\n  HINS1 == TRUE, \"employer\", \n  HINS2 == TRUE, \"direct\", \n  HINS3 == TRUE, \"Medicare\", \n  HINS4 == TRUE, \"Medicaid\",\n  HINS5 == TRUE | HINS6 == TRUE | HINS7 == TRUE, \"other\",\n  default = \"no insurance\")\n]\npums[, .(avg_income = mean(WAGP, na.rm = TRUE)), by = ins_type]"
  },
  {
    "objectID": "materials/slides/02-datatable.html#what-will-this-do-1",
    "href": "materials/slides/02-datatable.html#what-will-this-do-1",
    "title": "data.table",
    "section": "What will this do?",
    "text": "What will this do?\nHINSx are insurance types WAGP income (wages/salary) last 12 months\n\npums[, ins_type := fcase(\n  HINS1 == TRUE, \"employer\", \n  HINS2 == TRUE, \"direct\", \n  HINS3 == TRUE, \"Medicare\", \n  HINS4 == TRUE, \"Medicaid\",\n  HINS5 == TRUE | HINS6 == TRUE | HINS7 == TRUE, \"other\",\n  default = \"no insurance\")\n]\npums[, .(avg_income = mean(WAGP, na.rm = TRUE)), by = ins_type]\n\n       ins_type avg_income\n         &lt;char&gt;      &lt;num&gt;\n1:     Medicaid  10794.296\n2:     Medicare   6044.857\n3:     employer  57418.563\n4:       direct  20805.087\n5:        other  30429.201\n6: no insurance  18047.548"
  },
  {
    "objectID": "materials/slides/02-datatable.html#fast-speed",
    "href": "materials/slides/02-datatable.html#fast-speed",
    "title": "data.table",
    "section": "2. Fast Speed",
    "text": "2. Fast Speed\n‚ÄúI am faster than 80 percent of all snakes.‚Äù\nBenchmarking is difficult\n\n# Benchmarking aggregation operations\nmicrobenchmark::microbenchmark(\n  # data.table\n  pums[, .(total_pop = sum(PWGTP)), by = .(ST, year)],\n  \n  # dplyr\n  pums_df |&gt; \n    group_by(ST, year) |&gt; \n    summarise(total_pop = sum(PWGTP), .groups = \"drop\"),\n\n  times = 10\n)\n\nUnit: milliseconds\n                                                                                  expr\n                                   pums[, .(total_pop = sum(PWGTP)), by = .(ST, year)]\n summarise(group_by(pums_df, ST, year), total_pop = sum(PWGTP),      .groups = \"drop\")\n      min       lq     mean   median       uq      max neval\n 11.02416 11.16004 11.37830 11.24712 11.59714 11.86429    10\n 20.28008 22.07579 23.57717 23.07908 24.71168 30.27604    10"
  },
  {
    "objectID": "materials/slides/02-datatable.html#fast-speed-1",
    "href": "materials/slides/02-datatable.html#fast-speed-1",
    "title": "data.table",
    "section": "2. Fast Speed",
    "text": "2. Fast Speed\n\n# Benchmarking aggregation operations\nmicrobenchmark::microbenchmark(\n  # data.table\n  pums[, .(total_pop = sum(PWGTP)), keyby = .(ST, year)],\n  \n  # dplyr\n  pums_df |&gt; \n    group_by(ST, year) |&gt; \n    summarise(total_pop = sum(PWGTP), .groups = \"drop\") |&gt; \n    arrange(ST, year),\n\n  times = 10\n)\n\nUnit: milliseconds\n                                                                                                     expr\n                                                   pums[, .(total_pop = sum(PWGTP)), keyby = .(ST, year)]\n arrange(summarise(group_by(pums_df, ST, year), total_pop = sum(PWGTP),      .groups = \"drop\"), ST, year)\n      min       lq     mean   median       uq      max neval\n 35.54540 36.54670 37.06849 36.97062 37.77396 38.59371    10\n 21.60811 21.90253 24.04276 23.59443 26.00901 26.99272    10"
  },
  {
    "objectID": "materials/slides/02-datatable.html#memory-efficient",
    "href": "materials/slides/02-datatable.html#memory-efficient",
    "title": "data.table",
    "section": "3. Memory Efficient",
    "text": "3. Memory Efficient\n‚ÄúWhenever I‚Äôm about to do something, I think, ‚Äúwould an idiot do that?‚Äù And if they would, I do not do that thing.‚Äù\n\nQuick History Lesson on Shallow/Deep Copies\n\n\n# Create a copy (memory inefficient)\npums_nocopy &lt;- pums\n\n# Modify by reference (memory efficient)\npums[, age_decade := floor(AGEP / 10) * 10]\n\n# shows up in pums_nocopy\npums_nocopy[, .(age_decade)]\n\n         age_decade\n              &lt;num&gt;\n      1:         50\n      2:         40\n      3:         10\n      4:         50\n      5:         80\n     ---           \n1735551:         50\n1735552:         60\n1735553:         20\n1735554:         60\n1735555:         60\n\n\n\n\n\n\n\nlobstr::ref(pums)\n\n‚ñà [1:0x111cdb600] &lt;dt[,314]&gt; \n‚îú‚îÄSPORDER = [2:0x1189a0000] &lt;int&gt; \n‚îú‚îÄRT = [3:0x1196e0000] &lt;fct&gt; \n‚îú‚îÄSERIALNO = [4:0x115900000] &lt;chr&gt; \n‚îú‚îÄPUMA = [5:0x123000000] &lt;chr&gt; \n‚îú‚îÄST = [6:0x124a80000] &lt;chr&gt; \n‚îú‚îÄADJUST = [7:0x13f138000] &lt;int&gt; \n‚îú‚îÄPWGTP = [8:0x328008000] &lt;int&gt; \n‚îú‚îÄAGEP = [9:0x328d48000] &lt;int&gt; \n‚îú‚îÄCIT = [10:0x329a88000] &lt;fct&gt; \n‚îú‚îÄCOW = [11:0x32a7c8000] &lt;fct&gt; \n‚îú‚îÄDDRS = [12:0x1389d0000] &lt;lgl&gt; \n‚îú‚îÄDEYE = [13:0x160018000] &lt;lgl&gt; \n‚îú‚îÄDOUT = [14:0x178038000] &lt;lgl&gt; \n‚îú‚îÄDPHY = [15:0x1786d8000] &lt;lgl&gt; \n‚îú‚îÄDREM = [16:0x178d78000] &lt;lgl&gt; \n‚îú‚îÄDWRK = [17:0x128aa0000] &lt;lgl&gt; \n‚îú‚îÄENG = [18:0x32b508000] &lt;fct&gt; \n‚îú‚îÄFER = [19:0x129140000] &lt;lgl&gt; \n‚îú‚îÄGCL = [20:0x139070000] &lt;lgl&gt; \n‚îú‚îÄGCM = [21:0x32c248000] &lt;fct&gt; \n‚îú‚îÄGCR = [22:0x1498d8000] &lt;lgl&gt; \n‚îú‚îÄINTP = [23:0x32cf88000] &lt;int&gt; \n‚îú‚îÄJWMNP = [24:0x32dcc8000] &lt;int&gt; \n‚îú‚îÄJWRIP = [25:0x126500000] &lt;chr&gt; \n‚îú‚îÄJWTR = [26:0x133800000] &lt;chr&gt; \n‚îú‚îÄLANX = [27:0x149f78000] &lt;lgl&gt; \n‚îú‚îÄMAR = [28:0x32ea08000] &lt;fct&gt; \n‚îú‚îÄMIG = [29:0x14a618000] &lt;lgl&gt; \n‚îú‚îÄMIL = [30:0x32f748000] &lt;fct&gt; \n‚îú‚îÄMILY = [31:0x3306a8000] &lt;fct&gt; \n‚îú‚îÄMLPA = [32:0x310008000] &lt;lgl&gt; \n‚îú‚îÄMLPB = [33:0x1297e0000] &lt;lgl&gt; \n‚îú‚îÄMLPC = [34:0x139710000] &lt;lgl&gt; \n‚îú‚îÄMLPD = [35:0x139db0000] &lt;lgl&gt; \n‚îú‚îÄMLPE = [36:0x300018000] &lt;lgl&gt; \n‚îú‚îÄMLPF = [37:0x3006b8000] &lt;lgl&gt; \n‚îú‚îÄMLPG = [38:0x300d58000] &lt;lgl&gt; \n‚îú‚îÄMLPH = [39:0x14acb8000] &lt;lgl&gt; \n‚îú‚îÄMLPI = [40:0x13a450000] &lt;lgl&gt; \n‚îú‚îÄMLPJ = [41:0x13aaf0000] &lt;lgl&gt; \n‚îú‚îÄMLPK = [42:0x13b190000] &lt;lgl&gt; \n‚îú‚îÄNWAB = [43:0x13b830000] &lt;lgl&gt; \n‚îú‚îÄNWAV = [44:0x3313e8000] &lt;fct&gt; \n‚îú‚îÄNWLA = [45:0x13bed0000] &lt;lgl&gt; \n‚îú‚îÄNWLK = [46:0x13c570000] &lt;lgl&gt; \n‚îú‚îÄNWRE = [47:0x1582f8000] &lt;lgl&gt; \n‚îú‚îÄOIP = [48:0x332128000] &lt;int&gt; \n‚îú‚îÄPAP = [49:0x332e68000] &lt;int&gt; \n‚îú‚îÄREL = [50:0x135280000] &lt;chr&gt; \n‚îú‚îÄRETP = [51:0x152f70000] &lt;int&gt; \n‚îú‚îÄSCH = [52:0x129e80000] &lt;lgl&gt; \n‚îú‚îÄSCHG = [53:0x136d00000] &lt;chr&gt; \n‚îú‚îÄSCHL = [54:0x168000000] &lt;chr&gt; \n‚îú‚îÄSEMP = [55:0x153cb0000] &lt;int&gt; \n‚îú‚îÄSEX = [56:0x1549f0000] &lt;fct&gt; \n‚îú‚îÄSSIP = [57:0x155730000] &lt;int&gt; \n‚îú‚îÄSSP = [58:0x156470000] &lt;int&gt; \n‚îú‚îÄWAGP = [59:0x1571b0000] &lt;int&gt; \n‚îú‚îÄWKHP = [60:0x338008000] &lt;int&gt; \n‚îú‚îÄWKL = [61:0x338d48000] &lt;fct&gt; \n‚îú‚îÄWKW = [62:0x339a88000] &lt;fct&gt; \n‚îú‚îÄYOEP = [63:0x16f08c000] &lt;chr&gt; \n‚îú‚îÄUWRK = [64:0x12a520000] &lt;lgl&gt; \n‚îú‚îÄANC = [65:0x33a7c8000] &lt;fct&gt; \n‚îú‚îÄANC1P = [66:0x340d40000] &lt;chr&gt; \n‚îú‚îÄANC2P = [67:0x3427c0000] &lt;chr&gt; \n‚îú‚îÄDECADE = [68:0x11a528000] &lt;fct&gt; \n‚îú‚îÄDRIVESP = [69:0x11b268000] &lt;fct&gt; \n‚îú‚îÄDS = [70:0x179418000] &lt;lgl&gt; \n‚îú‚îÄESP = [71:0x11bfa8000] &lt;fct&gt; \n‚îú‚îÄESR = [72:0x11cce8000] &lt;fct&gt; \n‚îú‚îÄHISP = [73:0x344240000] &lt;chr&gt; \n‚îú‚îÄINDP = [74:0x345cc0000] &lt;chr&gt; \n‚îú‚îÄJWAP = [75:0x347740000] &lt;chr&gt; \n‚îú‚îÄJWDP = [76:0x3491c0000] &lt;chr&gt; \n‚îú‚îÄLANP = [77:0x34ac40000] &lt;chr&gt; \n‚îú‚îÄMIGPUMA = [78:0x12f008000] &lt;fct&gt; \n‚îú‚îÄMIGSP = [79:0x34c6c0000] &lt;chr&gt; \n‚îú‚îÄMSP = [80:0x33b508000] &lt;fct&gt; \n‚îú‚îÄNAICSP = [81:0x34e140000] &lt;chr&gt; \n‚îú‚îÄNATIVITY = [82:0x14cdd8000] &lt;fct&gt; \n‚îú‚îÄOC = [83:0x150110000] &lt;lgl&gt; \n‚îú‚îÄOCCP = [84:0x34fbc0000] &lt;chr&gt; \n‚îú‚îÄPAOC = [85:0x358008000] &lt;fct&gt; \n‚îú‚îÄPERNP = [86:0x358d48000] &lt;int&gt; \n‚îú‚îÄPINCP = [87:0x359a88000] &lt;int&gt; \n‚îú‚îÄPOBP = [88:0x351640000] &lt;chr&gt; \n‚îú‚îÄPOVPIP = [89:0x35a7c8000] &lt;int&gt; \n‚îú‚îÄPOWPUMA = [90:0x35b508000] &lt;fct&gt; \n‚îú‚îÄPOWSP = [91:0x3530c0000] &lt;chr&gt; \n‚îú‚îÄQTRBIR = [92:0x35c248000] &lt;fct&gt; \n‚îú‚îÄRAC1P = [93:0x35cf88000] &lt;fct&gt; \n‚îú‚îÄRAC2P = [94:0x354b40000] &lt;chr&gt; \n‚îú‚îÄRAC3P = [95:0x3565c0000] &lt;chr&gt; \n‚îú‚îÄRACAIAN = [96:0x1507b0000] &lt;lgl&gt; \n‚îú‚îÄRACASN = [97:0x150e50000] &lt;lgl&gt; \n‚îú‚îÄRACBLK = [98:0x1514f0000] &lt;lgl&gt; \n‚îú‚îÄRACNHPI = [99:0x12abc0000] &lt;lgl&gt; \n‚îú‚îÄRACNUM = [100:0x14db18000] &lt;int&gt; \n‚îú‚îÄRACSOR = [101:0x13cc10000] &lt;lgl&gt; \n‚îú‚îÄRACWHT = [102:0x151b90000] &lt;lgl&gt; \n‚îú‚îÄRC = [103:0x1606b8000] &lt;lgl&gt; \n‚îú‚îÄSFN = [104:0x14e858000] &lt;fct&gt; \n‚îú‚îÄSFR = [105:0x14f598000] &lt;fct&gt; \n‚îú‚îÄSOCP = [106:0x360d40000] &lt;chr&gt; \n‚îú‚îÄVPS = [107:0x3627c0000] &lt;chr&gt; \n‚îú‚îÄWAOB = [108:0x35dcc8000] &lt;fct&gt; \n‚îú‚îÄFAGEP = [109:0x3013f8000] &lt;lgl&gt; \n‚îú‚îÄFANCP = [110:0x3106a8000] &lt;lgl&gt; \n‚îú‚îÄFCITP = [111:0x13d2b0000] &lt;lgl&gt; \n‚îú‚îÄFCOWP = [112:0x310d48000] &lt;lgl&gt; \n‚îú‚îÄFDDRSP = [113:0x3113e8000] &lt;lgl&gt; \n‚îú‚îÄFDEYEP = [114:0x179ab8000] &lt;lgl&gt; \n‚îú‚îÄFDOUTP = [115:0x301a98000] &lt;lgl&gt; \n‚îú‚îÄFDPHYP = [116:0x158998000] &lt;lgl&gt; \n‚îú‚îÄFDREMP = [117:0x311a88000] &lt;lgl&gt; \n‚îú‚îÄFDWRKP = [118:0x302138000] &lt;lgl&gt; \n‚îú‚îÄFENGP = [119:0x308068000] &lt;lgl&gt; \n‚îú‚îÄFESRP = [120:0x3027d8000] &lt;lgl&gt; \n‚îú‚îÄFFERP = [121:0x308708000] &lt;lgl&gt; \n‚îú‚îÄFGCLP = [122:0x12b260000] &lt;lgl&gt; \n‚îú‚îÄFGCMP = [123:0x302e78000] &lt;lgl&gt; \n‚îú‚îÄFGCRP = [124:0x312128000] &lt;lgl&gt; \n‚îú‚îÄFHISP = [125:0x3127c8000] &lt;lgl&gt; \n‚îú‚îÄFINDP = [126:0x303518000] &lt;lgl&gt; \n‚îú‚îÄFINTP = [127:0x303bb8000] &lt;lgl&gt; \n‚îú‚îÄFJWDP = [128:0x12b900000] &lt;lgl&gt; \n‚îú‚îÄFJWMNP = [129:0x312e68000] &lt;lgl&gt; \n‚îú‚îÄFJWRIP = [130:0x152230000] &lt;lgl&gt; \n‚îú‚îÄFJWTRP = [131:0x1528d0000] &lt;lgl&gt; \n‚îú‚îÄFLANP = [132:0x313508000] &lt;lgl&gt; \n‚îú‚îÄFLANXP = [133:0x313ba8000] &lt;lgl&gt; \n‚îú‚îÄFMARP = [134:0x14b358000] &lt;lgl&gt; \n‚îú‚îÄFMIGP = [135:0x170020000] &lt;lgl&gt; \n‚îú‚îÄFMIGSP = [136:0x308da8000] &lt;lgl&gt; \n‚îú‚îÄFMILPP = [137:0x12bfa0000] &lt;lgl&gt; \n‚îú‚îÄFMILSP = [138:0x309448000] &lt;lgl&gt; \n‚îú‚îÄFMILYP = [139:0x1706c0000] &lt;lgl&gt; \n‚îú‚îÄFOCCP = [140:0x309ae8000] &lt;lgl&gt; \n‚îú‚îÄFOIP = [141:0x304258000] &lt;lgl&gt; \n‚îú‚îÄFPAP = [142:0x3048f8000] &lt;lgl&gt; \n‚îú‚îÄFPOBP = [143:0x159038000] &lt;lgl&gt; \n‚îú‚îÄFPOWSP = [144:0x12c640000] &lt;lgl&gt; \n‚îú‚îÄFRACP = [145:0x30a188000] &lt;lgl&gt; \n‚îú‚îÄFRELP = [146:0x30a828000] &lt;lgl&gt; \n‚îú‚îÄFRETP = [147:0x304f98000] &lt;lgl&gt; \n‚îú‚îÄFSCHGP = [148:0x305638000] &lt;lgl&gt; \n‚îú‚îÄFSCHLP = [149:0x17a158000] &lt;lgl&gt; \n‚îú‚îÄFSCHP = [150:0x17a7f8000] &lt;lgl&gt; \n‚îú‚îÄFSEMP = [151:0x314248000] &lt;lgl&gt; \n‚îú‚îÄFSEXP = [152:0x3148e8000] &lt;lgl&gt; \n‚îú‚îÄFSSIP = [153:0x314f88000] &lt;lgl&gt; \n‚îú‚îÄFSSP = [154:0x315628000] &lt;lgl&gt; \n‚îú‚îÄFWAGP = [155:0x315cc8000] &lt;lgl&gt; \n‚îú‚îÄFWKHP = [156:0x316368000] &lt;lgl&gt; \n‚îú‚îÄFWKLP = [157:0x170d60000] &lt;lgl&gt; \n‚îú‚îÄFWKWP = [158:0x171400000] &lt;lgl&gt; \n‚îú‚îÄFYOEP = [159:0x30aec8000] &lt;lgl&gt; \n‚îú‚îÄPWGTP1 = [160:0x35ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP2 = [161:0x35f748000] &lt;int&gt; \n‚îú‚îÄPWGTP3 = [162:0x3706a8000] &lt;int&gt; \n‚îú‚îÄPWGTP4 = [163:0x3713e8000] &lt;int&gt; \n‚îú‚îÄPWGTP5 = [164:0x372128000] &lt;int&gt; \n‚îú‚îÄPWGTP6 = [165:0x372e68000] &lt;int&gt; \n‚îú‚îÄPWGTP7 = [166:0x373ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP8 = [167:0x3748e8000] &lt;int&gt; \n‚îú‚îÄPWGTP9 = [168:0x375628000] &lt;int&gt; \n‚îú‚îÄPWGTP10 = [169:0x376368000] &lt;int&gt; \n‚îú‚îÄPWGTP11 = [170:0x3770a8000] &lt;int&gt; \n‚îú‚îÄPWGTP12 = [171:0x378008000] &lt;int&gt; \n‚îú‚îÄPWGTP13 = [172:0x378d48000] &lt;int&gt; \n‚îú‚îÄPWGTP14 = [173:0x379a88000] &lt;int&gt; \n‚îú‚îÄPWGTP15 = [174:0x37a7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP16 = [175:0x37b508000] &lt;int&gt; \n‚îú‚îÄPWGTP17 = [176:0x37c248000] &lt;int&gt; \n‚îú‚îÄPWGTP18 = [177:0x37cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP19 = [178:0x37dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP20 = [179:0x37ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP21 = [180:0x37f748000] &lt;int&gt; \n‚îú‚îÄPWGTP22 = [181:0x3806a8000] &lt;int&gt; \n‚îú‚îÄPWGTP23 = [182:0x3813e8000] &lt;int&gt; \n‚îú‚îÄPWGTP24 = [183:0x382128000] &lt;int&gt; \n‚îú‚îÄPWGTP25 = [184:0x382e68000] &lt;int&gt; \n‚îú‚îÄPWGTP26 = [185:0x383ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP27 = [186:0x3848e8000] &lt;int&gt; \n‚îú‚îÄPWGTP28 = [187:0x385628000] &lt;int&gt; \n‚îú‚îÄPWGTP29 = [188:0x386368000] &lt;int&gt; \n‚îú‚îÄPWGTP30 = [189:0x3870a8000] &lt;int&gt; \n‚îú‚îÄPWGTP31 = [190:0x388008000] &lt;int&gt; \n‚îú‚îÄPWGTP32 = [191:0x388d48000] &lt;int&gt; \n‚îú‚îÄPWGTP33 = [192:0x389a88000] &lt;int&gt; \n‚îú‚îÄPWGTP34 = [193:0x33c248000] &lt;int&gt; \n‚îú‚îÄPWGTP35 = [194:0x33cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP36 = [195:0x33dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP37 = [196:0x33ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP38 = [197:0x33f748000] &lt;int&gt; \n‚îú‚îÄPWGTP39 = [198:0x3906a8000] &lt;int&gt; \n‚îú‚îÄPWGTP40 = [199:0x3913e8000] &lt;int&gt; \n‚îú‚îÄPWGTP41 = [200:0x392128000] &lt;int&gt; \n‚îú‚îÄPWGTP42 = [201:0x392e68000] &lt;int&gt; \n‚îú‚îÄPWGTP43 = [202:0x393ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP44 = [203:0x3948e8000] &lt;int&gt; \n‚îú‚îÄPWGTP45 = [204:0x395628000] &lt;int&gt; \n‚îú‚îÄPWGTP46 = [205:0x396368000] &lt;int&gt; \n‚îú‚îÄPWGTP47 = [206:0x3970a8000] &lt;int&gt; \n‚îú‚îÄPWGTP48 = [207:0x398008000] &lt;int&gt; \n‚îú‚îÄPWGTP49 = [208:0x398d48000] &lt;int&gt; \n‚îú‚îÄPWGTP50 = [209:0x399a88000] &lt;int&gt; \n‚îú‚îÄPWGTP51 = [210:0x39a7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP52 = [211:0x39b508000] &lt;int&gt; \n‚îú‚îÄPWGTP53 = [212:0x39c248000] &lt;int&gt; \n‚îú‚îÄPWGTP54 = [213:0x39cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP55 = [214:0x39dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP56 = [215:0x39ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP57 = [216:0x11da28000] &lt;int&gt; \n‚îú‚îÄPWGTP58 = [217:0x11e768000] &lt;int&gt; \n‚îú‚îÄPWGTP59 = [218:0x11f4a8000] &lt;int&gt; \n‚îú‚îÄPWGTP60 = [219:0x3a06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP61 = [220:0x3a13e8000] &lt;int&gt; \n‚îú‚îÄPWGTP62 = [221:0x3a2128000] &lt;int&gt; \n‚îú‚îÄPWGTP63 = [222:0x3a2e68000] &lt;int&gt; \n‚îú‚îÄPWGTP64 = [223:0x3a3ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP65 = [224:0x3a48e8000] &lt;int&gt; \n‚îú‚îÄPWGTP66 = [225:0x3a5628000] &lt;int&gt; \n‚îú‚îÄPWGTP67 = [226:0x3a6368000] &lt;int&gt; \n‚îú‚îÄPWGTP68 = [227:0x3a70a8000] &lt;int&gt; \n‚îú‚îÄPWGTP69 = [228:0x3a8008000] &lt;int&gt; \n‚îú‚îÄPWGTP70 = [229:0x3a8d48000] &lt;int&gt; \n‚îú‚îÄPWGTP71 = [230:0x3a9a88000] &lt;int&gt; \n‚îú‚îÄPWGTP72 = [231:0x3aa7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP73 = [232:0x3ab508000] &lt;int&gt; \n‚îú‚îÄPWGTP74 = [233:0x3ac248000] &lt;int&gt; \n‚îú‚îÄPWGTP75 = [234:0x3acf88000] &lt;int&gt; \n‚îú‚îÄPWGTP76 = [235:0x3adcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP77 = [236:0x3aea08000] &lt;int&gt; \n‚îú‚îÄPWGTP78 = [237:0x3af748000] &lt;int&gt; \n‚îú‚îÄPWGTP79 = [238:0x3b06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP80 = [239:0x3b13e8000] &lt;int&gt; \n‚îú‚îÄNOP = [240:0x3b2128000] &lt;fct&gt; \n‚îú‚îÄADJINC = [241:0x364240000] &lt;dbl&gt; \n‚îú‚îÄCITWP = [242:0x365cc0000] &lt;chr&gt; \n‚îú‚îÄDEAR = [243:0x13d950000] &lt;lgl&gt; \n‚îú‚îÄDRAT = [244:0x3b2e68000] &lt;fct&gt; \n‚îú‚îÄDRATX = [245:0x1596d8000] &lt;lgl&gt; \n‚îú‚îÄHINS1 = [246:0x305cd8000] &lt;lgl&gt; \n‚îú‚îÄHINS2 = [247:0x306378000] &lt;lgl&gt; \n‚îú‚îÄHINS3 = [248:0x306a18000] &lt;lgl&gt; \n‚îú‚îÄHINS4 = [249:0x3070b8000] &lt;lgl&gt; \n‚îú‚îÄHINS5 = [250:0x307758000] &lt;lgl&gt; \n‚îú‚îÄHINS6 = [251:0x318008000] &lt;lgl&gt; \n‚îú‚îÄHINS7 = [252:0x3186a8000] &lt;lgl&gt; \n‚îú‚îÄMARHD = [253:0x318d48000] &lt;lgl&gt; \n‚îú‚îÄMARHM = [254:0x3193e8000] &lt;lgl&gt; \n‚îú‚îÄMARHT = [255:0x3b3ba8000] &lt;fct&gt; \n‚îú‚îÄMARHW = [256:0x319a88000] &lt;lgl&gt; \n‚îú‚îÄMARHYP = [257:0x3b8000000] &lt;chr&gt; \n‚îú‚îÄDIS = [258:0x17ae98000] &lt;lgl&gt; \n‚îú‚îÄHICOV = [259:0x171aa0000] &lt;lgl&gt; \n‚îú‚îÄPRIVCOV = [260:0x31a128000] &lt;lgl&gt; \n‚îú‚îÄPUBCOV = [261:0x31a7c8000] &lt;lgl&gt; \n‚îú‚îÄFCITWP = [262:0x172140000] &lt;lgl&gt; \n‚îú‚îÄFDEARP = [263:0x316a08000] &lt;lgl&gt; \n‚îú‚îÄFDRATP = [264:0x13dff0000] &lt;lgl&gt; \n‚îú‚îÄFDRATXP = [265:0x13e690000] &lt;lgl&gt; \n‚îú‚îÄFHINS1P = [266:0x14b9f8000] &lt;lgl&gt; \n‚îú‚îÄFHINS2P = [267:0x14c098000] &lt;lgl&gt; \n‚îú‚îÄFHINS3P = [268:0x1182c0000] &lt;lgl&gt; \n‚îú‚îÄFHINS4P = [269:0x12cce0000] &lt;lgl&gt; \n‚îú‚îÄFHINS5P = [270:0x3170a8000] &lt;lgl&gt; \n‚îú‚îÄFHINS6P = [271:0x160d58000] &lt;lgl&gt; \n‚îú‚îÄFHINS7P = [272:0x17b538000] &lt;lgl&gt; \n‚îú‚îÄFMARHDP = [273:0x17bbd8000] &lt;lgl&gt; \n‚îú‚îÄFMARHMP = [274:0x17c278000] &lt;lgl&gt; \n‚îú‚îÄFMARHTP = [275:0x12d380000] &lt;lgl&gt; \n‚îú‚îÄFMARHWP = [276:0x12da20000] &lt;lgl&gt; \n‚îú‚îÄFMARHYP = [277:0x159d78000] &lt;lgl&gt; \n‚îú‚îÄWRK = [278:0x17c918000] &lt;lgl&gt; \n‚îú‚îÄFOD1P = [279:0x3b9a80000] &lt;chr&gt; \n‚îú‚îÄFOD2P = [280:0x3bb500000] &lt;chr&gt; \n‚îú‚îÄSCIENGP = [281:0x17cfb8000] &lt;lgl&gt; \n‚îú‚îÄSCIENGRLP = [282:0x17d658000] &lt;lgl&gt; \n‚îú‚îÄFFODP = [283:0x17dcf8000] &lt;lgl&gt; \n‚îú‚îÄFHINS3C = [284:0x3b48e8000] &lt;fct&gt; \n‚îú‚îÄFHINS4C = [285:0x3b5628000] &lt;fct&gt; \n‚îú‚îÄFHINS5C = [286:0x3b6368000] &lt;fct&gt; \n‚îú‚îÄRELP = [287:0x3bcf80000] &lt;chr&gt; \n‚îú‚îÄFWRKP = [288:0x317748000] &lt;lgl&gt; \n‚îú‚îÄFDISP = [289:0x320008000] &lt;lgl&gt; \n‚îú‚îÄFPERNP = [290:0x30b568000] &lt;lgl&gt; \n‚îú‚îÄFPINCP = [291:0x1613f8000] &lt;lgl&gt; \n‚îú‚îÄFPRIVCOVP = [292:0x17e398000] &lt;lgl&gt; \n‚îú‚îÄFPUBCOVP = [293:0x17ea38000] &lt;lgl&gt; \n‚îú‚îÄRACNH = [294:0x1727e0000] &lt;lgl&gt; \n‚îú‚îÄRACPI = [295:0x161a98000] &lt;lgl&gt; \n‚îú‚îÄSSPA = [296:0x3b70a8000] &lt;fct&gt; \n‚îú‚îÄMLPCD = [297:0x12e0c0000] &lt;lgl&gt; \n‚îú‚îÄMLPFG = [298:0x30bc08000] &lt;lgl&gt; \n‚îú‚îÄFHICOVP = [299:0x12e760000] &lt;lgl&gt; \n‚îú‚îÄDIVISION = [300:0x3c0008000] &lt;fct&gt; \n‚îú‚îÄREGION = [301:0x3c0d48000] &lt;fct&gt; \n‚îú‚îÄHIMRKS = [302:0x3c1a88000] &lt;fct&gt; \n‚îú‚îÄJWTRNS = [303:0x3bea00000] &lt;chr&gt; \n‚îú‚îÄRELSHIPP = [304:0x3c8d40000] &lt;chr&gt; \n‚îú‚îÄWKWN = [305:0x38a7c8000] &lt;int&gt; \n‚îú‚îÄFHIMRKSP = [306:0x31ae68000] &lt;lgl&gt; \n‚îú‚îÄFJWTRNSP = [307:0x14c738000] &lt;lgl&gt; \n‚îú‚îÄFRELSHIPP = [308:0x3206a8000] &lt;lgl&gt; \n‚îú‚îÄFWKWNP = [309:0x320d48000] &lt;lgl&gt; \n‚îú‚îÄMLPIK = [310:0x3213e8000] &lt;lgl&gt; \n‚îú‚îÄyear = [311:0x38b508000] &lt;int&gt; \n‚îú‚îÄlocation = [312:0x3ca7c0000] &lt;chr&gt; \n‚îú‚îÄage_groups = [313:0x349f00000] &lt;chr&gt; \n‚îú‚îÄins_type = [314:0x34b980000] &lt;chr&gt; \n‚îî‚îÄage_decade = [315:0x366a00000] &lt;dbl&gt; \n\n\n\n\nlobstr::ref(pums_nocopy)\n\n‚ñà [1:0x111cdb600] &lt;dt[,314]&gt; \n‚îú‚îÄSPORDER = [2:0x1189a0000] &lt;int&gt; \n‚îú‚îÄRT = [3:0x1196e0000] &lt;fct&gt; \n‚îú‚îÄSERIALNO = [4:0x115900000] &lt;chr&gt; \n‚îú‚îÄPUMA = [5:0x123000000] &lt;chr&gt; \n‚îú‚îÄST = [6:0x124a80000] &lt;chr&gt; \n‚îú‚îÄADJUST = [7:0x13f138000] &lt;int&gt; \n‚îú‚îÄPWGTP = [8:0x328008000] &lt;int&gt; \n‚îú‚îÄAGEP = [9:0x328d48000] &lt;int&gt; \n‚îú‚îÄCIT = [10:0x329a88000] &lt;fct&gt; \n‚îú‚îÄCOW = [11:0x32a7c8000] &lt;fct&gt; \n‚îú‚îÄDDRS = [12:0x1389d0000] &lt;lgl&gt; \n‚îú‚îÄDEYE = [13:0x160018000] &lt;lgl&gt; \n‚îú‚îÄDOUT = [14:0x178038000] &lt;lgl&gt; \n‚îú‚îÄDPHY = [15:0x1786d8000] &lt;lgl&gt; \n‚îú‚îÄDREM = [16:0x178d78000] &lt;lgl&gt; \n‚îú‚îÄDWRK = [17:0x128aa0000] &lt;lgl&gt; \n‚îú‚îÄENG = [18:0x32b508000] &lt;fct&gt; \n‚îú‚îÄFER = [19:0x129140000] &lt;lgl&gt; \n‚îú‚îÄGCL = [20:0x139070000] &lt;lgl&gt; \n‚îú‚îÄGCM = [21:0x32c248000] &lt;fct&gt; \n‚îú‚îÄGCR = [22:0x1498d8000] &lt;lgl&gt; \n‚îú‚îÄINTP = [23:0x32cf88000] &lt;int&gt; \n‚îú‚îÄJWMNP = [24:0x32dcc8000] &lt;int&gt; \n‚îú‚îÄJWRIP = [25:0x126500000] &lt;chr&gt; \n‚îú‚îÄJWTR = [26:0x133800000] &lt;chr&gt; \n‚îú‚îÄLANX = [27:0x149f78000] &lt;lgl&gt; \n‚îú‚îÄMAR = [28:0x32ea08000] &lt;fct&gt; \n‚îú‚îÄMIG = [29:0x14a618000] &lt;lgl&gt; \n‚îú‚îÄMIL = [30:0x32f748000] &lt;fct&gt; \n‚îú‚îÄMILY = [31:0x3306a8000] &lt;fct&gt; \n‚îú‚îÄMLPA = [32:0x310008000] &lt;lgl&gt; \n‚îú‚îÄMLPB = [33:0x1297e0000] &lt;lgl&gt; \n‚îú‚îÄMLPC = [34:0x139710000] &lt;lgl&gt; \n‚îú‚îÄMLPD = [35:0x139db0000] &lt;lgl&gt; \n‚îú‚îÄMLPE = [36:0x300018000] &lt;lgl&gt; \n‚îú‚îÄMLPF = [37:0x3006b8000] &lt;lgl&gt; \n‚îú‚îÄMLPG = [38:0x300d58000] &lt;lgl&gt; \n‚îú‚îÄMLPH = [39:0x14acb8000] &lt;lgl&gt; \n‚îú‚îÄMLPI = [40:0x13a450000] &lt;lgl&gt; \n‚îú‚îÄMLPJ = [41:0x13aaf0000] &lt;lgl&gt; \n‚îú‚îÄMLPK = [42:0x13b190000] &lt;lgl&gt; \n‚îú‚îÄNWAB = [43:0x13b830000] &lt;lgl&gt; \n‚îú‚îÄNWAV = [44:0x3313e8000] &lt;fct&gt; \n‚îú‚îÄNWLA = [45:0x13bed0000] &lt;lgl&gt; \n‚îú‚îÄNWLK = [46:0x13c570000] &lt;lgl&gt; \n‚îú‚îÄNWRE = [47:0x1582f8000] &lt;lgl&gt; \n‚îú‚îÄOIP = [48:0x332128000] &lt;int&gt; \n‚îú‚îÄPAP = [49:0x332e68000] &lt;int&gt; \n‚îú‚îÄREL = [50:0x135280000] &lt;chr&gt; \n‚îú‚îÄRETP = [51:0x152f70000] &lt;int&gt; \n‚îú‚îÄSCH = [52:0x129e80000] &lt;lgl&gt; \n‚îú‚îÄSCHG = [53:0x136d00000] &lt;chr&gt; \n‚îú‚îÄSCHL = [54:0x168000000] &lt;chr&gt; \n‚îú‚îÄSEMP = [55:0x153cb0000] &lt;int&gt; \n‚îú‚îÄSEX = [56:0x1549f0000] &lt;fct&gt; \n‚îú‚îÄSSIP = [57:0x155730000] &lt;int&gt; \n‚îú‚îÄSSP = [58:0x156470000] &lt;int&gt; \n‚îú‚îÄWAGP = [59:0x1571b0000] &lt;int&gt; \n‚îú‚îÄWKHP = [60:0x338008000] &lt;int&gt; \n‚îú‚îÄWKL = [61:0x338d48000] &lt;fct&gt; \n‚îú‚îÄWKW = [62:0x339a88000] &lt;fct&gt; \n‚îú‚îÄYOEP = [63:0x16f08c000] &lt;chr&gt; \n‚îú‚îÄUWRK = [64:0x12a520000] &lt;lgl&gt; \n‚îú‚îÄANC = [65:0x33a7c8000] &lt;fct&gt; \n‚îú‚îÄANC1P = [66:0x340d40000] &lt;chr&gt; \n‚îú‚îÄANC2P = [67:0x3427c0000] &lt;chr&gt; \n‚îú‚îÄDECADE = [68:0x11a528000] &lt;fct&gt; \n‚îú‚îÄDRIVESP = [69:0x11b268000] &lt;fct&gt; \n‚îú‚îÄDS = [70:0x179418000] &lt;lgl&gt; \n‚îú‚îÄESP = [71:0x11bfa8000] &lt;fct&gt; \n‚îú‚îÄESR = [72:0x11cce8000] &lt;fct&gt; \n‚îú‚îÄHISP = [73:0x344240000] &lt;chr&gt; \n‚îú‚îÄINDP = [74:0x345cc0000] &lt;chr&gt; \n‚îú‚îÄJWAP = [75:0x347740000] &lt;chr&gt; \n‚îú‚îÄJWDP = [76:0x3491c0000] &lt;chr&gt; \n‚îú‚îÄLANP = [77:0x34ac40000] &lt;chr&gt; \n‚îú‚îÄMIGPUMA = [78:0x12f008000] &lt;fct&gt; \n‚îú‚îÄMIGSP = [79:0x34c6c0000] &lt;chr&gt; \n‚îú‚îÄMSP = [80:0x33b508000] &lt;fct&gt; \n‚îú‚îÄNAICSP = [81:0x34e140000] &lt;chr&gt; \n‚îú‚îÄNATIVITY = [82:0x14cdd8000] &lt;fct&gt; \n‚îú‚îÄOC = [83:0x150110000] &lt;lgl&gt; \n‚îú‚îÄOCCP = [84:0x34fbc0000] &lt;chr&gt; \n‚îú‚îÄPAOC = [85:0x358008000] &lt;fct&gt; \n‚îú‚îÄPERNP = [86:0x358d48000] &lt;int&gt; \n‚îú‚îÄPINCP = [87:0x359a88000] &lt;int&gt; \n‚îú‚îÄPOBP = [88:0x351640000] &lt;chr&gt; \n‚îú‚îÄPOVPIP = [89:0x35a7c8000] &lt;int&gt; \n‚îú‚îÄPOWPUMA = [90:0x35b508000] &lt;fct&gt; \n‚îú‚îÄPOWSP = [91:0x3530c0000] &lt;chr&gt; \n‚îú‚îÄQTRBIR = [92:0x35c248000] &lt;fct&gt; \n‚îú‚îÄRAC1P = [93:0x35cf88000] &lt;fct&gt; \n‚îú‚îÄRAC2P = [94:0x354b40000] &lt;chr&gt; \n‚îú‚îÄRAC3P = [95:0x3565c0000] &lt;chr&gt; \n‚îú‚îÄRACAIAN = [96:0x1507b0000] &lt;lgl&gt; \n‚îú‚îÄRACASN = [97:0x150e50000] &lt;lgl&gt; \n‚îú‚îÄRACBLK = [98:0x1514f0000] &lt;lgl&gt; \n‚îú‚îÄRACNHPI = [99:0x12abc0000] &lt;lgl&gt; \n‚îú‚îÄRACNUM = [100:0x14db18000] &lt;int&gt; \n‚îú‚îÄRACSOR = [101:0x13cc10000] &lt;lgl&gt; \n‚îú‚îÄRACWHT = [102:0x151b90000] &lt;lgl&gt; \n‚îú‚îÄRC = [103:0x1606b8000] &lt;lgl&gt; \n‚îú‚îÄSFN = [104:0x14e858000] &lt;fct&gt; \n‚îú‚îÄSFR = [105:0x14f598000] &lt;fct&gt; \n‚îú‚îÄSOCP = [106:0x360d40000] &lt;chr&gt; \n‚îú‚îÄVPS = [107:0x3627c0000] &lt;chr&gt; \n‚îú‚îÄWAOB = [108:0x35dcc8000] &lt;fct&gt; \n‚îú‚îÄFAGEP = [109:0x3013f8000] &lt;lgl&gt; \n‚îú‚îÄFANCP = [110:0x3106a8000] &lt;lgl&gt; \n‚îú‚îÄFCITP = [111:0x13d2b0000] &lt;lgl&gt; \n‚îú‚îÄFCOWP = [112:0x310d48000] &lt;lgl&gt; \n‚îú‚îÄFDDRSP = [113:0x3113e8000] &lt;lgl&gt; \n‚îú‚îÄFDEYEP = [114:0x179ab8000] &lt;lgl&gt; \n‚îú‚îÄFDOUTP = [115:0x301a98000] &lt;lgl&gt; \n‚îú‚îÄFDPHYP = [116:0x158998000] &lt;lgl&gt; \n‚îú‚îÄFDREMP = [117:0x311a88000] &lt;lgl&gt; \n‚îú‚îÄFDWRKP = [118:0x302138000] &lt;lgl&gt; \n‚îú‚îÄFENGP = [119:0x308068000] &lt;lgl&gt; \n‚îú‚îÄFESRP = [120:0x3027d8000] &lt;lgl&gt; \n‚îú‚îÄFFERP = [121:0x308708000] &lt;lgl&gt; \n‚îú‚îÄFGCLP = [122:0x12b260000] &lt;lgl&gt; \n‚îú‚îÄFGCMP = [123:0x302e78000] &lt;lgl&gt; \n‚îú‚îÄFGCRP = [124:0x312128000] &lt;lgl&gt; \n‚îú‚îÄFHISP = [125:0x3127c8000] &lt;lgl&gt; \n‚îú‚îÄFINDP = [126:0x303518000] &lt;lgl&gt; \n‚îú‚îÄFINTP = [127:0x303bb8000] &lt;lgl&gt; \n‚îú‚îÄFJWDP = [128:0x12b900000] &lt;lgl&gt; \n‚îú‚îÄFJWMNP = [129:0x312e68000] &lt;lgl&gt; \n‚îú‚îÄFJWRIP = [130:0x152230000] &lt;lgl&gt; \n‚îú‚îÄFJWTRP = [131:0x1528d0000] &lt;lgl&gt; \n‚îú‚îÄFLANP = [132:0x313508000] &lt;lgl&gt; \n‚îú‚îÄFLANXP = [133:0x313ba8000] &lt;lgl&gt; \n‚îú‚îÄFMARP = [134:0x14b358000] &lt;lgl&gt; \n‚îú‚îÄFMIGP = [135:0x170020000] &lt;lgl&gt; \n‚îú‚îÄFMIGSP = [136:0x308da8000] &lt;lgl&gt; \n‚îú‚îÄFMILPP = [137:0x12bfa0000] &lt;lgl&gt; \n‚îú‚îÄFMILSP = [138:0x309448000] &lt;lgl&gt; \n‚îú‚îÄFMILYP = [139:0x1706c0000] &lt;lgl&gt; \n‚îú‚îÄFOCCP = [140:0x309ae8000] &lt;lgl&gt; \n‚îú‚îÄFOIP = [141:0x304258000] &lt;lgl&gt; \n‚îú‚îÄFPAP = [142:0x3048f8000] &lt;lgl&gt; \n‚îú‚îÄFPOBP = [143:0x159038000] &lt;lgl&gt; \n‚îú‚îÄFPOWSP = [144:0x12c640000] &lt;lgl&gt; \n‚îú‚îÄFRACP = [145:0x30a188000] &lt;lgl&gt; \n‚îú‚îÄFRELP = [146:0x30a828000] &lt;lgl&gt; \n‚îú‚îÄFRETP = [147:0x304f98000] &lt;lgl&gt; \n‚îú‚îÄFSCHGP = [148:0x305638000] &lt;lgl&gt; \n‚îú‚îÄFSCHLP = [149:0x17a158000] &lt;lgl&gt; \n‚îú‚îÄFSCHP = [150:0x17a7f8000] &lt;lgl&gt; \n‚îú‚îÄFSEMP = [151:0x314248000] &lt;lgl&gt; \n‚îú‚îÄFSEXP = [152:0x3148e8000] &lt;lgl&gt; \n‚îú‚îÄFSSIP = [153:0x314f88000] &lt;lgl&gt; \n‚îú‚îÄFSSP = [154:0x315628000] &lt;lgl&gt; \n‚îú‚îÄFWAGP = [155:0x315cc8000] &lt;lgl&gt; \n‚îú‚îÄFWKHP = [156:0x316368000] &lt;lgl&gt; \n‚îú‚îÄFWKLP = [157:0x170d60000] &lt;lgl&gt; \n‚îú‚îÄFWKWP = [158:0x171400000] &lt;lgl&gt; \n‚îú‚îÄFYOEP = [159:0x30aec8000] &lt;lgl&gt; \n‚îú‚îÄPWGTP1 = [160:0x35ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP2 = [161:0x35f748000] &lt;int&gt; \n‚îú‚îÄPWGTP3 = [162:0x3706a8000] &lt;int&gt; \n‚îú‚îÄPWGTP4 = [163:0x3713e8000] &lt;int&gt; \n‚îú‚îÄPWGTP5 = [164:0x372128000] &lt;int&gt; \n‚îú‚îÄPWGTP6 = [165:0x372e68000] &lt;int&gt; \n‚îú‚îÄPWGTP7 = [166:0x373ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP8 = [167:0x3748e8000] &lt;int&gt; \n‚îú‚îÄPWGTP9 = [168:0x375628000] &lt;int&gt; \n‚îú‚îÄPWGTP10 = [169:0x376368000] &lt;int&gt; \n‚îú‚îÄPWGTP11 = [170:0x3770a8000] &lt;int&gt; \n‚îú‚îÄPWGTP12 = [171:0x378008000] &lt;int&gt; \n‚îú‚îÄPWGTP13 = [172:0x378d48000] &lt;int&gt; \n‚îú‚îÄPWGTP14 = [173:0x379a88000] &lt;int&gt; \n‚îú‚îÄPWGTP15 = [174:0x37a7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP16 = [175:0x37b508000] &lt;int&gt; \n‚îú‚îÄPWGTP17 = [176:0x37c248000] &lt;int&gt; \n‚îú‚îÄPWGTP18 = [177:0x37cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP19 = [178:0x37dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP20 = [179:0x37ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP21 = [180:0x37f748000] &lt;int&gt; \n‚îú‚îÄPWGTP22 = [181:0x3806a8000] &lt;int&gt; \n‚îú‚îÄPWGTP23 = [182:0x3813e8000] &lt;int&gt; \n‚îú‚îÄPWGTP24 = [183:0x382128000] &lt;int&gt; \n‚îú‚îÄPWGTP25 = [184:0x382e68000] &lt;int&gt; \n‚îú‚îÄPWGTP26 = [185:0x383ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP27 = [186:0x3848e8000] &lt;int&gt; \n‚îú‚îÄPWGTP28 = [187:0x385628000] &lt;int&gt; \n‚îú‚îÄPWGTP29 = [188:0x386368000] &lt;int&gt; \n‚îú‚îÄPWGTP30 = [189:0x3870a8000] &lt;int&gt; \n‚îú‚îÄPWGTP31 = [190:0x388008000] &lt;int&gt; \n‚îú‚îÄPWGTP32 = [191:0x388d48000] &lt;int&gt; \n‚îú‚îÄPWGTP33 = [192:0x389a88000] &lt;int&gt; \n‚îú‚îÄPWGTP34 = [193:0x33c248000] &lt;int&gt; \n‚îú‚îÄPWGTP35 = [194:0x33cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP36 = [195:0x33dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP37 = [196:0x33ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP38 = [197:0x33f748000] &lt;int&gt; \n‚îú‚îÄPWGTP39 = [198:0x3906a8000] &lt;int&gt; \n‚îú‚îÄPWGTP40 = [199:0x3913e8000] &lt;int&gt; \n‚îú‚îÄPWGTP41 = [200:0x392128000] &lt;int&gt; \n‚îú‚îÄPWGTP42 = [201:0x392e68000] &lt;int&gt; \n‚îú‚îÄPWGTP43 = [202:0x393ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP44 = [203:0x3948e8000] &lt;int&gt; \n‚îú‚îÄPWGTP45 = [204:0x395628000] &lt;int&gt; \n‚îú‚îÄPWGTP46 = [205:0x396368000] &lt;int&gt; \n‚îú‚îÄPWGTP47 = [206:0x3970a8000] &lt;int&gt; \n‚îú‚îÄPWGTP48 = [207:0x398008000] &lt;int&gt; \n‚îú‚îÄPWGTP49 = [208:0x398d48000] &lt;int&gt; \n‚îú‚îÄPWGTP50 = [209:0x399a88000] &lt;int&gt; \n‚îú‚îÄPWGTP51 = [210:0x39a7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP52 = [211:0x39b508000] &lt;int&gt; \n‚îú‚îÄPWGTP53 = [212:0x39c248000] &lt;int&gt; \n‚îú‚îÄPWGTP54 = [213:0x39cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP55 = [214:0x39dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP56 = [215:0x39ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP57 = [216:0x11da28000] &lt;int&gt; \n‚îú‚îÄPWGTP58 = [217:0x11e768000] &lt;int&gt; \n‚îú‚îÄPWGTP59 = [218:0x11f4a8000] &lt;int&gt; \n‚îú‚îÄPWGTP60 = [219:0x3a06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP61 = [220:0x3a13e8000] &lt;int&gt; \n‚îú‚îÄPWGTP62 = [221:0x3a2128000] &lt;int&gt; \n‚îú‚îÄPWGTP63 = [222:0x3a2e68000] &lt;int&gt; \n‚îú‚îÄPWGTP64 = [223:0x3a3ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP65 = [224:0x3a48e8000] &lt;int&gt; \n‚îú‚îÄPWGTP66 = [225:0x3a5628000] &lt;int&gt; \n‚îú‚îÄPWGTP67 = [226:0x3a6368000] &lt;int&gt; \n‚îú‚îÄPWGTP68 = [227:0x3a70a8000] &lt;int&gt; \n‚îú‚îÄPWGTP69 = [228:0x3a8008000] &lt;int&gt; \n‚îú‚îÄPWGTP70 = [229:0x3a8d48000] &lt;int&gt; \n‚îú‚îÄPWGTP71 = [230:0x3a9a88000] &lt;int&gt; \n‚îú‚îÄPWGTP72 = [231:0x3aa7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP73 = [232:0x3ab508000] &lt;int&gt; \n‚îú‚îÄPWGTP74 = [233:0x3ac248000] &lt;int&gt; \n‚îú‚îÄPWGTP75 = [234:0x3acf88000] &lt;int&gt; \n‚îú‚îÄPWGTP76 = [235:0x3adcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP77 = [236:0x3aea08000] &lt;int&gt; \n‚îú‚îÄPWGTP78 = [237:0x3af748000] &lt;int&gt; \n‚îú‚îÄPWGTP79 = [238:0x3b06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP80 = [239:0x3b13e8000] &lt;int&gt; \n‚îú‚îÄNOP = [240:0x3b2128000] &lt;fct&gt; \n‚îú‚îÄADJINC = [241:0x364240000] &lt;dbl&gt; \n‚îú‚îÄCITWP = [242:0x365cc0000] &lt;chr&gt; \n‚îú‚îÄDEAR = [243:0x13d950000] &lt;lgl&gt; \n‚îú‚îÄDRAT = [244:0x3b2e68000] &lt;fct&gt; \n‚îú‚îÄDRATX = [245:0x1596d8000] &lt;lgl&gt; \n‚îú‚îÄHINS1 = [246:0x305cd8000] &lt;lgl&gt; \n‚îú‚îÄHINS2 = [247:0x306378000] &lt;lgl&gt; \n‚îú‚îÄHINS3 = [248:0x306a18000] &lt;lgl&gt; \n‚îú‚îÄHINS4 = [249:0x3070b8000] &lt;lgl&gt; \n‚îú‚îÄHINS5 = [250:0x307758000] &lt;lgl&gt; \n‚îú‚îÄHINS6 = [251:0x318008000] &lt;lgl&gt; \n‚îú‚îÄHINS7 = [252:0x3186a8000] &lt;lgl&gt; \n‚îú‚îÄMARHD = [253:0x318d48000] &lt;lgl&gt; \n‚îú‚îÄMARHM = [254:0x3193e8000] &lt;lgl&gt; \n‚îú‚îÄMARHT = [255:0x3b3ba8000] &lt;fct&gt; \n‚îú‚îÄMARHW = [256:0x319a88000] &lt;lgl&gt; \n‚îú‚îÄMARHYP = [257:0x3b8000000] &lt;chr&gt; \n‚îú‚îÄDIS = [258:0x17ae98000] &lt;lgl&gt; \n‚îú‚îÄHICOV = [259:0x171aa0000] &lt;lgl&gt; \n‚îú‚îÄPRIVCOV = [260:0x31a128000] &lt;lgl&gt; \n‚îú‚îÄPUBCOV = [261:0x31a7c8000] &lt;lgl&gt; \n‚îú‚îÄFCITWP = [262:0x172140000] &lt;lgl&gt; \n‚îú‚îÄFDEARP = [263:0x316a08000] &lt;lgl&gt; \n‚îú‚îÄFDRATP = [264:0x13dff0000] &lt;lgl&gt; \n‚îú‚îÄFDRATXP = [265:0x13e690000] &lt;lgl&gt; \n‚îú‚îÄFHINS1P = [266:0x14b9f8000] &lt;lgl&gt; \n‚îú‚îÄFHINS2P = [267:0x14c098000] &lt;lgl&gt; \n‚îú‚îÄFHINS3P = [268:0x1182c0000] &lt;lgl&gt; \n‚îú‚îÄFHINS4P = [269:0x12cce0000] &lt;lgl&gt; \n‚îú‚îÄFHINS5P = [270:0x3170a8000] &lt;lgl&gt; \n‚îú‚îÄFHINS6P = [271:0x160d58000] &lt;lgl&gt; \n‚îú‚îÄFHINS7P = [272:0x17b538000] &lt;lgl&gt; \n‚îú‚îÄFMARHDP = [273:0x17bbd8000] &lt;lgl&gt; \n‚îú‚îÄFMARHMP = [274:0x17c278000] &lt;lgl&gt; \n‚îú‚îÄFMARHTP = [275:0x12d380000] &lt;lgl&gt; \n‚îú‚îÄFMARHWP = [276:0x12da20000] &lt;lgl&gt; \n‚îú‚îÄFMARHYP = [277:0x159d78000] &lt;lgl&gt; \n‚îú‚îÄWRK = [278:0x17c918000] &lt;lgl&gt; \n‚îú‚îÄFOD1P = [279:0x3b9a80000] &lt;chr&gt; \n‚îú‚îÄFOD2P = [280:0x3bb500000] &lt;chr&gt; \n‚îú‚îÄSCIENGP = [281:0x17cfb8000] &lt;lgl&gt; \n‚îú‚îÄSCIENGRLP = [282:0x17d658000] &lt;lgl&gt; \n‚îú‚îÄFFODP = [283:0x17dcf8000] &lt;lgl&gt; \n‚îú‚îÄFHINS3C = [284:0x3b48e8000] &lt;fct&gt; \n‚îú‚îÄFHINS4C = [285:0x3b5628000] &lt;fct&gt; \n‚îú‚îÄFHINS5C = [286:0x3b6368000] &lt;fct&gt; \n‚îú‚îÄRELP = [287:0x3bcf80000] &lt;chr&gt; \n‚îú‚îÄFWRKP = [288:0x317748000] &lt;lgl&gt; \n‚îú‚îÄFDISP = [289:0x320008000] &lt;lgl&gt; \n‚îú‚îÄFPERNP = [290:0x30b568000] &lt;lgl&gt; \n‚îú‚îÄFPINCP = [291:0x1613f8000] &lt;lgl&gt; \n‚îú‚îÄFPRIVCOVP = [292:0x17e398000] &lt;lgl&gt; \n‚îú‚îÄFPUBCOVP = [293:0x17ea38000] &lt;lgl&gt; \n‚îú‚îÄRACNH = [294:0x1727e0000] &lt;lgl&gt; \n‚îú‚îÄRACPI = [295:0x161a98000] &lt;lgl&gt; \n‚îú‚îÄSSPA = [296:0x3b70a8000] &lt;fct&gt; \n‚îú‚îÄMLPCD = [297:0x12e0c0000] &lt;lgl&gt; \n‚îú‚îÄMLPFG = [298:0x30bc08000] &lt;lgl&gt; \n‚îú‚îÄFHICOVP = [299:0x12e760000] &lt;lgl&gt; \n‚îú‚îÄDIVISION = [300:0x3c0008000] &lt;fct&gt; \n‚îú‚îÄREGION = [301:0x3c0d48000] &lt;fct&gt; \n‚îú‚îÄHIMRKS = [302:0x3c1a88000] &lt;fct&gt; \n‚îú‚îÄJWTRNS = [303:0x3bea00000] &lt;chr&gt; \n‚îú‚îÄRELSHIPP = [304:0x3c8d40000] &lt;chr&gt; \n‚îú‚îÄWKWN = [305:0x38a7c8000] &lt;int&gt; \n‚îú‚îÄFHIMRKSP = [306:0x31ae68000] &lt;lgl&gt; \n‚îú‚îÄFJWTRNSP = [307:0x14c738000] &lt;lgl&gt; \n‚îú‚îÄFRELSHIPP = [308:0x3206a8000] &lt;lgl&gt; \n‚îú‚îÄFWKWNP = [309:0x320d48000] &lt;lgl&gt; \n‚îú‚îÄMLPIK = [310:0x3213e8000] &lt;lgl&gt; \n‚îú‚îÄyear = [311:0x38b508000] &lt;int&gt; \n‚îú‚îÄlocation = [312:0x3ca7c0000] &lt;chr&gt; \n‚îú‚îÄage_groups = [313:0x349f00000] &lt;chr&gt; \n‚îú‚îÄins_type = [314:0x34b980000] &lt;chr&gt; \n‚îî‚îÄage_decade = [315:0x366a00000] &lt;dbl&gt;"
  },
  {
    "objectID": "materials/slides/02-datatable.html#memory-efficient-1",
    "href": "materials/slides/02-datatable.html#memory-efficient-1",
    "title": "data.table",
    "section": "3. Memory Efficient",
    "text": "3. Memory Efficient\nModify by reference - no copies\n\n# Deep Copy (full dataset copied)\npums_copy &lt;- copy(pums)\n\n# adding variable to this does not alter the original\npums_copy[, age_decade := floor(AGEP / 10) * 10]\n\n\n\n\n\nlobstr::ref(pums)\n\n‚ñà [1:0x111cdb600] &lt;dt[,314]&gt; \n‚îú‚îÄSPORDER = [2:0x1189a0000] &lt;int&gt; \n‚îú‚îÄRT = [3:0x1196e0000] &lt;fct&gt; \n‚îú‚îÄSERIALNO = [4:0x115900000] &lt;chr&gt; \n‚îú‚îÄPUMA = [5:0x123000000] &lt;chr&gt; \n‚îú‚îÄST = [6:0x124a80000] &lt;chr&gt; \n‚îú‚îÄADJUST = [7:0x13f138000] &lt;int&gt; \n‚îú‚îÄPWGTP = [8:0x328008000] &lt;int&gt; \n‚îú‚îÄAGEP = [9:0x328d48000] &lt;int&gt; \n‚îú‚îÄCIT = [10:0x329a88000] &lt;fct&gt; \n‚îú‚îÄCOW = [11:0x32a7c8000] &lt;fct&gt; \n‚îú‚îÄDDRS = [12:0x1389d0000] &lt;lgl&gt; \n‚îú‚îÄDEYE = [13:0x160018000] &lt;lgl&gt; \n‚îú‚îÄDOUT = [14:0x178038000] &lt;lgl&gt; \n‚îú‚îÄDPHY = [15:0x1786d8000] &lt;lgl&gt; \n‚îú‚îÄDREM = [16:0x178d78000] &lt;lgl&gt; \n‚îú‚îÄDWRK = [17:0x128aa0000] &lt;lgl&gt; \n‚îú‚îÄENG = [18:0x32b508000] &lt;fct&gt; \n‚îú‚îÄFER = [19:0x129140000] &lt;lgl&gt; \n‚îú‚îÄGCL = [20:0x139070000] &lt;lgl&gt; \n‚îú‚îÄGCM = [21:0x32c248000] &lt;fct&gt; \n‚îú‚îÄGCR = [22:0x1498d8000] &lt;lgl&gt; \n‚îú‚îÄINTP = [23:0x32cf88000] &lt;int&gt; \n‚îú‚îÄJWMNP = [24:0x32dcc8000] &lt;int&gt; \n‚îú‚îÄJWRIP = [25:0x126500000] &lt;chr&gt; \n‚îú‚îÄJWTR = [26:0x133800000] &lt;chr&gt; \n‚îú‚îÄLANX = [27:0x149f78000] &lt;lgl&gt; \n‚îú‚îÄMAR = [28:0x32ea08000] &lt;fct&gt; \n‚îú‚îÄMIG = [29:0x14a618000] &lt;lgl&gt; \n‚îú‚îÄMIL = [30:0x32f748000] &lt;fct&gt; \n‚îú‚îÄMILY = [31:0x3306a8000] &lt;fct&gt; \n‚îú‚îÄMLPA = [32:0x310008000] &lt;lgl&gt; \n‚îú‚îÄMLPB = [33:0x1297e0000] &lt;lgl&gt; \n‚îú‚îÄMLPC = [34:0x139710000] &lt;lgl&gt; \n‚îú‚îÄMLPD = [35:0x139db0000] &lt;lgl&gt; \n‚îú‚îÄMLPE = [36:0x300018000] &lt;lgl&gt; \n‚îú‚îÄMLPF = [37:0x3006b8000] &lt;lgl&gt; \n‚îú‚îÄMLPG = [38:0x300d58000] &lt;lgl&gt; \n‚îú‚îÄMLPH = [39:0x14acb8000] &lt;lgl&gt; \n‚îú‚îÄMLPI = [40:0x13a450000] &lt;lgl&gt; \n‚îú‚îÄMLPJ = [41:0x13aaf0000] &lt;lgl&gt; \n‚îú‚îÄMLPK = [42:0x13b190000] &lt;lgl&gt; \n‚îú‚îÄNWAB = [43:0x13b830000] &lt;lgl&gt; \n‚îú‚îÄNWAV = [44:0x3313e8000] &lt;fct&gt; \n‚îú‚îÄNWLA = [45:0x13bed0000] &lt;lgl&gt; \n‚îú‚îÄNWLK = [46:0x13c570000] &lt;lgl&gt; \n‚îú‚îÄNWRE = [47:0x1582f8000] &lt;lgl&gt; \n‚îú‚îÄOIP = [48:0x332128000] &lt;int&gt; \n‚îú‚îÄPAP = [49:0x332e68000] &lt;int&gt; \n‚îú‚îÄREL = [50:0x135280000] &lt;chr&gt; \n‚îú‚îÄRETP = [51:0x152f70000] &lt;int&gt; \n‚îú‚îÄSCH = [52:0x129e80000] &lt;lgl&gt; \n‚îú‚îÄSCHG = [53:0x136d00000] &lt;chr&gt; \n‚îú‚îÄSCHL = [54:0x168000000] &lt;chr&gt; \n‚îú‚îÄSEMP = [55:0x153cb0000] &lt;int&gt; \n‚îú‚îÄSEX = [56:0x1549f0000] &lt;fct&gt; \n‚îú‚îÄSSIP = [57:0x155730000] &lt;int&gt; \n‚îú‚îÄSSP = [58:0x156470000] &lt;int&gt; \n‚îú‚îÄWAGP = [59:0x1571b0000] &lt;int&gt; \n‚îú‚îÄWKHP = [60:0x338008000] &lt;int&gt; \n‚îú‚îÄWKL = [61:0x338d48000] &lt;fct&gt; \n‚îú‚îÄWKW = [62:0x339a88000] &lt;fct&gt; \n‚îú‚îÄYOEP = [63:0x16f08c000] &lt;chr&gt; \n‚îú‚îÄUWRK = [64:0x12a520000] &lt;lgl&gt; \n‚îú‚îÄANC = [65:0x33a7c8000] &lt;fct&gt; \n‚îú‚îÄANC1P = [66:0x340d40000] &lt;chr&gt; \n‚îú‚îÄANC2P = [67:0x3427c0000] &lt;chr&gt; \n‚îú‚îÄDECADE = [68:0x11a528000] &lt;fct&gt; \n‚îú‚îÄDRIVESP = [69:0x11b268000] &lt;fct&gt; \n‚îú‚îÄDS = [70:0x179418000] &lt;lgl&gt; \n‚îú‚îÄESP = [71:0x11bfa8000] &lt;fct&gt; \n‚îú‚îÄESR = [72:0x11cce8000] &lt;fct&gt; \n‚îú‚îÄHISP = [73:0x344240000] &lt;chr&gt; \n‚îú‚îÄINDP = [74:0x345cc0000] &lt;chr&gt; \n‚îú‚îÄJWAP = [75:0x347740000] &lt;chr&gt; \n‚îú‚îÄJWDP = [76:0x3491c0000] &lt;chr&gt; \n‚îú‚îÄLANP = [77:0x34ac40000] &lt;chr&gt; \n‚îú‚îÄMIGPUMA = [78:0x12f008000] &lt;fct&gt; \n‚îú‚îÄMIGSP = [79:0x34c6c0000] &lt;chr&gt; \n‚îú‚îÄMSP = [80:0x33b508000] &lt;fct&gt; \n‚îú‚îÄNAICSP = [81:0x34e140000] &lt;chr&gt; \n‚îú‚îÄNATIVITY = [82:0x14cdd8000] &lt;fct&gt; \n‚îú‚îÄOC = [83:0x150110000] &lt;lgl&gt; \n‚îú‚îÄOCCP = [84:0x34fbc0000] &lt;chr&gt; \n‚îú‚îÄPAOC = [85:0x358008000] &lt;fct&gt; \n‚îú‚îÄPERNP = [86:0x358d48000] &lt;int&gt; \n‚îú‚îÄPINCP = [87:0x359a88000] &lt;int&gt; \n‚îú‚îÄPOBP = [88:0x351640000] &lt;chr&gt; \n‚îú‚îÄPOVPIP = [89:0x35a7c8000] &lt;int&gt; \n‚îú‚îÄPOWPUMA = [90:0x35b508000] &lt;fct&gt; \n‚îú‚îÄPOWSP = [91:0x3530c0000] &lt;chr&gt; \n‚îú‚îÄQTRBIR = [92:0x35c248000] &lt;fct&gt; \n‚îú‚îÄRAC1P = [93:0x35cf88000] &lt;fct&gt; \n‚îú‚îÄRAC2P = [94:0x354b40000] &lt;chr&gt; \n‚îú‚îÄRAC3P = [95:0x3565c0000] &lt;chr&gt; \n‚îú‚îÄRACAIAN = [96:0x1507b0000] &lt;lgl&gt; \n‚îú‚îÄRACASN = [97:0x150e50000] &lt;lgl&gt; \n‚îú‚îÄRACBLK = [98:0x1514f0000] &lt;lgl&gt; \n‚îú‚îÄRACNHPI = [99:0x12abc0000] &lt;lgl&gt; \n‚îú‚îÄRACNUM = [100:0x14db18000] &lt;int&gt; \n‚îú‚îÄRACSOR = [101:0x13cc10000] &lt;lgl&gt; \n‚îú‚îÄRACWHT = [102:0x151b90000] &lt;lgl&gt; \n‚îú‚îÄRC = [103:0x1606b8000] &lt;lgl&gt; \n‚îú‚îÄSFN = [104:0x14e858000] &lt;fct&gt; \n‚îú‚îÄSFR = [105:0x14f598000] &lt;fct&gt; \n‚îú‚îÄSOCP = [106:0x360d40000] &lt;chr&gt; \n‚îú‚îÄVPS = [107:0x3627c0000] &lt;chr&gt; \n‚îú‚îÄWAOB = [108:0x35dcc8000] &lt;fct&gt; \n‚îú‚îÄFAGEP = [109:0x3013f8000] &lt;lgl&gt; \n‚îú‚îÄFANCP = [110:0x3106a8000] &lt;lgl&gt; \n‚îú‚îÄFCITP = [111:0x13d2b0000] &lt;lgl&gt; \n‚îú‚îÄFCOWP = [112:0x310d48000] &lt;lgl&gt; \n‚îú‚îÄFDDRSP = [113:0x3113e8000] &lt;lgl&gt; \n‚îú‚îÄFDEYEP = [114:0x179ab8000] &lt;lgl&gt; \n‚îú‚îÄFDOUTP = [115:0x301a98000] &lt;lgl&gt; \n‚îú‚îÄFDPHYP = [116:0x158998000] &lt;lgl&gt; \n‚îú‚îÄFDREMP = [117:0x311a88000] &lt;lgl&gt; \n‚îú‚îÄFDWRKP = [118:0x302138000] &lt;lgl&gt; \n‚îú‚îÄFENGP = [119:0x308068000] &lt;lgl&gt; \n‚îú‚îÄFESRP = [120:0x3027d8000] &lt;lgl&gt; \n‚îú‚îÄFFERP = [121:0x308708000] &lt;lgl&gt; \n‚îú‚îÄFGCLP = [122:0x12b260000] &lt;lgl&gt; \n‚îú‚îÄFGCMP = [123:0x302e78000] &lt;lgl&gt; \n‚îú‚îÄFGCRP = [124:0x312128000] &lt;lgl&gt; \n‚îú‚îÄFHISP = [125:0x3127c8000] &lt;lgl&gt; \n‚îú‚îÄFINDP = [126:0x303518000] &lt;lgl&gt; \n‚îú‚îÄFINTP = [127:0x303bb8000] &lt;lgl&gt; \n‚îú‚îÄFJWDP = [128:0x12b900000] &lt;lgl&gt; \n‚îú‚îÄFJWMNP = [129:0x312e68000] &lt;lgl&gt; \n‚îú‚îÄFJWRIP = [130:0x152230000] &lt;lgl&gt; \n‚îú‚îÄFJWTRP = [131:0x1528d0000] &lt;lgl&gt; \n‚îú‚îÄFLANP = [132:0x313508000] &lt;lgl&gt; \n‚îú‚îÄFLANXP = [133:0x313ba8000] &lt;lgl&gt; \n‚îú‚îÄFMARP = [134:0x14b358000] &lt;lgl&gt; \n‚îú‚îÄFMIGP = [135:0x170020000] &lt;lgl&gt; \n‚îú‚îÄFMIGSP = [136:0x308da8000] &lt;lgl&gt; \n‚îú‚îÄFMILPP = [137:0x12bfa0000] &lt;lgl&gt; \n‚îú‚îÄFMILSP = [138:0x309448000] &lt;lgl&gt; \n‚îú‚îÄFMILYP = [139:0x1706c0000] &lt;lgl&gt; \n‚îú‚îÄFOCCP = [140:0x309ae8000] &lt;lgl&gt; \n‚îú‚îÄFOIP = [141:0x304258000] &lt;lgl&gt; \n‚îú‚îÄFPAP = [142:0x3048f8000] &lt;lgl&gt; \n‚îú‚îÄFPOBP = [143:0x159038000] &lt;lgl&gt; \n‚îú‚îÄFPOWSP = [144:0x12c640000] &lt;lgl&gt; \n‚îú‚îÄFRACP = [145:0x30a188000] &lt;lgl&gt; \n‚îú‚îÄFRELP = [146:0x30a828000] &lt;lgl&gt; \n‚îú‚îÄFRETP = [147:0x304f98000] &lt;lgl&gt; \n‚îú‚îÄFSCHGP = [148:0x305638000] &lt;lgl&gt; \n‚îú‚îÄFSCHLP = [149:0x17a158000] &lt;lgl&gt; \n‚îú‚îÄFSCHP = [150:0x17a7f8000] &lt;lgl&gt; \n‚îú‚îÄFSEMP = [151:0x314248000] &lt;lgl&gt; \n‚îú‚îÄFSEXP = [152:0x3148e8000] &lt;lgl&gt; \n‚îú‚îÄFSSIP = [153:0x314f88000] &lt;lgl&gt; \n‚îú‚îÄFSSP = [154:0x315628000] &lt;lgl&gt; \n‚îú‚îÄFWAGP = [155:0x315cc8000] &lt;lgl&gt; \n‚îú‚îÄFWKHP = [156:0x316368000] &lt;lgl&gt; \n‚îú‚îÄFWKLP = [157:0x170d60000] &lt;lgl&gt; \n‚îú‚îÄFWKWP = [158:0x171400000] &lt;lgl&gt; \n‚îú‚îÄFYOEP = [159:0x30aec8000] &lt;lgl&gt; \n‚îú‚îÄPWGTP1 = [160:0x35ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP2 = [161:0x35f748000] &lt;int&gt; \n‚îú‚îÄPWGTP3 = [162:0x3706a8000] &lt;int&gt; \n‚îú‚îÄPWGTP4 = [163:0x3713e8000] &lt;int&gt; \n‚îú‚îÄPWGTP5 = [164:0x372128000] &lt;int&gt; \n‚îú‚îÄPWGTP6 = [165:0x372e68000] &lt;int&gt; \n‚îú‚îÄPWGTP7 = [166:0x373ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP8 = [167:0x3748e8000] &lt;int&gt; \n‚îú‚îÄPWGTP9 = [168:0x375628000] &lt;int&gt; \n‚îú‚îÄPWGTP10 = [169:0x376368000] &lt;int&gt; \n‚îú‚îÄPWGTP11 = [170:0x3770a8000] &lt;int&gt; \n‚îú‚îÄPWGTP12 = [171:0x378008000] &lt;int&gt; \n‚îú‚îÄPWGTP13 = [172:0x378d48000] &lt;int&gt; \n‚îú‚îÄPWGTP14 = [173:0x379a88000] &lt;int&gt; \n‚îú‚îÄPWGTP15 = [174:0x37a7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP16 = [175:0x37b508000] &lt;int&gt; \n‚îú‚îÄPWGTP17 = [176:0x37c248000] &lt;int&gt; \n‚îú‚îÄPWGTP18 = [177:0x37cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP19 = [178:0x37dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP20 = [179:0x37ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP21 = [180:0x37f748000] &lt;int&gt; \n‚îú‚îÄPWGTP22 = [181:0x3806a8000] &lt;int&gt; \n‚îú‚îÄPWGTP23 = [182:0x3813e8000] &lt;int&gt; \n‚îú‚îÄPWGTP24 = [183:0x382128000] &lt;int&gt; \n‚îú‚îÄPWGTP25 = [184:0x382e68000] &lt;int&gt; \n‚îú‚îÄPWGTP26 = [185:0x383ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP27 = [186:0x3848e8000] &lt;int&gt; \n‚îú‚îÄPWGTP28 = [187:0x385628000] &lt;int&gt; \n‚îú‚îÄPWGTP29 = [188:0x386368000] &lt;int&gt; \n‚îú‚îÄPWGTP30 = [189:0x3870a8000] &lt;int&gt; \n‚îú‚îÄPWGTP31 = [190:0x388008000] &lt;int&gt; \n‚îú‚îÄPWGTP32 = [191:0x388d48000] &lt;int&gt; \n‚îú‚îÄPWGTP33 = [192:0x389a88000] &lt;int&gt; \n‚îú‚îÄPWGTP34 = [193:0x33c248000] &lt;int&gt; \n‚îú‚îÄPWGTP35 = [194:0x33cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP36 = [195:0x33dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP37 = [196:0x33ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP38 = [197:0x33f748000] &lt;int&gt; \n‚îú‚îÄPWGTP39 = [198:0x3906a8000] &lt;int&gt; \n‚îú‚îÄPWGTP40 = [199:0x3913e8000] &lt;int&gt; \n‚îú‚îÄPWGTP41 = [200:0x392128000] &lt;int&gt; \n‚îú‚îÄPWGTP42 = [201:0x392e68000] &lt;int&gt; \n‚îú‚îÄPWGTP43 = [202:0x393ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP44 = [203:0x3948e8000] &lt;int&gt; \n‚îú‚îÄPWGTP45 = [204:0x395628000] &lt;int&gt; \n‚îú‚îÄPWGTP46 = [205:0x396368000] &lt;int&gt; \n‚îú‚îÄPWGTP47 = [206:0x3970a8000] &lt;int&gt; \n‚îú‚îÄPWGTP48 = [207:0x398008000] &lt;int&gt; \n‚îú‚îÄPWGTP49 = [208:0x398d48000] &lt;int&gt; \n‚îú‚îÄPWGTP50 = [209:0x399a88000] &lt;int&gt; \n‚îú‚îÄPWGTP51 = [210:0x39a7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP52 = [211:0x39b508000] &lt;int&gt; \n‚îú‚îÄPWGTP53 = [212:0x39c248000] &lt;int&gt; \n‚îú‚îÄPWGTP54 = [213:0x39cf88000] &lt;int&gt; \n‚îú‚îÄPWGTP55 = [214:0x39dcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP56 = [215:0x39ea08000] &lt;int&gt; \n‚îú‚îÄPWGTP57 = [216:0x11da28000] &lt;int&gt; \n‚îú‚îÄPWGTP58 = [217:0x11e768000] &lt;int&gt; \n‚îú‚îÄPWGTP59 = [218:0x11f4a8000] &lt;int&gt; \n‚îú‚îÄPWGTP60 = [219:0x3a06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP61 = [220:0x3a13e8000] &lt;int&gt; \n‚îú‚îÄPWGTP62 = [221:0x3a2128000] &lt;int&gt; \n‚îú‚îÄPWGTP63 = [222:0x3a2e68000] &lt;int&gt; \n‚îú‚îÄPWGTP64 = [223:0x3a3ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP65 = [224:0x3a48e8000] &lt;int&gt; \n‚îú‚îÄPWGTP66 = [225:0x3a5628000] &lt;int&gt; \n‚îú‚îÄPWGTP67 = [226:0x3a6368000] &lt;int&gt; \n‚îú‚îÄPWGTP68 = [227:0x3a70a8000] &lt;int&gt; \n‚îú‚îÄPWGTP69 = [228:0x3a8008000] &lt;int&gt; \n‚îú‚îÄPWGTP70 = [229:0x3a8d48000] &lt;int&gt; \n‚îú‚îÄPWGTP71 = [230:0x3a9a88000] &lt;int&gt; \n‚îú‚îÄPWGTP72 = [231:0x3aa7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP73 = [232:0x3ab508000] &lt;int&gt; \n‚îú‚îÄPWGTP74 = [233:0x3ac248000] &lt;int&gt; \n‚îú‚îÄPWGTP75 = [234:0x3acf88000] &lt;int&gt; \n‚îú‚îÄPWGTP76 = [235:0x3adcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP77 = [236:0x3aea08000] &lt;int&gt; \n‚îú‚îÄPWGTP78 = [237:0x3af748000] &lt;int&gt; \n‚îú‚îÄPWGTP79 = [238:0x3b06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP80 = [239:0x3b13e8000] &lt;int&gt; \n‚îú‚îÄNOP = [240:0x3b2128000] &lt;fct&gt; \n‚îú‚îÄADJINC = [241:0x364240000] &lt;dbl&gt; \n‚îú‚îÄCITWP = [242:0x365cc0000] &lt;chr&gt; \n‚îú‚îÄDEAR = [243:0x13d950000] &lt;lgl&gt; \n‚îú‚îÄDRAT = [244:0x3b2e68000] &lt;fct&gt; \n‚îú‚îÄDRATX = [245:0x1596d8000] &lt;lgl&gt; \n‚îú‚îÄHINS1 = [246:0x305cd8000] &lt;lgl&gt; \n‚îú‚îÄHINS2 = [247:0x306378000] &lt;lgl&gt; \n‚îú‚îÄHINS3 = [248:0x306a18000] &lt;lgl&gt; \n‚îú‚îÄHINS4 = [249:0x3070b8000] &lt;lgl&gt; \n‚îú‚îÄHINS5 = [250:0x307758000] &lt;lgl&gt; \n‚îú‚îÄHINS6 = [251:0x318008000] &lt;lgl&gt; \n‚îú‚îÄHINS7 = [252:0x3186a8000] &lt;lgl&gt; \n‚îú‚îÄMARHD = [253:0x318d48000] &lt;lgl&gt; \n‚îú‚îÄMARHM = [254:0x3193e8000] &lt;lgl&gt; \n‚îú‚îÄMARHT = [255:0x3b3ba8000] &lt;fct&gt; \n‚îú‚îÄMARHW = [256:0x319a88000] &lt;lgl&gt; \n‚îú‚îÄMARHYP = [257:0x3b8000000] &lt;chr&gt; \n‚îú‚îÄDIS = [258:0x17ae98000] &lt;lgl&gt; \n‚îú‚îÄHICOV = [259:0x171aa0000] &lt;lgl&gt; \n‚îú‚îÄPRIVCOV = [260:0x31a128000] &lt;lgl&gt; \n‚îú‚îÄPUBCOV = [261:0x31a7c8000] &lt;lgl&gt; \n‚îú‚îÄFCITWP = [262:0x172140000] &lt;lgl&gt; \n‚îú‚îÄFDEARP = [263:0x316a08000] &lt;lgl&gt; \n‚îú‚îÄFDRATP = [264:0x13dff0000] &lt;lgl&gt; \n‚îú‚îÄFDRATXP = [265:0x13e690000] &lt;lgl&gt; \n‚îú‚îÄFHINS1P = [266:0x14b9f8000] &lt;lgl&gt; \n‚îú‚îÄFHINS2P = [267:0x14c098000] &lt;lgl&gt; \n‚îú‚îÄFHINS3P = [268:0x1182c0000] &lt;lgl&gt; \n‚îú‚îÄFHINS4P = [269:0x12cce0000] &lt;lgl&gt; \n‚îú‚îÄFHINS5P = [270:0x3170a8000] &lt;lgl&gt; \n‚îú‚îÄFHINS6P = [271:0x160d58000] &lt;lgl&gt; \n‚îú‚îÄFHINS7P = [272:0x17b538000] &lt;lgl&gt; \n‚îú‚îÄFMARHDP = [273:0x17bbd8000] &lt;lgl&gt; \n‚îú‚îÄFMARHMP = [274:0x17c278000] &lt;lgl&gt; \n‚îú‚îÄFMARHTP = [275:0x12d380000] &lt;lgl&gt; \n‚îú‚îÄFMARHWP = [276:0x12da20000] &lt;lgl&gt; \n‚îú‚îÄFMARHYP = [277:0x159d78000] &lt;lgl&gt; \n‚îú‚îÄWRK = [278:0x17c918000] &lt;lgl&gt; \n‚îú‚îÄFOD1P = [279:0x3b9a80000] &lt;chr&gt; \n‚îú‚îÄFOD2P = [280:0x3bb500000] &lt;chr&gt; \n‚îú‚îÄSCIENGP = [281:0x17cfb8000] &lt;lgl&gt; \n‚îú‚îÄSCIENGRLP = [282:0x17d658000] &lt;lgl&gt; \n‚îú‚îÄFFODP = [283:0x17dcf8000] &lt;lgl&gt; \n‚îú‚îÄFHINS3C = [284:0x3b48e8000] &lt;fct&gt; \n‚îú‚îÄFHINS4C = [285:0x3b5628000] &lt;fct&gt; \n‚îú‚îÄFHINS5C = [286:0x3b6368000] &lt;fct&gt; \n‚îú‚îÄRELP = [287:0x3bcf80000] &lt;chr&gt; \n‚îú‚îÄFWRKP = [288:0x317748000] &lt;lgl&gt; \n‚îú‚îÄFDISP = [289:0x320008000] &lt;lgl&gt; \n‚îú‚îÄFPERNP = [290:0x30b568000] &lt;lgl&gt; \n‚îú‚îÄFPINCP = [291:0x1613f8000] &lt;lgl&gt; \n‚îú‚îÄFPRIVCOVP = [292:0x17e398000] &lt;lgl&gt; \n‚îú‚îÄFPUBCOVP = [293:0x17ea38000] &lt;lgl&gt; \n‚îú‚îÄRACNH = [294:0x1727e0000] &lt;lgl&gt; \n‚îú‚îÄRACPI = [295:0x161a98000] &lt;lgl&gt; \n‚îú‚îÄSSPA = [296:0x3b70a8000] &lt;fct&gt; \n‚îú‚îÄMLPCD = [297:0x12e0c0000] &lt;lgl&gt; \n‚îú‚îÄMLPFG = [298:0x30bc08000] &lt;lgl&gt; \n‚îú‚îÄFHICOVP = [299:0x12e760000] &lt;lgl&gt; \n‚îú‚îÄDIVISION = [300:0x3c0008000] &lt;fct&gt; \n‚îú‚îÄREGION = [301:0x3c0d48000] &lt;fct&gt; \n‚îú‚îÄHIMRKS = [302:0x3c1a88000] &lt;fct&gt; \n‚îú‚îÄJWTRNS = [303:0x3bea00000] &lt;chr&gt; \n‚îú‚îÄRELSHIPP = [304:0x3c8d40000] &lt;chr&gt; \n‚îú‚îÄWKWN = [305:0x38a7c8000] &lt;int&gt; \n‚îú‚îÄFHIMRKSP = [306:0x31ae68000] &lt;lgl&gt; \n‚îú‚îÄFJWTRNSP = [307:0x14c738000] &lt;lgl&gt; \n‚îú‚îÄFRELSHIPP = [308:0x3206a8000] &lt;lgl&gt; \n‚îú‚îÄFWKWNP = [309:0x320d48000] &lt;lgl&gt; \n‚îú‚îÄMLPIK = [310:0x3213e8000] &lt;lgl&gt; \n‚îú‚îÄyear = [311:0x38b508000] &lt;int&gt; \n‚îú‚îÄlocation = [312:0x3ca7c0000] &lt;chr&gt; \n‚îú‚îÄage_groups = [313:0x349f00000] &lt;chr&gt; \n‚îú‚îÄins_type = [314:0x34b980000] &lt;chr&gt; \n‚îî‚îÄage_decade = [315:0x366a00000] &lt;dbl&gt; \n\n\n\n\nlobstr::ref(pums_copy)\n\n‚ñà [1:0x110a2a800] &lt;dt[,314]&gt; \n‚îú‚îÄSPORDER = [2:0x3c13e8000] &lt;int&gt; \n‚îú‚îÄRT = [3:0x11ee08000] &lt;fct&gt; \n‚îú‚îÄSERIALNO = [4:0x3ba7c0000] &lt;chr&gt; \n‚îú‚îÄPUMA = [5:0x3b8d40000] &lt;chr&gt; \n‚îú‚îÄST = [6:0x34d400000] &lt;chr&gt; \n‚îú‚îÄADJUST = [7:0x11abc8000] &lt;int&gt; \n‚îú‚îÄPWGTP = [8:0x11d388000] &lt;int&gt; \n‚îú‚îÄAGEP = [9:0x119040000] &lt;int&gt; \n‚îú‚îÄCIT = [10:0x11b908000] &lt;fct&gt; \n‚îú‚îÄCOW = [11:0x11c648000] &lt;fct&gt; \n‚îú‚îÄDDRS = [12:0x462208000] &lt;lgl&gt; \n‚îú‚îÄDEYE = [13:0x4678a8000] &lt;lgl&gt; \n‚îú‚îÄDOUT = [14:0x462ba8000] &lt;lgl&gt; \n‚îú‚îÄDPHY = [15:0x463ee8000] &lt;lgl&gt; \n‚îú‚îÄDREM = [16:0x464888000] &lt;lgl&gt; \n‚îú‚îÄDWRK = [17:0x463548000] &lt;lgl&gt; \n‚îú‚îÄENG = [18:0x15f398000] &lt;fct&gt; \n‚îú‚îÄFER = [19:0x465bc8000] &lt;lgl&gt; \n‚îú‚îÄGCL = [20:0x465228000] &lt;lgl&gt; \n‚îú‚îÄGCM = [21:0x466568000] &lt;fct&gt; \n‚îú‚îÄGCR = [22:0x466f08000] &lt;lgl&gt; \n‚îú‚îÄINTP = [23:0x461868000] &lt;int&gt; \n‚îú‚îÄJWMNP = [24:0x460ec8000] &lt;int&gt; \n‚îú‚îÄJWRIP = [25:0x34ee80000] &lt;chr&gt; \n‚îú‚îÄJWTR = [26:0x350900000] &lt;chr&gt; \n‚îú‚îÄLANX = [27:0x460008000] &lt;lgl&gt; \n‚îú‚îÄMAR = [28:0x4606a8000] &lt;fct&gt; \n‚îú‚îÄMIG = [29:0x457388000] &lt;lgl&gt; \n‚îú‚îÄMIL = [30:0x4539c8000] &lt;fct&gt; \n‚îú‚îÄMILY = [31:0x450008000] &lt;fct&gt; \n‚îú‚îÄMLPA = [32:0x455ec8000] &lt;lgl&gt; \n‚îú‚îÄMLPB = [33:0x455528000] &lt;lgl&gt; \n‚îú‚îÄMLPC = [34:0x454b88000] &lt;lgl&gt; \n‚îú‚îÄMLPD = [35:0x4541e8000] &lt;lgl&gt; \n‚îú‚îÄMLPE = [36:0x452508000] &lt;lgl&gt; \n‚îú‚îÄMLPF = [37:0x451b68000] &lt;lgl&gt; \n‚îú‚îÄMLPG = [38:0x3c2128000] &lt;lgl&gt; \n‚îú‚îÄMLPH = [39:0x3c27c8000] &lt;lgl&gt; \n‚îú‚îÄMLPI = [40:0x3c2e68000] &lt;lgl&gt; \n‚îú‚îÄMLPJ = [41:0x3dae68000] &lt;lgl&gt; \n‚îú‚îÄMLPK = [42:0x3db508000] &lt;lgl&gt; \n‚îú‚îÄNWAB = [43:0x3dbba8000] &lt;lgl&gt; \n‚îú‚îÄNWAV = [44:0x3dc248000] &lt;fct&gt; \n‚îú‚îÄNWLA = [45:0x3dc8e8000] &lt;lgl&gt; \n‚îú‚îÄNWLK = [46:0x3dcf88000] &lt;lgl&gt; \n‚îú‚îÄNWRE = [47:0x3dd628000] &lt;lgl&gt; \n‚îú‚îÄOIP = [48:0x3ddcc8000] &lt;int&gt; \n‚îú‚îÄPAP = [49:0x3de368000] &lt;int&gt; \n‚îú‚îÄREL = [50:0x352380000] &lt;chr&gt; \n‚îú‚îÄRETP = [51:0x3dea08000] &lt;int&gt; \n‚îú‚îÄSCH = [52:0x3df0a8000] &lt;lgl&gt; \n‚îú‚îÄSCHG = [53:0x353e00000] &lt;chr&gt; \n‚îú‚îÄSCHL = [54:0x355880000] &lt;chr&gt; \n‚îú‚îÄSEMP = [55:0x3df748000] &lt;int&gt; \n‚îú‚îÄSEX = [56:0x4778a8000] &lt;fct&gt; \n‚îú‚îÄSSIP = [57:0x476f08000] &lt;int&gt; \n‚îú‚îÄSSP = [58:0x476568000] &lt;int&gt; \n‚îú‚îÄWAGP = [59:0x475bc8000] &lt;int&gt; \n‚îú‚îÄWKHP = [60:0x4750a8000] &lt;int&gt; \n‚îú‚îÄWKL = [61:0x474708000] &lt;fct&gt; \n‚îú‚îÄWKW = [62:0x473d68000] &lt;fct&gt; \n‚îú‚îÄYOEP = [63:0x360000000] &lt;chr&gt; \n‚îú‚îÄUWRK = [64:0x4733c8000] &lt;lgl&gt; \n‚îú‚îÄANC = [65:0x472a28000] &lt;fct&gt; \n‚îú‚îÄANC1P = [66:0x361a80000] &lt;chr&gt; \n‚îú‚îÄANC2P = [67:0x363500000] &lt;chr&gt; \n‚îú‚îÄDECADE = [68:0x472088000] &lt;fct&gt; \n‚îú‚îÄDRIVESP = [69:0x4716e8000] &lt;fct&gt; \n‚îú‚îÄDS = [70:0x470008000] &lt;lgl&gt; \n‚îú‚îÄESP = [71:0x4706a8000] &lt;fct&gt; \n‚îú‚îÄESR = [72:0x470d48000] &lt;fct&gt; \n‚îú‚îÄHISP = [73:0x364f80000] &lt;chr&gt; \n‚îú‚îÄINDP = [74:0x3bc240000] &lt;chr&gt; \n‚îú‚îÄJWAP = [75:0x3bdcc0000] &lt;chr&gt; \n‚îú‚îÄJWDP = [76:0x490808000] &lt;chr&gt; \n‚îú‚îÄLANP = [77:0x492284000] &lt;chr&gt; \n‚îú‚îÄMIGPUMA = [78:0x487808000] &lt;fct&gt; \n‚îú‚îÄMIGSP = [79:0x493d00000] &lt;chr&gt; \n‚îú‚îÄMSP = [80:0x486e68000] &lt;fct&gt; \n‚îú‚îÄNAICSP = [81:0x49577c000] &lt;chr&gt; \n‚îú‚îÄNATIVITY = [82:0x4864c8000] &lt;fct&gt; \n‚îú‚îÄOC = [83:0x485b28000] &lt;lgl&gt; \n‚îú‚îÄOCCP = [84:0x4971f8000] &lt;chr&gt; \n‚îú‚îÄPAOC = [85:0x485188000] &lt;fct&gt; \n‚îú‚îÄPERNP = [86:0x4847e8000] &lt;int&gt; \n‚îú‚îÄPINCP = [87:0x483e48000] &lt;int&gt; \n‚îú‚îÄPOBP = [88:0x498c74000] &lt;chr&gt; \n‚îú‚îÄPOVPIP = [89:0x483328000] &lt;int&gt; \n‚îú‚îÄPOWPUMA = [90:0x482808000] &lt;fct&gt; \n‚îú‚îÄPOWSP = [91:0x49a6f0000] &lt;chr&gt; \n‚îú‚îÄQTRBIR = [92:0x481e68000] &lt;fct&gt; \n‚îú‚îÄRAC1P = [93:0x4814c8000] &lt;fct&gt; \n‚îú‚îÄRAC2P = [94:0x49c16c000] &lt;chr&gt; \n‚îú‚îÄRAC3P = [95:0x49dbe8000] &lt;chr&gt; \n‚îú‚îÄRACAIAN = [96:0x480b28000] &lt;lgl&gt; \n‚îú‚îÄRACASN = [97:0x480188000] &lt;lgl&gt; \n‚îú‚îÄRACBLK = [98:0x46efe8000] &lt;lgl&gt; \n‚îú‚îÄRACNHPI = [99:0x46e648000] &lt;lgl&gt; \n‚îú‚îÄRACNUM = [100:0x46dca8000] &lt;int&gt; \n‚îú‚îÄRACSOR = [101:0x46d308000] &lt;lgl&gt; \n‚îú‚îÄRACWHT = [102:0x46c968000] &lt;lgl&gt; \n‚îú‚îÄRC = [103:0x46be48000] &lt;lgl&gt; \n‚îú‚îÄSFN = [104:0x46b328000] &lt;fct&gt; \n‚îú‚îÄSFR = [105:0x46a988000] &lt;fct&gt; \n‚îú‚îÄSOCP = [106:0x49f664000] &lt;chr&gt; \n‚îú‚îÄVPS = [107:0x4a10e0000] &lt;chr&gt; \n‚îú‚îÄWAOB = [108:0x469fe8000] &lt;fct&gt; \n‚îú‚îÄFAGEP = [109:0x469648000] &lt;lgl&gt; \n‚îú‚îÄFANCP = [110:0x468ca8000] &lt;lgl&gt; \n‚îú‚îÄFCITP = [111:0x468308000] &lt;lgl&gt; \n‚îú‚îÄFCOWP = [112:0x45f088000] &lt;lgl&gt; \n‚îú‚îÄFDDRSP = [113:0x45e6e8000] &lt;lgl&gt; \n‚îú‚îÄFDEYEP = [114:0x45dd48000] &lt;lgl&gt; \n‚îú‚îÄFDOUTP = [115:0x45d3a8000] &lt;lgl&gt; \n‚îú‚îÄFDPHYP = [116:0x45ca08000] &lt;lgl&gt; \n‚îú‚îÄFDREMP = [117:0x45c068000] &lt;lgl&gt; \n‚îú‚îÄFDWRKP = [118:0x45b6c8000] &lt;lgl&gt; \n‚îú‚îÄFENGP = [119:0x45ad28000] &lt;lgl&gt; \n‚îú‚îÄFESRP = [120:0x45a388000] &lt;lgl&gt; \n‚îú‚îÄFFERP = [121:0x4599e8000] &lt;lgl&gt; \n‚îú‚îÄFGCLP = [122:0x459048000] &lt;lgl&gt; \n‚îú‚îÄFGCMP = [123:0x458008000] &lt;lgl&gt; \n‚îú‚îÄFGCRP = [124:0x4586a8000] &lt;lgl&gt; \n‚îú‚îÄFHISP = [125:0x44f388000] &lt;lgl&gt; \n‚îú‚îÄFINDP = [126:0x44e9e8000] &lt;lgl&gt; \n‚îú‚îÄFINTP = [127:0x44e048000] &lt;lgl&gt; \n‚îú‚îÄFJWDP = [128:0x44d6a8000] &lt;lgl&gt; \n‚îú‚îÄFJWMNP = [129:0x44cd08000] &lt;lgl&gt; \n‚îú‚îÄFJWRIP = [130:0x44c368000] &lt;lgl&gt; \n‚îú‚îÄFJWTRP = [131:0x44b9c8000] &lt;lgl&gt; \n‚îú‚îÄFLANP = [132:0x44b028000] &lt;lgl&gt; \n‚îú‚îÄFLANXP = [133:0x44a688000] &lt;lgl&gt; \n‚îú‚îÄFMARP = [134:0x449ce8000] &lt;lgl&gt; \n‚îú‚îÄFMIGP = [135:0x449348000] &lt;lgl&gt; \n‚îú‚îÄFMIGSP = [136:0x4489a8000] &lt;lgl&gt; \n‚îú‚îÄFMILPP = [137:0x448008000] &lt;lgl&gt; \n‚îú‚îÄFMILSP = [138:0x447508000] &lt;lgl&gt; \n‚îú‚îÄFMILYP = [139:0x446b68000] &lt;lgl&gt; \n‚îú‚îÄFOCCP = [140:0x4461c8000] &lt;lgl&gt; \n‚îú‚îÄFOIP = [141:0x445828000] &lt;lgl&gt; \n‚îú‚îÄFPAP = [142:0x444e88000] &lt;lgl&gt; \n‚îú‚îÄFPOBP = [143:0x4444e8000] &lt;lgl&gt; \n‚îú‚îÄFPOWSP = [144:0x443b48000] &lt;lgl&gt; \n‚îú‚îÄFRACP = [145:0x4431a8000] &lt;lgl&gt; \n‚îú‚îÄFRELP = [146:0x442808000] &lt;lgl&gt; \n‚îú‚îÄFRETP = [147:0x441e68000] &lt;lgl&gt; \n‚îú‚îÄFSCHGP = [148:0x4414c8000] &lt;lgl&gt; \n‚îú‚îÄFSCHLP = [149:0x440b28000] &lt;lgl&gt; \n‚îú‚îÄFSCHP = [150:0x440188000] &lt;lgl&gt; \n‚îú‚îÄFSEMP = [151:0x4a8008000] &lt;lgl&gt; \n‚îú‚îÄFSEXP = [152:0x4a86a8000] &lt;lgl&gt; \n‚îú‚îÄFSSIP = [153:0x4a8d48000] &lt;lgl&gt; \n‚îú‚îÄFSSP = [154:0x4a93e8000] &lt;lgl&gt; \n‚îú‚îÄFWAGP = [155:0x4a9a88000] &lt;lgl&gt; \n‚îú‚îÄFWKHP = [156:0x4aa128000] &lt;lgl&gt; \n‚îú‚îÄFWKLP = [157:0x4aa7c8000] &lt;lgl&gt; \n‚îú‚îÄFWKWP = [158:0x4aae68000] &lt;lgl&gt; \n‚îú‚îÄFYOEP = [159:0x4ab508000] &lt;lgl&gt; \n‚îú‚îÄPWGTP1 = [160:0x4abba8000] &lt;int&gt; \n‚îú‚îÄPWGTP2 = [161:0x4ac248000] &lt;int&gt; \n‚îú‚îÄPWGTP3 = [162:0x4ac8e8000] &lt;int&gt; \n‚îú‚îÄPWGTP4 = [163:0x4acf88000] &lt;int&gt; \n‚îú‚îÄPWGTP5 = [164:0x4ad628000] &lt;int&gt; \n‚îú‚îÄPWGTP6 = [165:0x4adcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP7 = [166:0x4ae368000] &lt;int&gt; \n‚îú‚îÄPWGTP8 = [167:0x4aea08000] &lt;int&gt; \n‚îú‚îÄPWGTP9 = [168:0x4af0a8000] &lt;int&gt; \n‚îú‚îÄPWGTP10 = [169:0x4af748000] &lt;int&gt; \n‚îú‚îÄPWGTP11 = [170:0x4b0008000] &lt;int&gt; \n‚îú‚îÄPWGTP12 = [171:0x4b06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP13 = [172:0x4b0d48000] &lt;int&gt; \n‚îú‚îÄPWGTP14 = [173:0x4b13e8000] &lt;int&gt; \n‚îú‚îÄPWGTP15 = [174:0x4b1a88000] &lt;int&gt; \n‚îú‚îÄPWGTP16 = [175:0x4b2128000] &lt;int&gt; \n‚îú‚îÄPWGTP17 = [176:0x4b27c8000] &lt;int&gt; \n‚îú‚îÄPWGTP18 = [177:0x4b2e68000] &lt;int&gt; \n‚îú‚îÄPWGTP19 = [178:0x4b3508000] &lt;int&gt; \n‚îú‚îÄPWGTP20 = [179:0x4b3ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP21 = [180:0x4b4248000] &lt;int&gt; \n‚îú‚îÄPWGTP22 = [181:0x4b48e8000] &lt;int&gt; \n‚îú‚îÄPWGTP23 = [182:0x4b4f88000] &lt;int&gt; \n‚îú‚îÄPWGTP24 = [183:0x4b5628000] &lt;int&gt; \n‚îú‚îÄPWGTP25 = [184:0x4b5cc8000] &lt;int&gt; \n‚îú‚îÄPWGTP26 = [185:0x4b6368000] &lt;int&gt; \n‚îú‚îÄPWGTP27 = [186:0x4b6a08000] &lt;int&gt; \n‚îú‚îÄPWGTP28 = [187:0x4b70a8000] &lt;int&gt; \n‚îú‚îÄPWGTP29 = [188:0x4b7748000] &lt;int&gt; \n‚îú‚îÄPWGTP30 = [189:0x4b8008000] &lt;int&gt; \n‚îú‚îÄPWGTP31 = [190:0x4b86a8000] &lt;int&gt; \n‚îú‚îÄPWGTP32 = [191:0x4b8d48000] &lt;int&gt; \n‚îú‚îÄPWGTP33 = [192:0x4b93e8000] &lt;int&gt; \n‚îú‚îÄPWGTP34 = [193:0x4b9a88000] &lt;int&gt; \n‚îú‚îÄPWGTP35 = [194:0x4ba128000] &lt;int&gt; \n‚îú‚îÄPWGTP36 = [195:0x4ba7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP37 = [196:0x4bae68000] &lt;int&gt; \n‚îú‚îÄPWGTP38 = [197:0x4bb508000] &lt;int&gt; \n‚îú‚îÄPWGTP39 = [198:0x4bbba8000] &lt;int&gt; \n‚îú‚îÄPWGTP40 = [199:0x4bc248000] &lt;int&gt; \n‚îú‚îÄPWGTP41 = [200:0x4bc8e8000] &lt;int&gt; \n‚îú‚îÄPWGTP42 = [201:0x4bcf88000] &lt;int&gt; \n‚îú‚îÄPWGTP43 = [202:0x4bd628000] &lt;int&gt; \n‚îú‚îÄPWGTP44 = [203:0x4bdcc8000] &lt;int&gt; \n‚îú‚îÄPWGTP45 = [204:0x4be368000] &lt;int&gt; \n‚îú‚îÄPWGTP46 = [205:0x4bea08000] &lt;int&gt; \n‚îú‚îÄPWGTP47 = [206:0x4bf0a8000] &lt;int&gt; \n‚îú‚îÄPWGTP48 = [207:0x4bf748000] &lt;int&gt; \n‚îú‚îÄPWGTP49 = [208:0x4c0008000] &lt;int&gt; \n‚îú‚îÄPWGTP50 = [209:0x4c06a8000] &lt;int&gt; \n‚îú‚îÄPWGTP51 = [210:0x4c0d48000] &lt;int&gt; \n‚îú‚îÄPWGTP52 = [211:0x4c13e8000] &lt;int&gt; \n‚îú‚îÄPWGTP53 = [212:0x4c1a88000] &lt;int&gt; \n‚îú‚îÄPWGTP54 = [213:0x4c2128000] &lt;int&gt; \n‚îú‚îÄPWGTP55 = [214:0x4c27c8000] &lt;int&gt; \n‚îú‚îÄPWGTP56 = [215:0x4c2e68000] &lt;int&gt; \n‚îú‚îÄPWGTP57 = [216:0x4c3508000] &lt;int&gt; \n‚îú‚îÄPWGTP58 = [217:0x4c3ba8000] &lt;int&gt; \n‚îú‚îÄPWGTP59 = [218:0x4c4248000] &lt;int&gt; \n‚îú‚îÄPWGTP60 = [219:0x4c48e8000] &lt;int&gt; \n‚îú‚îÄPWGTP61 = [220:0x4c4f88000] &lt;int&gt; \n‚îú‚îÄPWGTP62 = [221:0x4c5628000] &lt;int&gt; \n‚îú‚îÄPWGTP63 = [222:0x4c5cc8000] &lt;int&gt; \n‚îú‚îÄPWGTP64 = [223:0x4c6368000] &lt;int&gt; \n‚îú‚îÄPWGTP65 = [224:0x4c6a08000] &lt;int&gt; \n‚îú‚îÄPWGTP66 = [225:0x4c70a8000] &lt;int&gt; \n‚îú‚îÄPWGTP67 = [226:0x4c7748000] &lt;int&gt; \n‚îú‚îÄPWGTP68 = [227:0x4c8008000] &lt;int&gt; \n‚îú‚îÄPWGTP69 = [228:0x4c86a8000] &lt;int&gt; \n‚îú‚îÄPWGTP70 = [229:0x4c8d48000] &lt;int&gt; \n‚îú‚îÄPWGTP71 = [230:0x4c93e8000] &lt;int&gt; \n‚îú‚îÄPWGTP72 = [231:0x4c9a88000] &lt;int&gt; \n‚îú‚îÄPWGTP73 = [232:0x4ca128000] &lt;int&gt; \n‚îú‚îÄPWGTP74 = [233:0x4ca7c8000] &lt;int&gt; \n‚îú‚îÄPWGTP75 = [234:0x4cae68000] &lt;int&gt; \n‚îú‚îÄPWGTP76 = [235:0x4cb508000] &lt;int&gt; \n‚îú‚îÄPWGTP77 = [236:0x4cbba8000] &lt;int&gt; \n‚îú‚îÄPWGTP78 = [237:0x4cc248000] &lt;int&gt; \n‚îú‚îÄPWGTP79 = [238:0x4cc8e8000] &lt;int&gt; \n‚îú‚îÄPWGTP80 = [239:0x4ccf88000] &lt;int&gt; \n‚îú‚îÄNOP = [240:0x4cd628000] &lt;fct&gt; \n‚îú‚îÄADJINC = [241:0x4a1e20000] &lt;dbl&gt; \n‚îú‚îÄCITWP = [242:0x4a2b60000] &lt;chr&gt; \n‚îú‚îÄDEAR = [243:0x4cdcc8000] &lt;lgl&gt; \n‚îú‚îÄDRAT = [244:0x4ce368000] &lt;fct&gt; \n‚îú‚îÄDRATX = [245:0x4cea08000] &lt;lgl&gt; \n‚îú‚îÄHINS1 = [246:0x4cf0a8000] &lt;lgl&gt; \n‚îú‚îÄHINS2 = [247:0x4cf748000] &lt;lgl&gt; \n‚îú‚îÄHINS3 = [248:0x4d0008000] &lt;lgl&gt; \n‚îú‚îÄHINS4 = [249:0x4d06a8000] &lt;lgl&gt; \n‚îú‚îÄHINS5 = [250:0x4d0d48000] &lt;lgl&gt; \n‚îú‚îÄHINS6 = [251:0x4d13e8000] &lt;lgl&gt; \n‚îú‚îÄHINS7 = [252:0x4d1a88000] &lt;lgl&gt; \n‚îú‚îÄMARHD = [253:0x4d2128000] &lt;lgl&gt; \n‚îú‚îÄMARHM = [254:0x4d27c8000] &lt;lgl&gt; \n‚îú‚îÄMARHT = [255:0x4d2e68000] &lt;fct&gt; \n‚îú‚îÄMARHW = [256:0x4d3508000] &lt;lgl&gt; \n‚îú‚îÄMARHYP = [257:0x4a38a0000] &lt;chr&gt; \n‚îú‚îÄDIS = [258:0x4d3ba8000] &lt;lgl&gt; \n‚îú‚îÄHICOV = [259:0x4d4248000] &lt;lgl&gt; \n‚îú‚îÄPRIVCOV = [260:0x4d48e8000] &lt;lgl&gt; \n‚îú‚îÄPUBCOV = [261:0x4d4f88000] &lt;lgl&gt; \n‚îú‚îÄFCITWP = [262:0x4d5628000] &lt;lgl&gt; \n‚îú‚îÄFDEARP = [263:0x4d5cc8000] &lt;lgl&gt; \n‚îú‚îÄFDRATP = [264:0x4d6368000] &lt;lgl&gt; \n‚îú‚îÄFDRATXP = [265:0x4d6a08000] &lt;lgl&gt; \n‚îú‚îÄFHINS1P = [266:0x4d70a8000] &lt;lgl&gt; \n‚îú‚îÄFHINS2P = [267:0x4d7748000] &lt;lgl&gt; \n‚îú‚îÄFHINS3P = [268:0x4d8008000] &lt;lgl&gt; \n‚îú‚îÄFHINS4P = [269:0x4d86a8000] &lt;lgl&gt; \n‚îú‚îÄFHINS5P = [270:0x4d8d48000] &lt;lgl&gt; \n‚îú‚îÄFHINS6P = [271:0x4d93e8000] &lt;lgl&gt; \n‚îú‚îÄFHINS7P = [272:0x4d9a88000] &lt;lgl&gt; \n‚îú‚îÄFMARHDP = [273:0x4da128000] &lt;lgl&gt; \n‚îú‚îÄFMARHMP = [274:0x4da7c8000] &lt;lgl&gt; \n‚îú‚îÄFMARHTP = [275:0x4dae68000] &lt;lgl&gt; \n‚îú‚îÄFMARHWP = [276:0x4db508000] &lt;lgl&gt; \n‚îú‚îÄFMARHYP = [277:0x4dbba8000] &lt;lgl&gt; \n‚îú‚îÄWRK = [278:0x4dc248000] &lt;lgl&gt; \n‚îú‚îÄFOD1P = [279:0x4a45e0000] &lt;chr&gt; \n‚îú‚îÄFOD2P = [280:0x4a5320000] &lt;chr&gt; \n‚îú‚îÄSCIENGP = [281:0x4dc8e8000] &lt;lgl&gt; \n‚îú‚îÄSCIENGRLP = [282:0x4dcf88000] &lt;lgl&gt; \n‚îú‚îÄFFODP = [283:0x4dd628000] &lt;lgl&gt; \n‚îú‚îÄFHINS3C = [284:0x4ddcc8000] &lt;fct&gt; \n‚îú‚îÄFHINS4C = [285:0x4de368000] &lt;fct&gt; \n‚îú‚îÄFHINS5C = [286:0x4dea08000] &lt;fct&gt; \n‚îú‚îÄRELP = [287:0x4a6060000] &lt;chr&gt; \n‚îú‚îÄFWRKP = [288:0x4df0a8000] &lt;lgl&gt; \n‚îú‚îÄFDISP = [289:0x4df748000] &lt;lgl&gt; \n‚îú‚îÄFPERNP = [290:0x4e0008000] &lt;lgl&gt; \n‚îú‚îÄFPINCP = [291:0x4e06a8000] &lt;lgl&gt; \n‚îú‚îÄFPRIVCOVP = [292:0x4e0d48000] &lt;lgl&gt; \n‚îú‚îÄFPUBCOVP = [293:0x4e13e8000] &lt;lgl&gt; \n‚îú‚îÄRACNH = [294:0x4e1a88000] &lt;lgl&gt; \n‚îú‚îÄRACPI = [295:0x4e2128000] &lt;lgl&gt; \n‚îú‚îÄSSPA = [296:0x4e27c8000] &lt;fct&gt; \n‚îú‚îÄMLPCD = [297:0x4e2e68000] &lt;lgl&gt; \n‚îú‚îÄMLPFG = [298:0x4e3508000] &lt;lgl&gt; \n‚îú‚îÄFHICOVP = [299:0x4e3ba8000] &lt;lgl&gt; \n‚îú‚îÄDIVISION = [300:0x4e4248000] &lt;fct&gt; \n‚îú‚îÄREGION = [301:0x4e48e8000] &lt;fct&gt; \n‚îú‚îÄHIMRKS = [302:0x4e4f88000] &lt;fct&gt; \n‚îú‚îÄJWTRNS = [303:0x4a6da0000] &lt;chr&gt; \n‚îú‚îÄRELSHIPP = [304:0x4e8000000] &lt;chr&gt; \n‚îú‚îÄWKWN = [305:0x4e5628000] &lt;int&gt; \n‚îú‚îÄFHIMRKSP = [306:0x4e5cc8000] &lt;lgl&gt; \n‚îú‚îÄFJWTRNSP = [307:0x4e6368000] &lt;lgl&gt; \n‚îú‚îÄFRELSHIPP = [308:0x4e6a08000] &lt;lgl&gt; \n‚îú‚îÄFWKWNP = [309:0x4e70a8000] &lt;lgl&gt; \n‚îú‚îÄMLPIK = [310:0x4e7748000] &lt;lgl&gt; \n‚îú‚îÄyear = [311:0x4f0008000] &lt;int&gt; \n‚îú‚îÄlocation = [312:0x4e8d40000] &lt;chr&gt; \n‚îú‚îÄage_groups = [313:0x4e9a80000] &lt;chr&gt; \n‚îú‚îÄins_type = [314:0x4ea7c0000] &lt;chr&gt; \n‚îî‚îÄage_decade = [315:0x4ec240000] &lt;dbl&gt;"
  },
  {
    "objectID": "materials/slides/02-datatable.html#set-functions",
    "href": "materials/slides/02-datatable.html#set-functions",
    "title": "data.table",
    "section": "set*() Functions",
    "text": "set*() Functions\nMemory-efficient operations by reference\nThe set*() family of functions modify data.table objects directly in memory without creating copies, making them essential for large datasets.\n\nWhy set functions are useful:\n\nMemory efficiency: No copies made, lower RAM usage\nSpeed: Faster than traditional assignment operations\n\nLarge data friendly: Essential when working with datasets that approach memory limits\nConsistent syntax: Uniform approach across different operations"
  },
  {
    "objectID": "materials/slides/02-datatable.html#key-set-functions",
    "href": "materials/slides/02-datatable.html#key-set-functions",
    "title": "data.table",
    "section": "Key set functions:",
    "text": "Key set functions:\n\n# setnames() - rename columns by reference\nsetnames(pums, \"AGEP\", \"age\") \nsetnames(pums, c(\"old1\", \"old2\"), c(\"new1\", \"new2\"))\n\n# setkey() - set keys for fast operations\nsetkey(pums, ST, year)  # Fast lookups and joins\n\n# setorder() - sort by reference\nsetorder(pums, ST, -AGEP)  # Sort by state, then age descending\n\n# set() - general purpose setter\nset(pums, i = 1L, j = \"AGEP\", value = 99L)  # Set specific cell\nset(pums, j = \"new_col\", value = 0L)        # Add column with default value"
  },
  {
    "objectID": "materials/slides/02-datatable.html#tradeoffs-of-modify-by-reference",
    "href": "materials/slides/02-datatable.html#tradeoffs-of-modify-by-reference",
    "title": "data.table",
    "section": "Tradeoffs of Modify by Reference",
    "text": "Tradeoffs of Modify by Reference\n\nNeed to keep track of what is referencing the same data\nUse copies if you want to keep data independent\nWhen done properly, it can be very memory efficient"
  },
  {
    "objectID": "materials/slides/02-datatable.html#what-will-this-do-2",
    "href": "materials/slides/02-datatable.html#what-will-this-do-2",
    "title": "data.table",
    "section": "What will this do?",
    "text": "What will this do?\n\npums2 = pums\nsetnames(pums2, old = \"SPORDER\", new = \"id\")"
  },
  {
    "objectID": "materials/slides/02-datatable.html#what-will-this-do-3",
    "href": "materials/slides/02-datatable.html#what-will-this-do-3",
    "title": "data.table",
    "section": "What will this do?",
    "text": "What will this do?\n\npums2 = pums\nsetnames(pums2, old = \"SPORDER\", new = \"id\")\nnames(pums)\n\n  [1] \"id\"         \"RT\"         \"SERIALNO\"   \"PUMA\"       \"ST\"        \n  [6] \"ADJUST\"     \"PWGTP\"      \"AGEP\"       \"CIT\"        \"COW\"       \n [11] \"DDRS\"       \"DEYE\"       \"DOUT\"       \"DPHY\"       \"DREM\"      \n [16] \"DWRK\"       \"ENG\"        \"FER\"        \"GCL\"        \"GCM\"       \n [21] \"GCR\"        \"INTP\"       \"JWMNP\"      \"JWRIP\"      \"JWTR\"      \n [26] \"LANX\"       \"MAR\"        \"MIG\"        \"MIL\"        \"MILY\"      \n [31] \"MLPA\"       \"MLPB\"       \"MLPC\"       \"MLPD\"       \"MLPE\"      \n [36] \"MLPF\"       \"MLPG\"       \"MLPH\"       \"MLPI\"       \"MLPJ\"      \n [41] \"MLPK\"       \"NWAB\"       \"NWAV\"       \"NWLA\"       \"NWLK\"      \n [46] \"NWRE\"       \"OIP\"        \"PAP\"        \"REL\"        \"RETP\"      \n [51] \"SCH\"        \"SCHG\"       \"SCHL\"       \"SEMP\"       \"SEX\"       \n [56] \"SSIP\"       \"SSP\"        \"WAGP\"       \"WKHP\"       \"WKL\"       \n [61] \"WKW\"        \"YOEP\"       \"UWRK\"       \"ANC\"        \"ANC1P\"     \n [66] \"ANC2P\"      \"DECADE\"     \"DRIVESP\"    \"DS\"         \"ESP\"       \n [71] \"ESR\"        \"HISP\"       \"INDP\"       \"JWAP\"       \"JWDP\"      \n [76] \"LANP\"       \"MIGPUMA\"    \"MIGSP\"      \"MSP\"        \"NAICSP\"    \n [81] \"NATIVITY\"   \"OC\"         \"OCCP\"       \"PAOC\"       \"PERNP\"     \n [86] \"PINCP\"      \"POBP\"       \"POVPIP\"     \"POWPUMA\"    \"POWSP\"     \n [91] \"QTRBIR\"     \"RAC1P\"      \"RAC2P\"      \"RAC3P\"      \"RACAIAN\"   \n [96] \"RACASN\"     \"RACBLK\"     \"RACNHPI\"    \"RACNUM\"     \"RACSOR\"    \n[101] \"RACWHT\"     \"RC\"         \"SFN\"        \"SFR\"        \"SOCP\"      \n[106] \"VPS\"        \"WAOB\"       \"FAGEP\"      \"FANCP\"      \"FCITP\"     \n[111] \"FCOWP\"      \"FDDRSP\"     \"FDEYEP\"     \"FDOUTP\"     \"FDPHYP\"    \n[116] \"FDREMP\"     \"FDWRKP\"     \"FENGP\"      \"FESRP\"      \"FFERP\"     \n[121] \"FGCLP\"      \"FGCMP\"      \"FGCRP\"      \"FHISP\"      \"FINDP\"     \n[126] \"FINTP\"      \"FJWDP\"      \"FJWMNP\"     \"FJWRIP\"     \"FJWTRP\"    \n[131] \"FLANP\"      \"FLANXP\"     \"FMARP\"      \"FMIGP\"      \"FMIGSP\"    \n[136] \"FMILPP\"     \"FMILSP\"     \"FMILYP\"     \"FOCCP\"      \"FOIP\"      \n[141] \"FPAP\"       \"FPOBP\"      \"FPOWSP\"     \"FRACP\"      \"FRELP\"     \n[146] \"FRETP\"      \"FSCHGP\"     \"FSCHLP\"     \"FSCHP\"      \"FSEMP\"     \n[151] \"FSEXP\"      \"FSSIP\"      \"FSSP\"       \"FWAGP\"      \"FWKHP\"     \n[156] \"FWKLP\"      \"FWKWP\"      \"FYOEP\"      \"PWGTP1\"     \"PWGTP2\"    \n[161] \"PWGTP3\"     \"PWGTP4\"     \"PWGTP5\"     \"PWGTP6\"     \"PWGTP7\"    \n[166] \"PWGTP8\"     \"PWGTP9\"     \"PWGTP10\"    \"PWGTP11\"    \"PWGTP12\"   \n[171] \"PWGTP13\"    \"PWGTP14\"    \"PWGTP15\"    \"PWGTP16\"    \"PWGTP17\"   \n[176] \"PWGTP18\"    \"PWGTP19\"    \"PWGTP20\"    \"PWGTP21\"    \"PWGTP22\"   \n[181] \"PWGTP23\"    \"PWGTP24\"    \"PWGTP25\"    \"PWGTP26\"    \"PWGTP27\"   \n[186] \"PWGTP28\"    \"PWGTP29\"    \"PWGTP30\"    \"PWGTP31\"    \"PWGTP32\"   \n[191] \"PWGTP33\"    \"PWGTP34\"    \"PWGTP35\"    \"PWGTP36\"    \"PWGTP37\"   \n[196] \"PWGTP38\"    \"PWGTP39\"    \"PWGTP40\"    \"PWGTP41\"    \"PWGTP42\"   \n[201] \"PWGTP43\"    \"PWGTP44\"    \"PWGTP45\"    \"PWGTP46\"    \"PWGTP47\"   \n[206] \"PWGTP48\"    \"PWGTP49\"    \"PWGTP50\"    \"PWGTP51\"    \"PWGTP52\"   \n[211] \"PWGTP53\"    \"PWGTP54\"    \"PWGTP55\"    \"PWGTP56\"    \"PWGTP57\"   \n[216] \"PWGTP58\"    \"PWGTP59\"    \"PWGTP60\"    \"PWGTP61\"    \"PWGTP62\"   \n[221] \"PWGTP63\"    \"PWGTP64\"    \"PWGTP65\"    \"PWGTP66\"    \"PWGTP67\"   \n[226] \"PWGTP68\"    \"PWGTP69\"    \"PWGTP70\"    \"PWGTP71\"    \"PWGTP72\"   \n[231] \"PWGTP73\"    \"PWGTP74\"    \"PWGTP75\"    \"PWGTP76\"    \"PWGTP77\"   \n[236] \"PWGTP78\"    \"PWGTP79\"    \"PWGTP80\"    \"NOP\"        \"ADJINC\"    \n[241] \"CITWP\"      \"DEAR\"       \"DRAT\"       \"DRATX\"      \"HINS1\"     \n[246] \"HINS2\"      \"HINS3\"      \"HINS4\"      \"HINS5\"      \"HINS6\"     \n[251] \"HINS7\"      \"MARHD\"      \"MARHM\"      \"MARHT\"      \"MARHW\"     \n[256] \"MARHYP\"     \"DIS\"        \"HICOV\"      \"PRIVCOV\"    \"PUBCOV\"    \n[261] \"FCITWP\"     \"FDEARP\"     \"FDRATP\"     \"FDRATXP\"    \"FHINS1P\"   \n[266] \"FHINS2P\"    \"FHINS3P\"    \"FHINS4P\"    \"FHINS5P\"    \"FHINS6P\"   \n[271] \"FHINS7P\"    \"FMARHDP\"    \"FMARHMP\"    \"FMARHTP\"    \"FMARHWP\"   \n[276] \"FMARHYP\"    \"WRK\"        \"FOD1P\"      \"FOD2P\"      \"SCIENGP\"   \n[281] \"SCIENGRLP\"  \"FFODP\"      \"FHINS3C\"    \"FHINS4C\"    \"FHINS5C\"   \n[286] \"RELP\"       \"FWRKP\"      \"FDISP\"      \"FPERNP\"     \"FPINCP\"    \n[291] \"FPRIVCOVP\"  \"FPUBCOVP\"   \"RACNH\"      \"RACPI\"      \"SSPA\"      \n[296] \"MLPCD\"      \"MLPFG\"      \"FHICOVP\"    \"DIVISION\"   \"REGION\"    \n[301] \"HIMRKS\"     \"JWTRNS\"     \"RELSHIPP\"   \"WKWN\"       \"FHIMRKSP\"  \n[306] \"FJWTRNSP\"   \"FRELSHIPP\"  \"FWKWNP\"     \"MLPIK\"      \"year\"      \n[311] \"location\"   \"age_groups\" \"ins_type\"   \"age_decade\""
  },
  {
    "objectID": "materials/slides/02-datatable.html#what-creates-a-copy-besides-copy",
    "href": "materials/slides/02-datatable.html#what-creates-a-copy-besides-copy",
    "title": "data.table",
    "section": "What creates a copy besides copy()",
    "text": "What creates a copy besides copy()\n\n\nWhen you subset the data (select columns or filter rows)\nChange a data.table to a data.frame or tibble\nAggregate or summarizing of the data.table"
  },
  {
    "objectID": "materials/slides/02-datatable.html#api-lifecycle-management",
    "href": "materials/slides/02-datatable.html#api-lifecycle-management",
    "title": "data.table",
    "section": "4. API Lifecycle Management",
    "text": "4. API Lifecycle Management\n‚ÄúI‚Äôm not superstitious, but I am a little stitious.‚Äù\n\nStable and backward compatible\nKey principles:\n\nBackward compatibility maintained\nNew features don‚Äôt break existing code\nClear deprecation warnings when needed"
  },
  {
    "objectID": "materials/slides/02-datatable.html#community",
    "href": "materials/slides/02-datatable.html#community",
    "title": "data.table",
    "section": "5. Community",
    "text": "5. Community\nActive development and strong ecosystem\n\nNew Governance: As part of a NSF grant, new expansive governance\nGitHub: 3,500+ stars, active issues and PRs\nCRAN: Over 2,000 reverse dependencies\nStack Overflow: 15,000+ questions tagged with data.table\nDocumentation: Comprehensive vignettes and examples\nExtensions: dtplyr, data.table.express, tidyfast, tidytable, and more\n\n# Getting help\n?data.table\nvignette(\"datatable-intro\")\nbrowseVignettes(\"data.table\")"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich",
    "href": "materials/slides/02-datatable.html#feature-rich",
    "title": "data.table",
    "section": "6. Feature Rich",
    "text": "6. Feature Rich\nComprehensive data manipulation toolkit\nJoins\n\n# Load household data for comparison\nhousehold_data &lt;- open_dataset(here::here(\"data/household\")) |&gt;\n  filter(year &gt;= 2020, location %in% c(\"ca\", \"tx\", \"ny\")) |&gt;\n  collect()\nsetDT(household_data)\n\n# Create state-year summary from household data\nhousehold_summary &lt;- household_data[, \n  .(avg_income = mean(HINCP, na.rm = TRUE)), \n  by = .(ST, year)\n]\n\n# Join person and household summaries\npums[household_summary, on = c(\"ST\", \"year\")] # merge(pums, household_summary, by = c(\"ST\", \"year\"))\n\n            id            RT      SERIALNO   PUMA          ST ADJUST PWGTP\n         &lt;int&gt;        &lt;fctr&gt;        &lt;char&gt; &lt;char&gt;      &lt;char&gt;  &lt;int&gt; &lt;int&gt;\n      1:     1 Person Record 2021GQ0000077  03301 New York/NY     NA    25\n      2:     1 Person Record 2021GQ0000090  01600 New York/NY     NA    10\n      3:     1 Person Record 2021GQ0000091  03212 New York/NY     NA    72\n      4:     1 Person Record 2021GQ0000094  02100 New York/NY     NA    65\n      5:     1 Person Record 2021GQ0000097  04102 New York/NY     NA     6\n     ---                                                                  \n1735551:     1 Person Record 2022HU0609672  04611    Texas/TX     NA   136\n1735552:     2 Person Record 2022HU0609672  04611    Texas/TX     NA   140\n1735553:     3 Person Record 2022HU0609672  04611    Texas/TX     NA   167\n1735554:     1 Person Record 2022HU0609675  04302    Texas/TX     NA    20\n1735555:     2 Person Record 2022HU0609675  04302    Texas/TX     NA    33\n          AGEP                            CIT\n         &lt;int&gt;                         &lt;fctr&gt;\n      1:    56      Born in the United States\n      2:    48      Born in the United States\n      3:    17      Born in the United States\n      4:    51      Born in the United States\n      5:    85      Born in the United States\n     ---                                     \n1735551:    56 U.S. citizen by naturalization\n1735552:    67 U.S. citizen by naturalization\n1735553:    21      Born in the United States\n1735554:    66      Born in the United States\n1735555:    64      Born in the United States\n                                                                                                       COW\n                                                                                                    &lt;fctr&gt;\n      1:                                                                                              &lt;NA&gt;\n      2:                                                                                              &lt;NA&gt;\n      3:                      Employee of a private not-for-profit, tax-exempt, or charitable organization\n      4:                                                                                              &lt;NA&gt;\n      5:                                                                                              &lt;NA&gt;\n     ---                                                                                                  \n1735551: Employee of a private for-profit co. or bus., or of an individual, for wages, salary, commissions\n1735552: Employee of a private for-profit co. or bus., or of an individual, for wages, salary, commissions\n1735553: Employee of a private for-profit co. or bus., or of an individual, for wages, salary, commissions\n1735554:                                                                                              &lt;NA&gt;\n1735555: Employee of a private for-profit co. or bus., or of an individual, for wages, salary, commissions\n           DDRS   DEYE   DOUT   DPHY   DREM   DWRK       ENG    FER    GCL\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;    &lt;fctr&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE  FALSE  FALSE  FALSE     NA      &lt;NA&gt;     NA  FALSE\n      2:   TRUE  FALSE   TRUE   TRUE   TRUE     NA      &lt;NA&gt;  FALSE  FALSE\n      3:  FALSE  FALSE  FALSE  FALSE   TRUE     NA      &lt;NA&gt;     NA     NA\n      4:  FALSE   TRUE   TRUE  FALSE  FALSE     NA      &lt;NA&gt;     NA  FALSE\n      5:   TRUE  FALSE   TRUE   TRUE  FALSE     NA      &lt;NA&gt;     NA  FALSE\n     ---                                                                  \n1735551:  FALSE  FALSE  FALSE  FALSE   TRUE     NA      Well     NA  FALSE\n1735552:  FALSE  FALSE  FALSE  FALSE  FALSE     NA      Well     NA  FALSE\n1735553:  FALSE  FALSE  FALSE  FALSE  FALSE     NA Very well  FALSE     NA\n1735554:   TRUE  FALSE   TRUE   TRUE   TRUE     NA      &lt;NA&gt;     NA  FALSE\n1735555:  FALSE  FALSE  FALSE   TRUE   TRUE     NA      &lt;NA&gt;     NA  FALSE\n            GCM    GCR  INTP JWMNP  JWRIP   JWTR   LANX\n         &lt;fctr&gt; &lt;lgcl&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;char&gt; &lt;lgcl&gt;\n      1:   &lt;NA&gt;     NA     0    NA   &lt;NA&gt;   &lt;NA&gt;  FALSE\n      2:   &lt;NA&gt;     NA     0    NA   &lt;NA&gt;   &lt;NA&gt;  FALSE\n      3:   &lt;NA&gt;     NA     0    NA   &lt;NA&gt;   &lt;NA&gt;  FALSE\n      4:   &lt;NA&gt;     NA     0    NA   &lt;NA&gt;   &lt;NA&gt;  FALSE\n      5:   &lt;NA&gt;     NA     0    NA   &lt;NA&gt;   &lt;NA&gt;  FALSE\n     ---                                               \n1735551:   &lt;NA&gt;     NA -2400    40      1   &lt;NA&gt;   TRUE\n1735552:   &lt;NA&gt;     NA     0    30      1   &lt;NA&gt;   TRUE\n1735553:   &lt;NA&gt;     NA     0    20      1   &lt;NA&gt;   TRUE\n1735554:   &lt;NA&gt;     NA     0    NA   &lt;NA&gt;   &lt;NA&gt;  FALSE\n1735555:   &lt;NA&gt;     NA     0    30      1   &lt;NA&gt;  FALSE\n                                         MAR    MIG\n                                      &lt;fctr&gt; &lt;lgcl&gt;\n      1: Never married or under 15 years old   TRUE\n      2: Never married or under 15 years old   TRUE\n      3: Never married or under 15 years old  FALSE\n      4: Never married or under 15 years old  FALSE\n      5: Never married or under 15 years old   TRUE\n     ---                                           \n1735551:                             Married   TRUE\n1735552:                             Married   TRUE\n1735553: Never married or under 15 years old   TRUE\n1735554:                             Married   TRUE\n1735555:                             Married   TRUE\n                                  MIL   MILY   MLPA   MLPB   MLPC   MLPD   MLPE\n                               &lt;fctr&gt; &lt;fctr&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n      2: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n      3: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n      4: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n      5: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n     ---                                                                       \n1735551: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n1735552: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n1735553: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n1735554: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n1735555: Never served in the military   &lt;NA&gt;     NA     NA     NA     NA     NA\n           MLPF   MLPG   MLPH   MLPI   MLPJ   MLPK   NWAB              NWAV\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;            &lt;fctr&gt;\n      1:     NA     NA     NA     NA     NA     NA  FALSE    Did not report\n      2:     NA     NA     NA     NA     NA     NA  FALSE    Did not report\n      3:     NA     NA     NA     NA     NA     NA     NA    Did not report\n      4:     NA     NA     NA     NA     NA     NA     NA    Did not report\n      5:     NA     NA     NA     NA     NA     NA  FALSE    Did not report\n     ---                                                                   \n1735551:     NA     NA     NA     NA     NA     NA     NA    Did not report\n1735552:     NA     NA     NA     NA     NA     NA     NA    Did not report\n1735553:     NA     NA     NA     NA     NA     NA     NA    Did not report\n1735554:     NA     NA     NA     NA     NA     NA  FALSE No, other reasons\n1735555:     NA     NA     NA     NA     NA     NA  FALSE               Yes\n           NWLA   NWLK   NWRE   OIP   PAP    REL  RETP    SCH\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;int&gt; &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE     NA  2100     0   &lt;NA&gt;     0  FALSE\n      2:  FALSE  FALSE     NA     0     0   &lt;NA&gt;     0  FALSE\n      3:     NA     NA     NA     0     0   &lt;NA&gt;     0   TRUE\n      4:     NA     NA     NA     0     0   &lt;NA&gt;     0  FALSE\n      5:  FALSE  FALSE     NA 18200     0   &lt;NA&gt; 12000  FALSE\n     ---                                                     \n1735551:     NA     NA     NA     0     0   &lt;NA&gt;     0  FALSE\n1735552:     NA     NA     NA     0     0   &lt;NA&gt;     0  FALSE\n1735553:     NA     NA     NA     0     0   &lt;NA&gt;     0   TRUE\n1735554:  FALSE  FALSE  FALSE     0     0   &lt;NA&gt;     0  FALSE\n1735555:  FALSE  FALSE     NA     0     0   &lt;NA&gt;     0  FALSE\n                                                     SCHG\n                                                   &lt;char&gt;\n      1:                                             &lt;NA&gt;\n      2:                                             &lt;NA&gt;\n      3: College undergraduate years (freshman to senior)\n      4:                                             &lt;NA&gt;\n      5:                                             &lt;NA&gt;\n     ---                                                 \n1735551:                                             &lt;NA&gt;\n1735552:                                             &lt;NA&gt;\n1735553: College undergraduate years (freshman to senior)\n1735554:                                             &lt;NA&gt;\n1735555:                                             &lt;NA&gt;\n                                                 SCHL  SEMP    SEX  SSIP   SSP\n                                               &lt;char&gt; &lt;int&gt; &lt;fctr&gt; &lt;int&gt; &lt;int&gt;\n      1:                                     Grade 10     0   Male     0     0\n      2:                GED or alternative credential     0 Female     0 13800\n      3:           Some college, but less than 1 year     0   Male     0     0\n      4:                                     Grade 10     0   Male     0     0\n      5:                            Bachelor's degree     0   Male     0  6800\n     ---                                                                      \n1735551:                            Bachelor's degree     0 Female     0     0\n1735552:                  Regular high school diploma     0   Male     0     0\n1735553: 1 or more years of college credit, no degree     0 Female     0     0\n1735554:           Some college, but less than 1 year     0   Male  3600 30100\n1735555:                  Regular high school diploma 12100 Female     0     0\n          WAGP  WKHP                              WKL    WKW   YOEP   UWRK\n         &lt;int&gt; &lt;int&gt;                           &lt;fctr&gt; &lt;fctr&gt; &lt;char&gt; &lt;lgcl&gt;\n      1:     0    NA Over 5 years ago or never worked   &lt;NA&gt;   &lt;NA&gt;     NA\n      2:     0    NA Over 5 years ago or never worked   &lt;NA&gt;   &lt;NA&gt;     NA\n      3:  5000    14        Within the past 12 months   &lt;NA&gt;   &lt;NA&gt;     NA\n      4:     0    NA Over 5 years ago or never worked   &lt;NA&gt;   &lt;NA&gt;     NA\n      5:     0    NA Over 5 years ago or never worked   &lt;NA&gt;   &lt;NA&gt;     NA\n     ---                                                                  \n1735551: 30000    40        Within the past 12 months   &lt;NA&gt;   1975     NA\n1735552: 50000    40        Within the past 12 months   &lt;NA&gt;   1957     NA\n1735553: 18000    20        Within the past 12 months   &lt;NA&gt;   &lt;NA&gt;     NA\n1735554:     0    NA Over 5 years ago or never worked   &lt;NA&gt;   &lt;NA&gt;     NA\n1735555: 30100    40        Within the past 12 months   &lt;NA&gt;   &lt;NA&gt;     NA\n                  ANC            ANC1P        ANC2P      DECADE\n               &lt;fctr&gt;           &lt;char&gt;       &lt;char&gt;      &lt;fctr&gt;\n      1:       Single African American Not reported        &lt;NA&gt;\n      2: Not reported     Not reported Not reported        &lt;NA&gt;\n      3: Not reported     Not reported Not reported        &lt;NA&gt;\n      4:       Single African American Not reported        &lt;NA&gt;\n      5:       Single            Irish Not reported        &lt;NA&gt;\n     ---                                                       \n1735551:       Single          Chinese Not reported 1970 - 1979\n1735552:       Single       Vietnamese Not reported 1950 - 1959\n1735553:       Single       Vietnamese Not reported        &lt;NA&gt;\n1735554:       Single            White Not reported        &lt;NA&gt;\n1735555:       Single          Mexican Not reported        &lt;NA&gt;\n                              DRIVESP     DS    ESP                        ESR\n                               &lt;fctr&gt; &lt;lgcl&gt; &lt;fctr&gt;                     &lt;fctr&gt;\n      1:                         &lt;NA&gt;     NA   &lt;NA&gt;         Not in Labor Force\n      2:                         &lt;NA&gt;     NA   &lt;NA&gt;         Not in Labor Force\n      3:                         &lt;NA&gt;     NA   &lt;NA&gt; Civilian employed, at work\n      4:                         &lt;NA&gt;     NA   &lt;NA&gt;         Not in Labor Force\n      5:                         &lt;NA&gt;     NA   &lt;NA&gt;         Not in Labor Force\n     ---                                                                      \n1735551: 1.000 vehicles (Drove alone)     NA   &lt;NA&gt; Civilian employed, at work\n1735552: 1.000 vehicles (Drove alone)     NA   &lt;NA&gt; Civilian employed, at work\n1735553: 1.000 vehicles (Drove alone)     NA   &lt;NA&gt; Civilian employed, at work\n1735554:                         &lt;NA&gt;     NA   &lt;NA&gt;         Not in Labor Force\n1735555: 1.000 vehicles (Drove alone)     NA   &lt;NA&gt; Civilian employed, at work\n                                HISP\n                              &lt;char&gt;\n      1: Not Spanish/Hispanic/Latino\n      2: Not Spanish/Hispanic/Latino\n      3: Not Spanish/Hispanic/Latino\n      4: Not Spanish/Hispanic/Latino\n      5: Not Spanish/Hispanic/Latino\n     ---                            \n1735551: Not Spanish/Hispanic/Latino\n1735552: Not Spanish/Hispanic/Latino\n1735553: Not Spanish/Hispanic/Latino\n1735554: Not Spanish/Hispanic/Latino\n1735555:                     Mexican\n                                                                                    INDP\n                                                                                  &lt;char&gt;\n      1:                                                                            &lt;NA&gt;\n      2:                                                                            &lt;NA&gt;\n      3: EDU-Colleges, Universities, And Professional Schools, Including Junior Colleges\n      4:                                                                            &lt;NA&gt;\n      5:                                                                            &lt;NA&gt;\n     ---                                                                                \n1735551:                                              FIN-Banking And Related Activities\n1735552:                                                          RET-Automobile Dealers\n1735553:      RET-General Merchandise Stores, Including Warehouse Clubs and Supercenters\n1735554:                                                                            &lt;NA&gt;\n1735555:                                            EDU-Elementary And Secondary Schools\n                             JWAP                     JWDP       LANP MIGPUMA\n                           &lt;char&gt;                   &lt;char&gt;     &lt;char&gt;  &lt;fctr&gt;\n      1:                     &lt;NA&gt;                     &lt;NA&gt;       &lt;NA&gt;    &lt;NA&gt;\n      2:                     &lt;NA&gt;                     &lt;NA&gt;       &lt;NA&gt;    &lt;NA&gt;\n      3:                     &lt;NA&gt;                     &lt;NA&gt;       &lt;NA&gt;    &lt;NA&gt;\n      4:                     &lt;NA&gt;                     &lt;NA&gt;       &lt;NA&gt;    &lt;NA&gt;\n      5:                     &lt;NA&gt;                     &lt;NA&gt;       &lt;NA&gt;    &lt;NA&gt;\n     ---                                                                     \n1735551:   7:55 a.m. to 7:59 a.m.   7:15 a.m. to 7:19 a.m. Vietnamese    &lt;NA&gt;\n1735552:   7:30 a.m. to 7:34 a.m.   7:00 a.m. to 7:04 a.m. Vietnamese    &lt;NA&gt;\n1735553: 11:50 a.m. to 11:54 a.m. 11:30 a.m. to 11:39 a.m. Vietnamese    &lt;NA&gt;\n1735554:                     &lt;NA&gt;                     &lt;NA&gt;       &lt;NA&gt;    &lt;NA&gt;\n1735555:   7:00 a.m. to 7:04 a.m.   6:30 a.m. to 6:34 a.m.       &lt;NA&gt;    &lt;NA&gt;\n               MIGSP                         MSP\n              &lt;char&gt;                      &lt;fctr&gt;\n      1:        &lt;NA&gt;               Never Married\n      2:        &lt;NA&gt;               Never Married\n      3: New York/NY               Never Married\n      4: New York/NY               Never Married\n      5:        &lt;NA&gt;               Never Married\n     ---                                        \n1735551:        &lt;NA&gt; Now Married, Spouse Present\n1735552:        &lt;NA&gt; Now Married, Spouse Present\n1735553:        &lt;NA&gt;               Never Married\n1735554:        &lt;NA&gt; Now Married, Spouse Present\n1735555:        &lt;NA&gt; Now Married, Spouse Present\n                                                                                  NAICSP\n                                                                                  &lt;char&gt;\n      1:                                                                            &lt;NA&gt;\n      2:                                                                            &lt;NA&gt;\n      3: EDU-Colleges, Universities, And Professional Schools, Including Junior Colleges\n      4:                                                                            &lt;NA&gt;\n      5:                                                                            &lt;NA&gt;\n     ---                                                                                \n1735551:                                              FIN-Banking And Related Activities\n1735552:                                                          RET-Automobile Dealers\n1735553:      RET-General Merchandise Stores, Including Warehouse Clubs and Supercenters\n1735554:                                                                            &lt;NA&gt;\n1735555:                                            EDU-Elementary And Secondary Schools\n             NATIVITY     OC\n               &lt;fctr&gt; &lt;lgcl&gt;\n      1:       Native     NA\n      2:       Native     NA\n      3:       Native     NA\n      4:       Native     NA\n      5:       Native     NA\n     ---                    \n1735551: Foreign born     NA\n1735552: Foreign born     NA\n1735553:       Native     NA\n1735554:       Native     NA\n1735555:       Native     NA\n                                                          OCCP\n                                                        &lt;char&gt;\n      1:                                                  &lt;NA&gt;\n      2:                                                  &lt;NA&gt;\n      3: EDU-Other Educational Instruction and Library Workers\n      4:                                                  &lt;NA&gt;\n      5:                                                  &lt;NA&gt;\n     ---                                                      \n1735551:                                           OFF-Tellers\n1735552:      RPR-Automotive Service Technicians And Mechanics\n1735553:                              MED-Pharmacy Technicians\n1735554:                                                  &lt;NA&gt;\n1735555:                               EDU-Teaching Assistants\n                                 PAOC PERNP PINCP         POBP POVPIP POWPUMA\n                               &lt;fctr&gt; &lt;int&gt; &lt;int&gt;       &lt;char&gt;  &lt;int&gt;  &lt;fctr&gt;\n      1:                         &lt;NA&gt;     0  2100  New York/NY     15    &lt;NA&gt;\n      2:                         &lt;NA&gt;     0 13800  New York/NY    100    &lt;NA&gt;\n      3:                         &lt;NA&gt;  5000  5000  Illinois/IL     NA    &lt;NA&gt;\n      4:                         &lt;NA&gt;     0     0  New York/NY     NA    &lt;NA&gt;\n      5:                         &lt;NA&gt;     0 37000  New York/NY    293    &lt;NA&gt;\n     ---                                                                     \n1735551: Females with no own children 30000 27600      Vietnam    419    &lt;NA&gt;\n1735552:                         &lt;NA&gt; 50000 50000      Vietnam    419    &lt;NA&gt;\n1735553: Females with no own children 18000 18000     Texas/TX    419    &lt;NA&gt;\n1735554:                         &lt;NA&gt;     0 33700 Minnesota/MN    431    &lt;NA&gt;\n1735555: Females with no own children 42200 42200     Texas/TX    431    &lt;NA&gt;\n               POWSP                   QTRBIR                           RAC1P\n              &lt;char&gt;                   &lt;fctr&gt;                          &lt;fctr&gt;\n      1:        &lt;NA&gt; October through December Black or African American alone\n      2:        &lt;NA&gt;    January through March                     White alone\n      3: New York/NY       April through June                     White alone\n      4:        &lt;NA&gt;    January through March Black or African American alone\n      5:        &lt;NA&gt;       April through June                     White alone\n     ---                                                                     \n1735551:    Texas/TX October through December                     Asian alone\n1735552:    Texas/TX       April through June                     Asian alone\n1735553:    Texas/TX    January through March                     Asian alone\n1735554:        &lt;NA&gt;       April through June                     White alone\n1735555:    Texas/TX       April through June           Some other race alone\n                                   RAC2P                           RAC3P\n                                  &lt;char&gt;                          &lt;char&gt;\n      1: Black or African American alone Black or African American alone\n      2:                     White alone                     White alone\n      3:                     White alone                     White alone\n      4: Black or African American alone Black or African American alone\n      5:                     White alone                     White alone\n     ---                                                                \n1735551:                Vietnamese alone                Vietnamese alone\n1735552:                Vietnamese alone                Vietnamese alone\n1735553:                Vietnamese alone                Vietnamese alone\n1735554:                     White alone                     White alone\n1735555:           Some Other Race alone           Some Other Race alone\n         RACAIAN RACASN RACBLK RACNHPI RACNUM RACSOR RACWHT     RC    SFN\n          &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;int&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;fctr&gt;\n      1:   FALSE  FALSE   TRUE      NA      1  FALSE  FALSE     NA   &lt;NA&gt;\n      2:   FALSE  FALSE  FALSE      NA      1  FALSE   TRUE     NA   &lt;NA&gt;\n      3:   FALSE  FALSE  FALSE      NA      1  FALSE   TRUE     NA   &lt;NA&gt;\n      4:   FALSE  FALSE   TRUE      NA      1  FALSE  FALSE     NA   &lt;NA&gt;\n      5:   FALSE  FALSE  FALSE      NA      1  FALSE   TRUE     NA   &lt;NA&gt;\n     ---                                                                 \n1735551:   FALSE   TRUE  FALSE      NA      1  FALSE  FALSE     NA   &lt;NA&gt;\n1735552:   FALSE   TRUE  FALSE      NA      1  FALSE  FALSE     NA   &lt;NA&gt;\n1735553:   FALSE   TRUE  FALSE      NA      1  FALSE  FALSE     NA   &lt;NA&gt;\n1735554:   FALSE  FALSE  FALSE      NA      1  FALSE   TRUE     NA   &lt;NA&gt;\n1735555:   FALSE  FALSE  FALSE      NA      1   TRUE  FALSE     NA   &lt;NA&gt;\n            SFR                                                  SOCP    VPS\n         &lt;fctr&gt;                                                &lt;char&gt; &lt;char&gt;\n      1:   &lt;NA&gt;                                                  &lt;NA&gt;   &lt;NA&gt;\n      2:   &lt;NA&gt;                                                  &lt;NA&gt;   &lt;NA&gt;\n      3:   &lt;NA&gt; EDU-Other Educational Instruction and Library Workers   &lt;NA&gt;\n      4:   &lt;NA&gt;                                                  &lt;NA&gt;   &lt;NA&gt;\n      5:   &lt;NA&gt;                                                  &lt;NA&gt;   &lt;NA&gt;\n     ---                                                                    \n1735551:   &lt;NA&gt;                                           OFF-Tellers   &lt;NA&gt;\n1735552:   &lt;NA&gt;      RPR-Automotive Service Technicians And Mechanics   &lt;NA&gt;\n1735553:   &lt;NA&gt;                              MED-Pharmacy Technicians   &lt;NA&gt;\n1735554:   &lt;NA&gt;                                                  &lt;NA&gt;   &lt;NA&gt;\n1735555:   &lt;NA&gt;                               EDU-Teaching Assistants   &lt;NA&gt;\n                                      WAOB  FAGEP  FANCP  FCITP  FCOWP FDDRSP\n                                    &lt;fctr&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n      2:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n      3:         US state (POBP = 001-059)  FALSE  FALSE   TRUE   TRUE   TRUE\n      4:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n      5:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n     ---                                                                     \n1735551: Asia (POBP = 158-159,161,200-299)  FALSE  FALSE  FALSE  FALSE  FALSE\n1735552: Asia (POBP = 158-159,161,200-299)  FALSE  FALSE  FALSE  FALSE  FALSE\n1735553:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n1735554:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n1735555:         US state (POBP = 001-059)  FALSE  FALSE  FALSE  FALSE  FALSE\n         FDEYEP FDOUTP FDPHYP FDREMP FDWRKP  FENGP  FESRP  FFERP  FGCLP  FGCMP\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n      2:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n      3:   TRUE   TRUE   TRUE   TRUE     NA  FALSE   TRUE  FALSE  FALSE  FALSE\n      4:  FALSE  FALSE  FALSE   TRUE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n      5:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n     ---                                                                      \n1735551:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n1735552:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n1735553:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n1735554:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n1735555:  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE\n          FGCRP  FHISP  FINDP  FINTP  FJWDP FJWMNP FJWRIP FJWTRP  FLANP FLANXP\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n      2:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n      3:  FALSE  FALSE   TRUE   TRUE  FALSE  FALSE  FALSE     NA  FALSE   TRUE\n      4:  FALSE  FALSE  FALSE   TRUE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n      5:  FALSE  FALSE  FALSE   TRUE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n     ---                                                                      \n1735551:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n1735552:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n1735553:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n1735554:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE\n1735555:  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE   TRUE\n          FMARP  FMIGP FMIGSP FMILPP FMILSP FMILYP  FOCCP   FOIP   FPAP  FPOBP\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n      2:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n      3:   TRUE   TRUE   TRUE  FALSE   TRUE     NA   TRUE   TRUE   TRUE   TRUE\n      4:  FALSE  FALSE   TRUE  FALSE   TRUE     NA  FALSE   TRUE   TRUE  FALSE\n      5:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE   TRUE   TRUE  FALSE\n     ---                                                                      \n1735551:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n1735552:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n1735553:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n1735554:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n1735555:  FALSE  FALSE  FALSE  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE\n         FPOWSP  FRACP  FRELP  FRETP FSCHGP FSCHLP  FSCHP  FSEMP  FSEXP  FSSIP\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n      2:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n      3:  FALSE  FALSE     NA   TRUE   TRUE   TRUE  FALSE   TRUE  FALSE   TRUE\n      4:  FALSE  FALSE     NA   TRUE  FALSE  FALSE  FALSE   TRUE  FALSE   TRUE\n      5:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE   TRUE\n     ---                                                                      \n1735551:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n1735552:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n1735553:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n1735554:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE   TRUE\n1735555:  FALSE  FALSE     NA  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n           FSSP  FWAGP  FWKHP  FWKLP  FWKWP  FYOEP PWGTP1 PWGTP2 PWGTP3 PWGTP4\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n      1:  FALSE  FALSE  FALSE  FALSE     NA  FALSE     23     23      1     24\n      2:   TRUE  FALSE  FALSE  FALSE     NA  FALSE     10     18      1      9\n      3:   TRUE   TRUE   TRUE   TRUE     NA  FALSE     10    122     77    133\n      4:   TRUE   TRUE  FALSE   TRUE     NA  FALSE     67    117    121    117\n      5:   TRUE  FALSE  FALSE  FALSE     NA  FALSE      7      0     11      6\n     ---                                                                      \n1735551:  FALSE  FALSE  FALSE  FALSE     NA   TRUE     35    231    139    217\n1735552:  FALSE  FALSE  FALSE  FALSE     NA   TRUE     41    236    143    221\n1735553:  FALSE  FALSE  FALSE  FALSE     NA  FALSE     50    285    180    237\n1735554:  FALSE  FALSE  FALSE  FALSE     NA  FALSE      5     31      6     16\n1735555:  FALSE  FALSE  FALSE  FALSE     NA  FALSE      6     65      9     27\n         PWGTP5 PWGTP6 PWGTP7 PWGTP8 PWGTP9 PWGTP10 PWGTP11 PWGTP12 PWGTP13\n          &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:     45      2      1     49     23      22      48      24      46\n      2:      2     10     20      9     18       0      10      17      18\n      3:     72      9     78     10    138      76      10      10      75\n      4:     61     68     65     68     62      15      14      15      63\n      5:      1      1      7      5      6       5       4      10       5\n     ---                                                                   \n1735551:    149     36    153     44    198     123      40      42     139\n1735552:    157     35    139     41    196     132      44      46     151\n1735553:    179     46    206     54    250     133      50      53     167\n1735554:     25     28     31     41     23      16       5      40      17\n1735555:     45     42     64     52     35      28       7      49      31\n         PWGTP14 PWGTP15 PWGTP16 PWGTP17 PWGTP18 PWGTP19 PWGTP20 PWGTP21\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      26      24      25       2      23       2      44      22\n      2:       8      10      12       9      10       2       2       9\n      3:      68      80      65      73     128      69     134       9\n      4:     118      69      15      68      65      15      17      61\n      5:       1      11       5      11       6       0      11       7\n     ---                                                                \n1735551:     160     130     142     117     170     162      53     187\n1735552:     152     141     161     117     183     168      53     216\n1735553:     178     152     187     142     212     232      54     267\n1735554:       5      23      22      24      17       6       6      26\n1735555:      10      30      33      40      25      10      12      38\n         PWGTP22 PWGTP23 PWGTP24 PWGTP25 PWGTP26 PWGTP27 PWGTP28 PWGTP29\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      23       3      25      46       2       2      48      25\n      2:      18       2      10       2       9      17      10      18\n      3:     126      77     139      68      10      70      10     136\n      4:      15      14      15      67      60      64      65      66\n      5:       0      10       5       0       1       5       5       5\n     ---                                                                \n1735551:      49     134      40     179     218     141     198      36\n1735552:      53     141      42     169     206     139     208      36\n1735553:      70     164      38     202     218     167     256      40\n1735554:      19      25      29       6      18      18      16      34\n1735555:      26      47      46      10      46      27      28      63\n         PWGTP30 PWGTP31 PWGTP32 PWGTP33 PWGTP34 PWGTP35 PWGTP36 PWGTP37\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      23      44      26      44      24      24      23       3\n      2:       2       9      20      17      10       9       9      10\n      3:      73      12      11      71      67      72      74      75\n      4:     118     111     111      66      15      66     116      65\n      5:       6       5      11       5       0      11       5      11\n     ---                                                                \n1735551:     127     224     190     132     141     141     161     138\n1735552:     129     231     203     137     126     145     172     129\n1735553:     172     278     243     197     177     177     204     153\n1735554:       6      16      21      34      19      40      34       7\n1735555:      13      25      41      89      33      58      59      12\n         PWGTP38 PWGTP39 PWGTP40 PWGTP41 PWGTP42 PWGTP43 PWGTP44 PWGTP45\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      23       3       1      23      23      45      24       1\n      2:       9       2      18       9       1      18      10      18\n      3:     130      70     141      11     126      71     123      79\n      4:      70     112      15      65      15      15      15      64\n      5:       6       0      10       6       1      11       5       2\n     ---                                                                \n1735551:      33     163     275      41     221     141     210     131\n1735552:      35     156     288      39     248     140     209     142\n1735553:      41     188     336      46     263     164     255     156\n1735554:       5      22      20       6      40       8      16      18\n1735555:       7      38      34       8      54       8      27      42\n         PWGTP46 PWGTP47 PWGTP48 PWGTP49 PWGTP50 PWGTP51 PWGTP52 PWGTP53\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      48      48       1      24      24       1      22       1\n      2:      10       1       9       0      19       8       0       1\n      3:      13      67      12     136      66      11      11      73\n      4:      66      65      68      61     114     124     113      64\n      5:       0       5       6       5       7       5      10       6\n     ---                                                                \n1735551:      38     154      47     230     121      41      34     107\n1735552:      40     159      45     223     140      44      35     105\n1735553:      48     181      59     240     151      47      41     143\n1735554:      33      31      29      22      17       5      37      17\n1735555:      61      54      43      33      19       9      77      31\n         PWGTP54 PWGTP55 PWGTP56 PWGTP57 PWGTP58 PWGTP59 PWGTP60 PWGTP61\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      25      24      24      45      25      46       1      24\n      2:      10      10       9      10       9      17      19      10\n      3:      76      70      77      76     129      70     139      10\n      4:      14      68     123      62      64     114     117      66\n      5:       1      10       4      10       6       0      11       7\n     ---                                                                \n1735551:     145     156     142     145     209     141      41     201\n1735552:     144     156     151     154     196     152      50     209\n1735553:     179     175     196     158     249     211      58     300\n1735554:       5      20      21      18      18       8       7      23\n1735555:      10      50      28      29      31      13      11      50\n         PWGTP62 PWGTP63 PWGTP64 PWGTP65 PWGTP66 PWGTP67 PWGTP68 PWGTP69\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      24      47      24       3      47      46       1      24\n      2:       1      17       9      18      10       2       9       1\n      3:     122      68     130      71      13      66      10     130\n      4:     118     114     124      70      66      64      65      69\n      5:       1      11       5       1       0       5       5       6\n     ---                                                                \n1735551:      46     148      39     127     193     121     255      38\n1735552:      49     158      37     134     192     130     268      41\n1735553:      64     167      40     181     233     162     327      49\n1735554:      15      19      29       5      21      26      20      32\n1735555:      22      36      37       9      40      39      25      47\n         PWGTP70 PWGTP71 PWGTP72 PWGTP73 PWGTP74 PWGTP75 PWGTP76 PWGTP77\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n      1:      23       3      25       1      24      24      23      43\n      2:      17       9       1       0      10      10       9       9\n      3:      77      12      12      67      79      76      71      71\n      4:      15      13      14      64     119      67      13      63\n      5:       6       6      11       5       0      11       5      10\n     ---                                                                \n1735551:     124     208     208     124     139     172     156     151\n1735552:     135     193     212     123     128     159     169     186\n1735553:     150     277     220     174     172     183     227     208\n1735554:       4      16      21      40      20      36      42       7\n1735555:       8      30      52      67      32      82      67      16\n         PWGTP78 PWGTP79 PWGTP80    NOP   ADJINC  CITWP   DEAR   DRAT  DRATX\n           &lt;int&gt;   &lt;int&gt;   &lt;int&gt; &lt;fctr&gt;    &lt;num&gt; &lt;char&gt; &lt;lgcl&gt; &lt;fctr&gt; &lt;lgcl&gt;\n      1:      24      48      46   &lt;NA&gt; 1.029928   &lt;NA&gt;  FALSE   &lt;NA&gt;     NA\n      2:      10      19       0   &lt;NA&gt; 1.029928   &lt;NA&gt;  FALSE   &lt;NA&gt;     NA\n      3:     138      71     120   &lt;NA&gt; 1.029928   &lt;NA&gt;  FALSE   &lt;NA&gt;     NA\n      4:      68      15     110   &lt;NA&gt; 1.029928   &lt;NA&gt;   TRUE   &lt;NA&gt;     NA\n      5:       6       0      10   &lt;NA&gt; 1.029928   &lt;NA&gt;   TRUE   &lt;NA&gt;     NA\n     ---                                                                    \n1735551:      43     130     245   &lt;NA&gt; 1.042311   1989  FALSE   &lt;NA&gt;     NA\n1735552:      42     138     275   &lt;NA&gt; 1.042311   1993  FALSE   &lt;NA&gt;     NA\n1735553:      50     158     344   &lt;NA&gt; 1.042311   &lt;NA&gt;  FALSE   &lt;NA&gt;     NA\n1735554:       5      19      22   &lt;NA&gt; 1.042311   &lt;NA&gt;   TRUE   &lt;NA&gt;     NA\n1735555:       9      46      44   &lt;NA&gt; 1.042311   &lt;NA&gt;  FALSE   &lt;NA&gt;     NA\n          HINS1  HINS2  HINS3  HINS4  HINS5  HINS6  HINS7  MARHD  MARHM\n         &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE  FALSE   TRUE  FALSE  FALSE  FALSE     NA     NA\n      2:  FALSE  FALSE   TRUE   TRUE  FALSE  FALSE  FALSE     NA     NA\n      3:   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE     NA     NA\n      4:  FALSE  FALSE  FALSE   TRUE  FALSE  FALSE  FALSE     NA     NA\n      5:   TRUE  FALSE   TRUE  FALSE  FALSE  FALSE  FALSE     NA     NA\n     ---                                                               \n1735551:   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n1735552:   TRUE   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n1735553:  FALSE   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE     NA     NA\n1735554:   TRUE  FALSE   TRUE   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE\n1735555:   TRUE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE  FALSE\n            MARHT  MARHW MARHYP    DIS  HICOV PRIVCOV PUBCOV FCITWP FDEARP\n           &lt;fctr&gt; &lt;lgcl&gt; &lt;char&gt; &lt;lgcl&gt; &lt;lgcl&gt;  &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:     &lt;NA&gt;     NA   &lt;NA&gt;  FALSE   TRUE   FALSE   TRUE  FALSE  FALSE\n      2:     &lt;NA&gt;     NA   &lt;NA&gt;   TRUE   TRUE   FALSE   TRUE  FALSE  FALSE\n      3:     &lt;NA&gt;     NA   &lt;NA&gt;   TRUE   TRUE    TRUE  FALSE  FALSE   TRUE\n      4:     &lt;NA&gt;     NA   &lt;NA&gt;   TRUE   TRUE   FALSE   TRUE  FALSE  FALSE\n      5:     &lt;NA&gt;     NA   &lt;NA&gt;   TRUE   TRUE    TRUE   TRUE  FALSE  FALSE\n     ---                                                                  \n1735551: One time  FALSE   1998   TRUE   TRUE    TRUE  FALSE  FALSE  FALSE\n1735552: One time  FALSE   1998  FALSE   TRUE    TRUE  FALSE  FALSE  FALSE\n1735553:     &lt;NA&gt;     NA   &lt;NA&gt;  FALSE   TRUE    TRUE  FALSE  FALSE  FALSE\n1735554: One time  FALSE   1974   TRUE   TRUE    TRUE   TRUE  FALSE  FALSE\n1735555: One time  FALSE   1974   TRUE   TRUE    TRUE  FALSE  FALSE  FALSE\n         FDRATP FDRATXP FHINS1P FHINS2P FHINS3P FHINS4P FHINS5P FHINS6P FHINS7P\n         &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;\n      1:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n      2:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n      3:  FALSE   FALSE    TRUE    TRUE    TRUE    TRUE    TRUE    TRUE    TRUE\n      4:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n      5:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n     ---                                                                       \n1735551:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n1735552:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n1735553:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n1735554:  FALSE   FALSE   FALSE    TRUE   FALSE   FALSE    TRUE    TRUE    TRUE\n1735555:  FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE   FALSE\n         FMARHDP FMARHMP FMARHTP FMARHWP FMARHYP    WRK            FOD1P  FOD2P\n          &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt;  &lt;lgcl&gt; &lt;lgcl&gt;           &lt;char&gt; &lt;char&gt;\n      1:   FALSE   FALSE   FALSE   FALSE   FALSE  FALSE             &lt;NA&gt;   &lt;NA&gt;\n      2:   FALSE   FALSE   FALSE   FALSE   FALSE  FALSE             &lt;NA&gt;   &lt;NA&gt;\n      3:   FALSE   FALSE   FALSE   FALSE   FALSE     NA             &lt;NA&gt;   &lt;NA&gt;\n      4:   FALSE   FALSE   FALSE   FALSE   FALSE     NA             &lt;NA&gt;   &lt;NA&gt;\n      5:   FALSE   FALSE   FALSE   FALSE   FALSE  FALSE        Sociology   &lt;NA&gt;\n     ---                                                                       \n1735551:   FALSE   FALSE   FALSE   FALSE   FALSE   TRUE General Business   &lt;NA&gt;\n1735552:   FALSE   FALSE   FALSE   FALSE   FALSE   TRUE             &lt;NA&gt;   &lt;NA&gt;\n1735553:   FALSE   FALSE   FALSE   FALSE   FALSE   TRUE             &lt;NA&gt;   &lt;NA&gt;\n1735554:   FALSE   FALSE   FALSE   FALSE   FALSE  FALSE             &lt;NA&gt;   &lt;NA&gt;\n1735555:   FALSE   FALSE   FALSE   FALSE   FALSE   TRUE             &lt;NA&gt;   &lt;NA&gt;\n         SCIENGP SCIENGRLP  FFODP FHINS3C FHINS4C FHINS5C   RELP  FWRKP  FDISP\n          &lt;lgcl&gt;    &lt;lgcl&gt; &lt;lgcl&gt;  &lt;fctr&gt;  &lt;fctr&gt;  &lt;fctr&gt; &lt;char&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:      NA        NA  FALSE    &lt;NA&gt;      No    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n      2:      NA        NA  FALSE      No      No    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n      3:      NA        NA  FALSE    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;  FALSE   TRUE\n      4:      NA        NA  FALSE    &lt;NA&gt;      No    &lt;NA&gt;   &lt;NA&gt;  FALSE   TRUE\n      5:    TRUE     FALSE  FALSE      No    &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n     ---                                                                      \n1735551:   FALSE     FALSE  FALSE    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n1735552:      NA        NA  FALSE    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n1735553:      NA        NA  FALSE    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n1735554:      NA        NA  FALSE      No     Yes    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n1735555:      NA        NA  FALSE    &lt;NA&gt;    &lt;NA&gt;    &lt;NA&gt;   &lt;NA&gt;  FALSE  FALSE\n         FPERNP FPINCP FPRIVCOVP FPUBCOVP  RACNH  RACPI   SSPA  MLPCD  MLPFG\n         &lt;lgcl&gt; &lt;lgcl&gt;    &lt;lgcl&gt;   &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;fctr&gt; &lt;lgcl&gt; &lt;lgcl&gt;\n      1:  FALSE  FALSE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n      2:  FALSE   TRUE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n      3:   TRUE   TRUE      TRUE     TRUE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n      4:   TRUE   TRUE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n      5:  FALSE   TRUE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n     ---                                                                    \n1735551:  FALSE  FALSE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n1735552:  FALSE  FALSE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n1735553:  FALSE  FALSE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n1735554:  FALSE   TRUE      TRUE     TRUE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n1735555:  FALSE  FALSE     FALSE    FALSE  FALSE  FALSE   &lt;NA&gt;     NA     NA\n         FHICOVP                           DIVISION    REGION\n          &lt;lgcl&gt;                             &lt;fctr&gt;    &lt;fctr&gt;\n      1:   FALSE Middle Atlantic (Northeast region) Northeast\n      2:   FALSE Middle Atlantic (Northeast region) Northeast\n      3:    TRUE Middle Atlantic (Northeast region) Northeast\n      4:   FALSE Middle Atlantic (Northeast region) Northeast\n      5:   FALSE Middle Atlantic (Northeast region) Northeast\n     ---                                                     \n1735551:   FALSE  West South Central (South Region)     South\n1735552:   FALSE  West South Central (South Region)     South\n1735553:   FALSE  West South Central (South Region)     South\n1735554:    TRUE  West South Central (South Region)     South\n1735555:   FALSE  West South Central (South Region)     South\n                                                      HIMRKS             JWTRNS\n                                                      &lt;fctr&gt;             &lt;char&gt;\n      1:                Categorically ineligible for subsidy               &lt;NA&gt;\n      2:                Categorically ineligible for subsidy               &lt;NA&gt;\n      3:                Categorically ineligible for subsidy   Worked from home\n      4:                Categorically ineligible for subsidy               &lt;NA&gt;\n      5:                Categorically ineligible for subsidy               &lt;NA&gt;\n     ---                                                                       \n1735551:                Categorically ineligible for subsidy Car, truck, or van\n1735552: Direct purchase coverage, without a premium subsidy Car, truck, or van\n1735553: Direct purchase coverage, without a premium subsidy Car, truck, or van\n1735554:                Categorically ineligible for subsidy               &lt;NA&gt;\n1735555:                Categorically ineligible for subsidy Car, truck, or van\n                                               RELSHIPP  WKWN FHIMRKSP FJWTRNSP\n                                                 &lt;char&gt; &lt;int&gt;   &lt;lgcl&gt;   &lt;lgcl&gt;\n      1: Noninstitutionalized group quarters population    NA    FALSE    FALSE\n      2: Noninstitutionalized group quarters population    NA    FALSE    FALSE\n      3: Noninstitutionalized group quarters population    40    FALSE     TRUE\n      4:    Institutionalized group quarters population    NA    FALSE    FALSE\n      5: Noninstitutionalized group quarters population    NA    FALSE    FALSE\n     ---                                                                       \n1735551:                               Reference person    52    FALSE    FALSE\n1735552:               Opposite-sex husband/wife/spouse    52    FALSE    FALSE\n1735553:                     Biological son or daughter    52    FALSE    FALSE\n1735554:                               Reference person    NA    FALSE    FALSE\n1735555:               Opposite-sex husband/wife/spouse    37    FALSE    FALSE\n         FRELSHIPP FWKWNP  MLPIK  year location age_groups ins_type age_decade\n            &lt;lgcl&gt; &lt;lgcl&gt; &lt;lgcl&gt; &lt;int&gt;   &lt;char&gt;     &lt;char&gt;   &lt;char&gt;      &lt;num&gt;\n      1:     FALSE  FALSE     NA  2021       ny      18-64 Medicaid         50\n      2:     FALSE  FALSE     NA  2021       ny      18-64 Medicare         40\n      3:     FALSE   TRUE     NA  2021       ny   Under 18 employer         10\n      4:     FALSE  FALSE     NA  2021       ny      18-64 Medicaid         50\n      5:     FALSE  FALSE     NA  2021       ny        65+ employer         80\n     ---                                                                      \n1735551:     FALSE  FALSE     NA  2022       tx      18-64 employer         50\n1735552:     FALSE  FALSE     NA  2022       tx        65+ employer         60\n1735553:     FALSE  FALSE     NA  2022       tx      18-64   direct         20\n1735554:     FALSE  FALSE     NA  2022       tx        65+ employer         60\n1735555:     FALSE  FALSE     NA  2022       tx      18-64 employer         60\n         avg_income\n              &lt;num&gt;\n      1:   109935.7\n      2:   109935.7\n      3:   109935.7\n      4:   109935.7\n      5:   109935.7\n     ---           \n1735551:   103775.2\n1735552:   103775.2\n1735553:   103775.2\n1735554:   103775.2\n1735555:   103775.2"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich-1",
    "href": "materials/slides/02-datatable.html#feature-rich-1",
    "title": "data.table",
    "section": "Feature Rich",
    "text": "Feature Rich\nReshaping\n\n# Pivot longer - select key demographics\npums_long &lt;- melt(\n  pums, \n  id.vars = c(\"ST\", \"year\", \"SERIALNO\"),\n  measure.vars = c(\"AGEP\", \"PWGTP\", \"PINCP\")\n)\npums_long\n\n                  ST  year      SERIALNO variable value\n              &lt;char&gt; &lt;int&gt;        &lt;char&gt;   &lt;fctr&gt; &lt;int&gt;\n      1: New York/NY  2021 2021GQ0000077     AGEP    56\n      2: New York/NY  2021 2021GQ0000090     AGEP    48\n      3: New York/NY  2021 2021GQ0000091     AGEP    17\n      4: New York/NY  2021 2021GQ0000094     AGEP    51\n      5: New York/NY  2021 2021GQ0000097     AGEP    85\n     ---                                               \n5206661:    Texas/TX  2022 2022HU0609672    PINCP 27600\n5206662:    Texas/TX  2022 2022HU0609672    PINCP 50000\n5206663:    Texas/TX  2022 2022HU0609672    PINCP 18000\n5206664:    Texas/TX  2022 2022HU0609675    PINCP 33700\n5206665:    Texas/TX  2022 2022HU0609675    PINCP 42200\n\n# Pivot wider - average by state/year\npums_summary &lt;- pums[, \n  .(avg_age = mean(AGEP, na.rm = TRUE),\n    avg_income = mean(PINCP, na.rm = TRUE)), \n  by = .(ST, year)\n]\ndcast(pums_summary, ST ~ year, value.var = \"avg_age\")\n\nKey: &lt;ST&gt;\n              ST     2021     2022\n          &lt;char&gt;    &lt;num&gt;    &lt;num&gt;\n1: California/CA 41.47709 41.54009\n2:   New York/NY 43.12366 43.18311\n3:      Texas/TX 40.59856 40.82080"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich-2",
    "href": "materials/slides/02-datatable.html#feature-rich-2",
    "title": "data.table",
    "section": "Feature Rich",
    "text": "Feature Rich\nRolling operations\n\n# Population change over time by state\npums_yearly &lt;- pums[, .(pop = sum(PWGTP)), by = .(ST, year)]\nsetkey(pums_yearly, ST, year)\n\n# Calculate 2-year rolling average (limited years available)\npums_yearly[, pop_2yr_avg := frollmean(pop, 2), by = ST]\npums_yearly\n\nKey: &lt;ST, year&gt;\n              ST  year      pop pop_2yr_avg\n          &lt;char&gt; &lt;int&gt;    &lt;int&gt;       &lt;num&gt;\n1: California/CA  2021 39237836          NA\n2: California/CA  2022 39029342    39133589\n3:   New York/NY  2021 19835913          NA\n4:   New York/NY  2022 19677151    19756532\n5:      Texas/TX  2021 29527941          NA\n6:      Texas/TX  2022 30029572    29778756"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich-3",
    "href": "materials/slides/02-datatable.html#feature-rich-3",
    "title": "data.table",
    "section": "Feature Rich",
    "text": "Feature Rich\nRolling Joins\n\nbenefit_thresholds &lt;- data.table(\n  age_threshold = c(18, 25, 35, 50, 62, 67),\n  benefit_type = c(\"Youth\", \"Young Adult\", \"Adult\", \"Mid-Career\", \"Pre-Retirement\", \"Senior\"),\n  max_benefit = c(500, 800, 1200, 1500, 2000, 2500)\n)\nsetkey(benefit_thresholds, age_threshold)\nbenefit_thresholds\n\nKey: &lt;age_threshold&gt;\n   age_threshold   benefit_type max_benefit\n           &lt;num&gt;         &lt;char&gt;       &lt;num&gt;\n1:            18          Youth         500\n2:            25    Young Adult         800\n3:            35          Adult        1200\n4:            50     Mid-Career        1500\n5:            62 Pre-Retirement        2000\n6:            67         Senior        2500\n\n\n. . .\n\n# Rolling join to assign benefits based on nearest age threshold\npums[\n  benefit_thresholds, \n  benefit_category := benefit_type, \n  on = .(AGEP = age_threshold), \n  roll = -Inf\n]\npums[, .(AGEP, benefit_category, ins_type, location)]\n\n          AGEP benefit_category ins_type location\n         &lt;int&gt;           &lt;char&gt;   &lt;char&gt;   &lt;char&gt;\n      1:    56             &lt;NA&gt; Medicaid       ny\n      2:    48             &lt;NA&gt; Medicare       ny\n      3:    17             &lt;NA&gt; employer       ny\n      4:    51             &lt;NA&gt; Medicaid       ny\n      5:    85             &lt;NA&gt; employer       ny\n     ---                                         \n1735551:    56             &lt;NA&gt; employer       tx\n1735552:    67           Senior employer       tx\n1735553:    21             &lt;NA&gt;   direct       tx\n1735554:    66             &lt;NA&gt; employer       tx\n1735555:    64             &lt;NA&gt; employer       tx\n\n\nroll = \"nearest\" or roll = +Inf are also possible"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich-4",
    "href": "materials/slides/02-datatable.html#feature-rich-4",
    "title": "data.table",
    "section": "Feature Rich",
    "text": "Feature Rich\nOperators - Core Symbols\nEssential data.table operators for efficient data manipulation\n\n# .N - Number of rows in each group\npums[, .N, by = ST]  # Count rows by state\n\n              ST      N\n          &lt;char&gt;  &lt;int&gt;\n1:   New York/NY 403958\n2:      Texas/TX 554365\n3: California/CA 777232\n\n# .SD - Subset of Data (all columns except grouping)\npums[, names(.SD) := lapply(.SD, mean, na.rm = TRUE), by = ST, .SDcols = c(\"AGEP\", \"PINCP\")]\npums[, .(ST, AGEP, PINCP)]\n\n                  ST  AGEP PINCP\n              &lt;char&gt; &lt;int&gt; &lt;int&gt;\n      1: New York/NY    43 52025\n      2: New York/NY    43 52025\n      3: New York/NY    43 52025\n      4: New York/NY    43 52025\n      5: New York/NY    43 52025\n     ---                        \n1735551:    Texas/TX    40 45756\n1735552:    Texas/TX    40 45756\n1735553:    Texas/TX    40 45756\n1735554:    Texas/TX    40 45756\n1735555:    Texas/TX    40 45756\n\n# .BY - List of grouping variables\npums[, .(mean_age = mean(AGEP), state = gsub(\"/.*$\", \"\", .BY)), by = ST]\n\n              ST mean_age      state\n          &lt;char&gt;    &lt;num&gt;     &lt;char&gt;\n1:   New York/NY       43   New York\n2:      Texas/TX       40      Texas\n3: California/CA       41 California\n\n# .I - Row indices \npums[, .I[which.max(AGEP)], by = ST]  # Index of oldest person per state\n\n              ST     V1\n          &lt;char&gt;  &lt;int&gt;\n1:   New York/NY      1\n2:      Texas/TX 200068\n3: California/CA 232836"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich-5",
    "href": "materials/slides/02-datatable.html#feature-rich-5",
    "title": "data.table",
    "section": "Feature Rich",
    "text": "Feature Rich\nOperators - Advanced Features\nSpecialized operators for complex operations\n\n# .EACHI - For each item in i (useful with joins)\nhousehold_summary[pums, on = .(ST, year), mean(AGEP), by = .EACHI]\n\n                  ST  year    V1\n              &lt;char&gt; &lt;int&gt; &lt;num&gt;\n      1: New York/NY  2021    43\n      2: New York/NY  2021    43\n      3: New York/NY  2021    43\n      4: New York/NY  2021    43\n      5: New York/NY  2021    43\n     ---                        \n1735551:    Texas/TX  2022    40\n1735552:    Texas/TX  2022    40\n1735553:    Texas/TX  2022    40\n1735554:    Texas/TX  2022    40\n1735555:    Texas/TX  2022    40\n\n# .GRP - Group counter (1, 2, 3, ...)\npums[, .(grp_num = .GRP, pop = sum(PWGTP)), by = ST]\n\n              ST grp_num      pop\n          &lt;char&gt;   &lt;int&gt;    &lt;int&gt;\n1:   New York/NY       1 39513064\n2:      Texas/TX       2 59557513\n3: California/CA       3 78267178\n\n# Multiple .SD operations with .SDcols\npums[, {\n    means &lt;- lapply(.SD, mean, na.rm = TRUE)\n    medians &lt;- lapply(.SD, median, na.rm = TRUE)\n    vars &lt;- names(.SD)\n    .(vars, means, medians)\n  }, \n  by = ST, \n  .SDcols = c(\"AGEP\", \"PINCP\", \"PWGTP\")\n]\n\n              ST   vars    means medians\n          &lt;char&gt; &lt;char&gt;   &lt;list&gt;  &lt;list&gt;\n1:   New York/NY   AGEP       43      43\n2:   New York/NY  PINCP    52025   52025\n3:   New York/NY  PWGTP 97.81478      73\n4:      Texas/TX   AGEP       40      40\n5:      Texas/TX  PINCP    45756   45756\n6:      Texas/TX  PWGTP 107.4338      76\n7: California/CA   AGEP       41      41\n8: California/CA  PINCP    54155   54155\n9: California/CA  PWGTP 100.6999      75\n\n# Chaining with operators\npums[year == 2022][, .N, by = ST][order(-N)]\n\n              ST      N\n          &lt;char&gt;  &lt;int&gt;\n1: California/CA 391171\n2:      Texas/TX 292919\n3:   New York/NY 203891"
  },
  {
    "objectID": "materials/slides/02-datatable.html#feature-rich-6",
    "href": "materials/slides/02-datatable.html#feature-rich-6",
    "title": "data.table",
    "section": "Feature Rich",
    "text": "Feature Rich\nNot convinced by the syntax?\n\nlibrary(dtplyr)\n\npums_dt &lt;- pums |&gt; \n  lazy_dt() |&gt; \n  select(PINCP, age_groups, year) |&gt; \n  group_by(age_groups, year) |&gt; \n  summarise(avg_tot_income = mean(PINCP)) |&gt; \n  collect()  # or as.data.table() will collect it too\npums_dt\n\n# A tibble: 6 √ó 3\n# Groups:   age_groups [3]\n  age_groups  year avg_tot_income\n  &lt;chr&gt;      &lt;int&gt;          &lt;dbl&gt;\n1 18-64       2021         51100.\n2 18-64       2022         50939.\n3 65+         2021         51131.\n4 65+         2022         50953.\n5 Under 18    2021         50873.\n6 Under 18    2022         50701.\n\npums |&gt; \n  lazy_dt() |&gt; \n  select(PINCP, age_groups, year) |&gt; \n  group_by(age_groups, year) |&gt; \n  summarise(avg_tot_income = mean(PINCP)) |&gt; \n  show_query()\n\n`_DT2`[, .(PINCP, age_groups, year)][, .(avg_tot_income = mean(PINCP)), \n    keyby = .(age_groups, year)]"
  },
  {
    "objectID": "materials/slides/02-datatable.html#review",
    "href": "materials/slides/02-datatable.html#review",
    "title": "data.table",
    "section": "Review",
    "text": "Review\n\nLearn the DT[i, j, by] syntax - it‚Äôs the foundation\nUse keys for fast subsetting and joins\nModify by reference with := for memory efficiency\nChain operations and use operators for readable, efficient code\nCheck the documentation - excellent vignettes available\n\nResources:\n\nOfficial vignettes: vignette(\"datatable-intro\")\nGitHub: https://github.com/Rdatatable/data.table\nStack Overflow: [data.table] tag"
  },
  {
    "objectID": "materials/activities/03-practice-arrow.html",
    "href": "materials/activities/03-practice-arrow.html",
    "title": "Hands-on practice: Analysis with PUMS Data",
    "section": "",
    "text": "detailed dataset description\n\nPublic Use Microdata Sample\n\nUS Census Bureau data\nIndividual person and household records\nAnonymized demographic information\nIncome, education, housing, commute, etc.\n\nDataset characteristics:\n\nMultiple years (2005-2022, sans 2020)\nAll US states and territories\n53 Million rows (person), 25 Million rows (household)\n200+ variables"
  },
  {
    "objectID": "materials/activities/03-practice-arrow.html#the-pums-dataset",
    "href": "materials/activities/03-practice-arrow.html#the-pums-dataset",
    "title": "Hands-on practice: Analysis with PUMS Data",
    "section": "",
    "text": "detailed dataset description\n\nPublic Use Microdata Sample\n\nUS Census Bureau data\nIndividual person and household records\nAnonymized demographic information\nIncome, education, housing, commute, etc.\n\nDataset characteristics:\n\nMultiple years (2005-2022, sans 2020)\nAll US states and territories\n53 Million rows (person), 25 Million rows (household)\n200+ variables"
  },
  {
    "objectID": "materials/activities/03-practice-arrow.html#reading-partitioned-pums-data",
    "href": "materials/activities/03-practice-arrow.html#reading-partitioned-pums-data",
    "title": "Hands-on practice: Analysis with PUMS Data",
    "section": "Reading Partitioned PUMS Data",
    "text": "Reading Partitioned PUMS Data\n\nProblemsHintsSolution\n\n\n\nLoad the PUMS person data as an arrow dataset\nWhat are the dimensions of the dataset? Number of rows? Number of columns?\nExamine the dataset:\n\nWhat columns does the dataset have?\nWhat are the column types?\n\n\n\n\nYou can use arrow::open_dataset(...) to open a dataset. Treat the dataset like it‚Äôs a data frame, can you use the same functions that you are already familiar with?\n\n\n\nlibrary(arrow)\nlibrary(dplyr)\n\n# Open the PUMS dataset\npums_ds &lt;- open_dataset(\"~/PUMS/data/person\")\n\n# dimensions\nnrow(pums_ds)\nncol(pums_ds)\n\n# Examine the dataset\npums_ds\n\n# Examine schema\nschema(pums_ds)"
  },
  {
    "objectID": "materials/activities/03-practice-arrow.html#exercise-1-basic-filtering-and-aggregation",
    "href": "materials/activities/03-practice-arrow.html#exercise-1-basic-filtering-and-aggregation",
    "title": "Hands-on practice: Analysis with PUMS Data",
    "section": "Exercise 1: Basic Filtering and Aggregation",
    "text": "Exercise 1: Basic Filtering and Aggregation\n\nProblemsSolution\n\n\n\n\n\n\n# Calculate average income by state for 2021\nresult1 &lt;- pums_ds |&gt;\n  filter(year == 2021) |&gt;\n  filter(PINCP &gt; 0) |&gt;  # Positive income only\n  group_by(location) |&gt;\n  summarize(\n    avg_income = mean(PINCP, na.rm = TRUE),\n    median_income = quantile(PINCP, 0.5, na.rm = TRUE),\n    n = n()\n  ) |&gt;\n  arrange(desc(avg_income)) |&gt;\n  collect()\n\n# View results\nhead(result1)"
  },
  {
    "objectID": "materials/activities/03-practice-arrow.html#exercise-2-using-duckdb-with-pums-data",
    "href": "materials/activities/03-practice-arrow.html#exercise-2-using-duckdb-with-pums-data",
    "title": "Hands-on practice: Analysis with PUMS Data",
    "section": "Exercise 2: Using DuckDB with PUMS Data",
    "text": "Exercise 2: Using DuckDB with PUMS Data\n\nProblemsSolution\n\n\n\n\n\n\nlibrary(arrow)\nlibrary(duckdb)\nlibrary(DBI)\n\n# Open the PUMS dataset with Arrow\npums_ds &lt;- open_dataset(\"data/person\")\n\n# Filter to just 2021 data for Washington\nwa_2021 &lt;- pums_ds |&gt;\n  filter(year == 2021, location == \"wa\") |&gt;\n  collect()\n\n# Create DuckDB connection\ncon &lt;- dbConnect(duckdb())\n\n# Register Arrow Table with DuckDB\nduckdb::duckdb_register_arrow(con, \"pums_wa\", wa_2021)\n\n# Run SQL query\nresult &lt;- dbGetQuery(con, \"\n  SELECT \n    CASE \n      WHEN AGEP &lt; 18 THEN 'Under 18'\n      WHEN AGEP &lt; 30 THEN '18-29'\n      WHEN AGEP &lt; 45 THEN '30-44'\n      WHEN AGEP &lt; 65 THEN '45-64'\n      ELSE '65+'\n    END AS age_group,\n    AVG(JWMNP) AS avg_commute_time,\n    COUNT(*) AS n\n  FROM pums_wa\n  WHERE JWMNP &gt; 0\n  GROUP BY age_group\n  ORDER BY age_group\n\")\n\n# Disconnect when done\ndbDisconnect(con, shutdown = TRUE)"
  },
  {
    "objectID": "materials/activities/03-practice-arrow.html#challenge-formulate-your-own-analysis",
    "href": "materials/activities/03-practice-arrow.html#challenge-formulate-your-own-analysis",
    "title": "Hands-on practice: Analysis with PUMS Data",
    "section": "Challenge: Formulate Your Own Analysis",
    "text": "Challenge: Formulate Your Own Analysis\n\nChoose a research question:\n\nHow has commute time changed over the years?\nWhat‚Äôs the relationship between education and income?\nHow does housing cost burden vary by state?\nYour own question‚Ä¶\n\nImplement the analysis using:\n\nArrow Dataset operations\nDuckDB SQL queries\nData visualization\n\nCompare performance between approaches"
  },
  {
    "objectID": "materials/activities/04-practice-workflow.html#demo",
    "href": "materials/activities/04-practice-workflow.html#demo",
    "title": "JSM 2025: Large Local Data Course",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "materials/activities/04-practice-workflow.html#your-turn",
    "href": "materials/activities/04-practice-workflow.html#your-turn",
    "title": "JSM 2025: Large Local Data Course",
    "section": "Your Turn",
    "text": "Your Turn"
  }
]